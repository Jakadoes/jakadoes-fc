
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d14  08005d14  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005d14  08005d14  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d14  08005d14  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  20000020  08005d3c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  08005d3c  00020a04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011274  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025a1  00000000  00000000  000312bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  00033860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00034900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008c62  00000000  00000000  000358a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126d3  00000000  00000000  0003e502  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba838  00000000  00000000  00050bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010b40d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004600  00000000  00000000  0010b488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	080051d8 	.word	0x080051d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	080051d8 	.word	0x080051d8

0800014c <Control_Set_Target>:
int16_t control_dk=1;//derivative gain
uint32_t control_time_old = 0;
uint32_t control_dt = 0;

void Control_Set_Target(int16_t pitch,int16_t roll,int16_t thrust, int16_t yaw)
{
 800014c:	b490      	push	{r4, r7}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4604      	mov	r4, r0
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4623      	mov	r3, r4
 800015c:	80fb      	strh	r3, [r7, #6]
 800015e:	4603      	mov	r3, r0
 8000160:	80bb      	strh	r3, [r7, #4]
 8000162:	460b      	mov	r3, r1
 8000164:	807b      	strh	r3, [r7, #2]
 8000166:	4613      	mov	r3, r2
 8000168:	803b      	strh	r3, [r7, #0]
	control_targets[CONTROL_PITCH] = pitch;
 800016a:	4a08      	ldr	r2, [pc, #32]	; (800018c <Control_Set_Target+0x40>)
 800016c:	88fb      	ldrh	r3, [r7, #6]
 800016e:	8013      	strh	r3, [r2, #0]
	control_targets[CONTROL_ROLL] = roll;
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <Control_Set_Target+0x40>)
 8000172:	88bb      	ldrh	r3, [r7, #4]
 8000174:	8053      	strh	r3, [r2, #2]
	control_targets[CONTROL_THRUST] = thrust;
 8000176:	4a05      	ldr	r2, [pc, #20]	; (800018c <Control_Set_Target+0x40>)
 8000178:	887b      	ldrh	r3, [r7, #2]
 800017a:	8093      	strh	r3, [r2, #4]
	control_targets[CONTROL_YAW] = yaw;
 800017c:	4a03      	ldr	r2, [pc, #12]	; (800018c <Control_Set_Target+0x40>)
 800017e:	883b      	ldrh	r3, [r7, #0]
 8000180:	80d3      	strh	r3, [r2, #6]
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bc90      	pop	{r4, r7}
 800018a:	4770      	bx	lr
 800018c:	200005ac 	.word	0x200005ac

08000190 <Control_Tick>:

void Control_Tick()
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	Control_Update_Errors();
 8000194:	f000 f820 	bl	80001d8 <Control_Update_Errors>
	Control_Update_Outputs();
 8000198:	f000 f8d0 	bl	800033c <Control_Update_Outputs>
	//MAV_Send_Msg_Named_Value_Int("target", control_targets[0]);
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}

080001a0 <Control_Calculate_Error>:

int16_t Control_Calculate_Error(int16_t target,int16_t current)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	460a      	mov	r2, r1
 80001aa:	80fb      	strh	r3, [r7, #6]
 80001ac:	4613      	mov	r3, r2
 80001ae:	80bb      	strh	r3, [r7, #4]
	int16_t error = target*(-10) - current;//factor on target needed to compensate some conversion factor
 80001b0:	88fb      	ldrh	r3, [r7, #6]
 80001b2:	461a      	mov	r2, r3
 80001b4:	0352      	lsls	r2, r2, #13
 80001b6:	1ad2      	subs	r2, r2, r3
 80001b8:	0092      	lsls	r2, r2, #2
 80001ba:	1ad3      	subs	r3, r2, r3
 80001bc:	005b      	lsls	r3, r3, #1
 80001be:	b29a      	uxth	r2, r3
 80001c0:	88bb      	ldrh	r3, [r7, #4]
 80001c2:	1ad3      	subs	r3, r2, r3
 80001c4:	b29b      	uxth	r3, r3
 80001c6:	81fb      	strh	r3, [r7, #14]
	return error;
 80001c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3714      	adds	r7, #20
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
	...

080001d8 <Control_Update_Errors>:

void Control_Update_Errors()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	Mpu_Update_Values_MA();
 80001dc:	f002 fa9e 	bl	800271c <Mpu_Update_Values_MA>
	//accelerometer
	control_errors[MPU_AXIS_X] = Control_Calculate_Error(control_targets[MPU_AXIS_X], mpu_acc[MPU_AXIS_X]);
 80001e0:	4b3b      	ldr	r3, [pc, #236]	; (80002d0 <Control_Update_Errors+0xf8>)
 80001e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80001e6:	4b3b      	ldr	r3, [pc, #236]	; (80002d4 <Control_Update_Errors+0xfc>)
 80001e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80001ec:	4619      	mov	r1, r3
 80001ee:	4610      	mov	r0, r2
 80001f0:	f7ff ffd6 	bl	80001a0 <Control_Calculate_Error>
 80001f4:	4603      	mov	r3, r0
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b37      	ldr	r3, [pc, #220]	; (80002d8 <Control_Update_Errors+0x100>)
 80001fa:	801a      	strh	r2, [r3, #0]
	control_errors[MPU_AXIS_Y] = Control_Calculate_Error(control_targets[MPU_AXIS_Y], mpu_acc[MPU_AXIS_Y]);
 80001fc:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <Control_Update_Errors+0xf8>)
 80001fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000202:	4b34      	ldr	r3, [pc, #208]	; (80002d4 <Control_Update_Errors+0xfc>)
 8000204:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000208:	4619      	mov	r1, r3
 800020a:	4610      	mov	r0, r2
 800020c:	f7ff ffc8 	bl	80001a0 <Control_Calculate_Error>
 8000210:	4603      	mov	r3, r0
 8000212:	461a      	mov	r2, r3
 8000214:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <Control_Update_Errors+0x100>)
 8000216:	805a      	strh	r2, [r3, #2]
	control_errors[MPU_AXIS_Z] = Control_Calculate_Error(control_targets[MPU_AXIS_Z], mpu_acc[MPU_AXIS_Z]);
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <Control_Update_Errors+0xf8>)
 800021a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800021e:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <Control_Update_Errors+0xfc>)
 8000220:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000224:	4619      	mov	r1, r3
 8000226:	4610      	mov	r0, r2
 8000228:	f7ff ffba 	bl	80001a0 <Control_Calculate_Error>
 800022c:	4603      	mov	r3, r0
 800022e:	461a      	mov	r2, r3
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <Control_Update_Errors+0x100>)
 8000232:	809a      	strh	r2, [r3, #4]
	//gyroscope NOTE: switch rotation axis with accelerometer axis
	//+'ve gyro error is in proper direction
	control_errors[MPU_AXIS_Y+3] = ((control_errors[MPU_AXIS_X] > 0) - (control_errors[MPU_AXIS_X] < 0))* mpu_gyro[MPU_AXIS_X];
 8000234:	4b28      	ldr	r3, [pc, #160]	; (80002d8 <Control_Update_Errors+0x100>)
 8000236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800023a:	2b00      	cmp	r3, #0
 800023c:	bfcc      	ite	gt
 800023e:	2301      	movgt	r3, #1
 8000240:	2300      	movle	r3, #0
 8000242:	b2db      	uxtb	r3, r3
 8000244:	461a      	mov	r2, r3
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <Control_Update_Errors+0x100>)
 8000248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800024c:	b29b      	uxth	r3, r3
 800024e:	0bdb      	lsrs	r3, r3, #15
 8000250:	b2db      	uxtb	r3, r3
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	b29b      	uxth	r3, r3
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <Control_Update_Errors+0x104>)
 8000258:	8812      	ldrh	r2, [r2, #0]
 800025a:	fb02 f303 	mul.w	r3, r2, r3
 800025e:	b29b      	uxth	r3, r3
 8000260:	b21a      	sxth	r2, r3
 8000262:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <Control_Update_Errors+0x100>)
 8000264:	811a      	strh	r2, [r3, #8]
	control_errors[MPU_AXIS_X+3] = ((control_errors[MPU_AXIS_Y] > 0) - (control_errors[MPU_AXIS_Y] < 0))* mpu_gyro[MPU_AXIS_Y];
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <Control_Update_Errors+0x100>)
 8000268:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	bfcc      	ite	gt
 8000270:	2301      	movgt	r3, #1
 8000272:	2300      	movle	r3, #0
 8000274:	b2db      	uxtb	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <Control_Update_Errors+0x100>)
 800027a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800027e:	b29b      	uxth	r3, r3
 8000280:	0bdb      	lsrs	r3, r3, #15
 8000282:	b2db      	uxtb	r3, r3
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	b29b      	uxth	r3, r3
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <Control_Update_Errors+0x104>)
 800028a:	8852      	ldrh	r2, [r2, #2]
 800028c:	fb02 f303 	mul.w	r3, r2, r3
 8000290:	b29b      	uxth	r3, r3
 8000292:	b21a      	sxth	r2, r3
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <Control_Update_Errors+0x100>)
 8000296:	80da      	strh	r2, [r3, #6]
	control_errors[MPU_AXIS_Z+3] = ((control_errors[MPU_AXIS_Z] > 0) - (control_errors[MPU_AXIS_Z] < 0))* mpu_gyro[MPU_AXIS_Z];
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <Control_Update_Errors+0x100>)
 800029a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	bfcc      	ite	gt
 80002a2:	2301      	movgt	r3, #1
 80002a4:	2300      	movle	r3, #0
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <Control_Update_Errors+0x100>)
 80002ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	0bdb      	lsrs	r3, r3, #15
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <Control_Update_Errors+0x104>)
 80002bc:	8892      	ldrh	r2, [r2, #4]
 80002be:	fb02 f303 	mul.w	r3, r2, r3
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	b21a      	sxth	r2, r3
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <Control_Update_Errors+0x100>)
 80002c8:	815a      	strh	r2, [r3, #10]
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	200005ac 	.word	0x200005ac
 80002d4:	20000530 	.word	0x20000530
 80002d8:	200005a0 	.word	0x200005a0
 80002dc:	20000538 	.word	0x20000538

080002e0 <Control_Calculate_Output>:

int16_t Control_Calculate_Output(int axis)
{	//fix dk control by adding history of error
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	int16_t output = control_k*(control_errors[axis]) + -1*control_dk*(control_errors[axis + 3]);
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <Control_Calculate_Output+0x50>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	4a10      	ldr	r2, [pc, #64]	; (8000334 <Control_Calculate_Output+0x54>)
 80002f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80002f8:	b292      	uxth	r2, r2
 80002fa:	fb02 f303 	mul.w	r3, r2, r3
 80002fe:	b29a      	uxth	r2, r3
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <Control_Calculate_Output+0x58>)
 8000302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000306:	425b      	negs	r3, r3
 8000308:	b29b      	uxth	r3, r3
 800030a:	6879      	ldr	r1, [r7, #4]
 800030c:	3103      	adds	r1, #3
 800030e:	4808      	ldr	r0, [pc, #32]	; (8000330 <Control_Calculate_Output+0x50>)
 8000310:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 8000314:	b289      	uxth	r1, r1
 8000316:	fb01 f303 	mul.w	r3, r1, r3
 800031a:	b29b      	uxth	r3, r3
 800031c:	4413      	add	r3, r2
 800031e:	b29b      	uxth	r3, r3
 8000320:	81fb      	strh	r3, [r7, #14]
	return output;
 8000322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	200005a0 	.word	0x200005a0
 8000334:	20000000 	.word	0x20000000
 8000338:	20000002 	.word	0x20000002

0800033c <Control_Update_Outputs>:

void Control_Update_Outputs()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	//Control_Update_Dt();
	control_output[CONTROL_PITCH] = Control_Calculate_Output(CONTROL_PITCH)/-42;//arbitary scaling
 8000340:	2000      	movs	r0, #0
 8000342:	f7ff ffcd 	bl	80002e0 <Control_Calculate_Output>
 8000346:	4603      	mov	r3, r0
 8000348:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <Control_Update_Outputs+0x3c>)
 800034a:	fb82 1203 	smull	r1, r2, r2, r3
 800034e:	10d2      	asrs	r2, r2, #3
 8000350:	17db      	asrs	r3, r3, #31
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	b21a      	sxth	r2, r3
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <Control_Update_Outputs+0x40>)
 8000358:	801a      	strh	r2, [r3, #0]
	control_output[CONTROL_ROLL] = Control_Calculate_Output(CONTROL_ROLL)/-42;
 800035a:	2001      	movs	r0, #1
 800035c:	f7ff ffc0 	bl	80002e0 <Control_Calculate_Output>
 8000360:	4603      	mov	r3, r0
 8000362:	4a05      	ldr	r2, [pc, #20]	; (8000378 <Control_Update_Outputs+0x3c>)
 8000364:	fb82 1203 	smull	r1, r2, r2, r3
 8000368:	10d2      	asrs	r2, r2, #3
 800036a:	17db      	asrs	r3, r3, #31
 800036c:	1a9b      	subs	r3, r3, r2
 800036e:	b21a      	sxth	r2, r3
 8000370:	4b02      	ldr	r3, [pc, #8]	; (800037c <Control_Update_Outputs+0x40>)
 8000372:	805a      	strh	r2, [r3, #2]
	//control_output[MPU_AXIS_Z] = Control_Calculate_Output(MPU_AXIS_Z);
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	30c30c31 	.word	0x30c30c31
 800037c:	20000540 	.word	0x20000540

08000380 <I2c_IsDeviceReady>:
I2C_HandleTypeDef hi2c2;
#define I2C_TRIALS_DEFAULT 40
#define I2C_TIMEOUT_DEFAULT 2000

uint8_t I2c_IsDeviceReady(uint8_t Address)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	b29b      	uxth	r3, r3
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	81fb      	strh	r3, [r7, #14]
	//uint16_t devAddress = 0b0000000001110111;
	uint8_t test[2];
	//test[1] = devAddress & 0xff;
	//test[0] = devAddress >>8;
	//Radio_Transmit_Raw(&test, 2);
	return HAL_I2C_IsDeviceReady(&hi2c2, devAddress, I2C_TRIALS_DEFAULT, I2C_TIMEOUT_DEFAULT);
 8000392:	89f9      	ldrh	r1, [r7, #14]
 8000394:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000398:	2228      	movs	r2, #40	; 0x28
 800039a:	4804      	ldr	r0, [pc, #16]	; (80003ac <I2c_IsDeviceReady+0x2c>)
 800039c:	f003 fc4c 	bl	8003c38 <HAL_I2C_IsDeviceReady>
 80003a0:	4603      	mov	r3, r0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000548 	.word	0x20000548

080003b0 <I2c_Master_Transmit>:

void I2c_Master_Transmit(uint8_t Address, uint8_t* message, uint16_t messageSize)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	4603      	mov	r3, r0
 80003b8:	6039      	str	r1, [r7, #0]
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left once before use (check HAL documentation)
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, devAddress, message, messageSize, I2C_TIMEOUT_DEFAULT);
 80003c8:	88ba      	ldrh	r2, [r7, #4]
 80003ca:	89f9      	ldrh	r1, [r7, #14]
 80003cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	4613      	mov	r3, r2
 80003d4:	683a      	ldr	r2, [r7, #0]
 80003d6:	4803      	ldr	r0, [pc, #12]	; (80003e4 <I2c_Master_Transmit+0x34>)
 80003d8:	f003 f902 	bl	80035e0 <HAL_I2C_Master_Transmit>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000548 	.word	0x20000548

080003e8 <I2c_Master_Receive>:

void I2c_Master_Receive(uint8_t Address, uint8_t* messageDestination, uint16_t messageSize)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	6039      	str	r1, [r7, #0]
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	4613      	mov	r3, r2
 80003f6:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Receive(&hi2c2, devAddress, messageDestination, messageSize, I2C_TIMEOUT_DEFAULT);
 8000400:	88ba      	ldrh	r2, [r7, #4]
 8000402:	89f9      	ldrh	r1, [r7, #14]
 8000404:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	4613      	mov	r3, r2
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	4803      	ldr	r0, [pc, #12]	; (800041c <I2c_Master_Receive+0x34>)
 8000410:	f003 f9e4 	bl	80037dc <HAL_I2C_Master_Receive>
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000548 	.word	0x20000548

08000420 <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 8000426:	f002 fcd9 	bl	8002ddc <HAL_Init>
	MX_USART1_UART_Init();
 800042a:	f000 f8d5 	bl	80005d8 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 800042e:	f000 f857 	bl	80004e0 <MX_TIM4_Init>
	MX_I2C2_Init();
 8000432:	f000 f827 	bl	8000484 <MX_I2C2_Init>
	MX_GPIO_Init();
 8000436:	f000 f8f9 	bl	800062c <MX_GPIO_Init>
	//MX_RTC_Init();
	Mpu_Wake();
 800043a:	f002 f938 	bl	80026ae <Mpu_Wake>
	HAL_Delay(20);
 800043e:	2014      	movs	r0, #20
 8000440:	f002 fd2e 	bl	8002ea0 <HAL_Delay>
	Mpu_Calibrate();//sets initial acc values as calibration
 8000444:	f002 f950 	bl	80026e8 <Mpu_Calibrate>
	//uint8_t baro_flag = 5;
	//cam_photo_rx_buffer[10] = 0x44;
	//cam_photo_rx_buffer[11] = 0x55;
	//cam_photo_rx_buffer[12] = 0x66;
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2108      	movs	r1, #8
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <main+0x60>)
 800044e:	f002 ff87 	bl	8003360 <HAL_GPIO_WritePin>
	//uint8_t timChannels[] = {TIM_CHANNEL_1,TIM_CHANNEL_2,TIM_CHANNEL_3,TIM_CHANNEL_4};
	uint8_t poop = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	71fb      	strb	r3, [r7, #7]
		//Radio_Recieve_Raw((uint8_t*) &rx_buffer, 4);
		//MAV_Send_Debug_Statement_Default();
		//Motor_Set_Speed_All(0,0,0,0);
		//MAV_Parse_Data();
		//**************start of control test code*************
		MAV_Parse_Data();
 8000456:	f001 fdbd 	bl	8001fd4 <MAV_Parse_Data>
		Control_Tick();
 800045a:	f7ff fe99 	bl	8000190 <Control_Tick>
		Motor_Set_Speed_Guided();
 800045e:	f002 f905 	bl	800266c <Motor_Set_Speed_Guided>
		HAL_Delay(5);
 8000462:	2005      	movs	r0, #5
 8000464:	f002 fd1c 	bl	8002ea0 <HAL_Delay>
		if(poop >= 5)
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b04      	cmp	r3, #4
 800046c:	d903      	bls.n	8000476 <main+0x56>
		{
			MAV_Send_Raw_Imu();
 800046e:	f001 fe09 	bl	8002084 <MAV_Send_Raw_Imu>
			poop = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	71fb      	strb	r3, [r7, #7]
		}
		HAL_Delay(5);
 8000476:	2005      	movs	r0, #5
 8000478:	f002 fd12 	bl	8002ea0 <HAL_Delay>
	while(1){
 800047c:	e7eb      	b.n	8000456 <main+0x36>
 800047e:	bf00      	nop
 8000480:	40010c00 	.word	0x40010c00

08000484 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_I2C2_Init+0x50>)
 800048a:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <MX_I2C2_Init+0x54>)
 800048c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_I2C2_Init+0x50>)
 8000490:	4a12      	ldr	r2, [pc, #72]	; (80004dc <MX_I2C2_Init+0x58>)
 8000492:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_I2C2_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_I2C2_Init+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_I2C2_Init+0x50>)
 80004a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MX_I2C2_Init+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_I2C2_Init+0x50>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <MX_I2C2_Init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_I2C2_Init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <MX_I2C2_Init+0x50>)
 80004c2:	f002 ff65 	bl	8003390 <HAL_I2C_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004cc:	f000 f900 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000548 	.word	0x20000548
 80004d8:	40005800 	.word	0x40005800
 80004dc:	000186a0 	.word	0x000186a0

080004e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000502:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <MX_TIM4_Init+0xf0>)
 8000504:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <MX_TIM4_Init+0xf4>)
 8000506:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000508:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_TIM4_Init+0xf0>)
 800050a:	220a      	movs	r2, #10
 800050c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050e:	4b30      	ldr	r3, [pc, #192]	; (80005d0 <MX_TIM4_Init+0xf0>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 8000514:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_TIM4_Init+0xf0>)
 8000516:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800051a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051c:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_TIM4_Init+0xf0>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000522:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <MX_TIM4_Init+0xf0>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000528:	4829      	ldr	r0, [pc, #164]	; (80005d0 <MX_TIM4_Init+0xf0>)
 800052a:	f003 ffe1 	bl	80044f0 <HAL_TIM_PWM_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000534:	f000 f8cc 	bl	80006d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000540:	f107 0320 	add.w	r3, r7, #32
 8000544:	4619      	mov	r1, r3
 8000546:	4822      	ldr	r0, [pc, #136]	; (80005d0 <MX_TIM4_Init+0xf0>)
 8000548:	f004 fb04 	bl	8004b54 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000552:	f000 f8bd 	bl	80006d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000556:	2360      	movs	r3, #96	; 0x60
 8000558:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 768;
 800055a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800055e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	4619      	mov	r1, r3
 800056e:	4818      	ldr	r0, [pc, #96]	; (80005d0 <MX_TIM4_Init+0xf0>)
 8000570:	f004 f81c 	bl	80045ac <HAL_TIM_PWM_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800057a:	f000 f8a9 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2204      	movs	r2, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4812      	ldr	r0, [pc, #72]	; (80005d0 <MX_TIM4_Init+0xf0>)
 8000586:	f004 f811 	bl	80045ac <HAL_TIM_PWM_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000590:	f000 f89e 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2208      	movs	r2, #8
 8000598:	4619      	mov	r1, r3
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <MX_TIM4_Init+0xf0>)
 800059c:	f004 f806 	bl	80045ac <HAL_TIM_PWM_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80005a6:	f000 f893 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	220c      	movs	r2, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <MX_TIM4_Init+0xf0>)
 80005b2:	f003 fffb 	bl	80045ac <HAL_TIM_PWM_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80005bc:	f000 f888 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <MX_TIM4_Init+0xf0>)
 80005c2:	f002 fb07 	bl	8002bd4 <HAL_TIM_MspPostInit>

}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200005c4 	.word	0x200005c4
 80005d4:	40000800 	.word	0x40000800

080005d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_USART1_UART_Init+0x50>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600*2;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART1_UART_Init+0x4c>)
 8000610:	f004 fae4 	bl	8004bdc <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800061a:	f000 f859 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000604 	.word	0x20000604
 8000628:	40013800 	.word	0x40013800

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_GPIO_Init+0x98>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <MX_GPIO_Init+0x98>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_GPIO_Init+0x98>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_GPIO_Init+0x98>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <MX_GPIO_Init+0x98>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_GPIO_Init+0x98>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <MX_GPIO_Init+0x9c>)
 8000676:	f002 fe73 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0xa0>)
 8000680:	f002 fe6e 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	4619      	mov	r1, r3
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <MX_GPIO_Init+0x9c>)
 800069c:	f002 fd06 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a0:	2308      	movs	r3, #8
 80006a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_GPIO_Init+0xa0>)
 80006b8:	f002 fcf8 	bl	80030ac <HAL_GPIO_Init>

}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010800 	.word	0x40010800
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4053      	eors	r3, r2
 80006f2:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fe:	4053      	eors	r3, r2
 8000700:	b25b      	sxtb	r3, r3
 8000702:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b29b      	uxth	r3, r3
 800070c:	b21a      	sxth	r2, r3
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b21b      	sxth	r3, r3
 8000714:	4053      	eors	r3, r2
 8000716:	b21a      	sxth	r2, r3
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b21b      	sxth	r3, r3
 800071e:	4053      	eors	r3, r2
 8000720:	b21a      	sxth	r2, r3
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b21b      	sxth	r3, r3
 800072a:	4053      	eors	r3, r2
 800072c:	b21b      	sxth	r3, r3
 800072e:	b29a      	uxth	r2, r3
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	801a      	strh	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074c:	801a      	strh	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000764:	f107 030e 	add.w	r3, r7, #14
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffe8 	bl	800073e <crc_init>
	while (length--) {
 800076e:	e009      	b.n	8000784 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f107 020e 	add.w	r2, r7, #14
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffac 	bl	80006dc <crc_accumulate>
	while (length--) {
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	1e5a      	subs	r2, r3, #1
 8000788:	807a      	strh	r2, [r7, #2]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f0      	bne.n	8000770 <crc_calculate+0x18>
        }
        return crcTmp;
 800078e:	89fb      	ldrh	r3, [r7, #14]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	4613      	mov	r3, r2
 80007a4:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	617b      	str	r3, [r7, #20]
	while (length--) {
 80007aa:	e007      	b.n	80007bc <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	617a      	str	r2, [r7, #20]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	68f9      	ldr	r1, [r7, #12]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff90 	bl	80006dc <crc_accumulate>
	while (length--) {
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	80fa      	strh	r2, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f2      	bne.n	80007ac <crc_accumulate_buffer+0x14>
        }
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <mavlink_sha256_init+0x50>)
 80007e8:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <mavlink_sha256_init+0x54>)
 80007ee:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <mavlink_sha256_init+0x58>)
 80007f4:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <mavlink_sha256_init+0x5c>)
 80007fa:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <mavlink_sha256_init+0x60>)
 8000800:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <mavlink_sha256_init+0x64>)
 8000806:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <mavlink_sha256_init+0x68>)
 800080c:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <mavlink_sha256_init+0x6c>)
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	6a09e667 	.word	0x6a09e667
 8000824:	bb67ae85 	.word	0xbb67ae85
 8000828:	3c6ef372 	.word	0x3c6ef372
 800082c:	a54ff53a 	.word	0xa54ff53a
 8000830:	510e527f 	.word	0x510e527f
 8000834:	9b05688c 	.word	0x9b05688c
 8000838:	1f83d9ab 	.word	0x1f83d9ab
 800083c:	5be0cd19 	.word	0x5be0cd19

08000840 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000840:	b480      	push	{r7}
 8000842:	b0cf      	sub	sp, #316	; 0x13c
 8000844:	af00      	add	r7, sp, #0
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	6018      	str	r0, [r3, #0]
 800084a:	463b      	mov	r3, r7
 800084c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6a1b      	ldr	r3, [r3, #32]
 8000890:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008a4:	e011      	b.n	80008ca <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 80008a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	463a      	mov	r2, r7
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	6819      	ldr	r1, [r3, #0]
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80008bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80008c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008c4:	3301      	adds	r3, #1
 80008c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	dde9      	ble.n	80008a6 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80008d2:	2310      	movs	r3, #16
 80008d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008d8:	e057      	b.n	800098a <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80008da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008de:	1e9a      	subs	r2, r3, #2
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80008ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008f0:	1e99      	subs	r1, r3, #2
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008fa:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80008fe:	405a      	eors	r2, r3
 8000900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000904:	1e99      	subs	r1, r3, #2
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800090e:	0a9b      	lsrs	r3, r3, #10
 8000910:	405a      	eors	r2, r3
 8000912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000916:	1fd9      	subs	r1, r3, #7
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000920:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000926:	f1a3 010f 	sub.w	r1, r3, #15
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000932:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800093a:	f1a3 000f 	sub.w	r0, r3, #15
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000946:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800094a:	4059      	eors	r1, r3
 800094c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000950:	f1a3 000f 	sub.w	r0, r3, #15
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000960:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000966:	f1a3 0110 	sub.w	r1, r3, #16
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000972:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800097c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000984:	3301      	adds	r3, #1
 8000986:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800098a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800098e:	2b3f      	cmp	r3, #63	; 0x3f
 8000990:	dda3      	ble.n	80008da <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000998:	e076      	b.n	8000a88 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800099a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800099e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80009a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009a6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80009aa:	405a      	eors	r2, r3
 80009ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009b0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80009b4:	405a      	eors	r2, r3
 80009b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80009ba:	441a      	add	r2, r3
 80009bc:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80009c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009c4:	4019      	ands	r1, r3
 80009c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009ca:	43d8      	mvns	r0, r3
 80009cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009d0:	4003      	ands	r3, r0
 80009d2:	404b      	eors	r3, r1
 80009d4:	441a      	add	r2, r3
 80009d6:	4955      	ldr	r1, [pc, #340]	; (8000b2c <mavlink_sha256_calc+0x2ec>)
 80009d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e0:	441a      	add	r2, r3
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80009ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009ee:	4413      	add	r3, r2
 80009f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80009f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80009f8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80009fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a00:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000a04:	405a      	eors	r2, r3
 8000a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a0a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000a0e:	405a      	eors	r2, r3
 8000a10:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a18:	4059      	eors	r1, r3
 8000a1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a1e:	4019      	ands	r1, r3
 8000a20:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a28:	4003      	ands	r3, r0
 8000a2a:	404b      	eors	r3, r1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000a3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000a42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000a4a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000a4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a52:	4413      	add	r3, r2
 8000a54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000a68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000a70:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a78:	4413      	add	r3, r2
 8000a7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a82:	3301      	adds	r3, #1
 8000a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8e:	dd84      	ble.n	800099a <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a9a:	441a      	add	r2, r3
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	609a      	str	r2, [r3, #8]
    B += BB;
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000aac:	441a      	add	r2, r3
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60da      	str	r2, [r3, #12]
    C += CC;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	691a      	ldr	r2, [r3, #16]
 8000aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000abe:	441a      	add	r2, r3
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	611a      	str	r2, [r3, #16]
    D += DD;
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ad0:	441a      	add	r2, r3
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	615a      	str	r2, [r3, #20]
    E += EE;
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ae2:	441a      	add	r2, r3
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	619a      	str	r2, [r3, #24]
    F += FF;
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	69da      	ldr	r2, [r3, #28]
 8000af0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000af4:	441a      	add	r2, r3
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	61da      	str	r2, [r3, #28]
    G += GG;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a1a      	ldr	r2, [r3, #32]
 8000b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b06:	441a      	add	r2, r3
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	621a      	str	r2, [r3, #32]
    H += HH;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b18:	441a      	add	r2, r3
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b20:	bf00      	nop
 8000b22:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	080051f8 	.word	0x080051f8

08000b30 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09c      	sub	sp, #112	; 0x70
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	441a      	add	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d904      	bls.n	8000b68 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b70:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000b72:	e054      	b.n	8000c1e <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b76:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000b7a:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d201      	bcs.n	8000b88 <mavlink_sha256_update+0x58>
            l = len;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b90:	4413      	add	r3, r2
 8000b92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 fb03 	bl	80051a2 <memcpy>
	offset += l;
 8000b9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ba0:	4413      	add	r3, r2
 8000ba2:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ba8:	4413      	add	r3, r2
 8000baa:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bb6:	2b40      	cmp	r3, #64	; 0x40
 8000bb8:	d131      	bne.n	8000c1e <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3328      	adds	r3, #40	; 0x28
 8000bbe:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8000bc4:	e020      	b.n	8000c08 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000bcc:	4413      	add	r3, r2
 8000bce:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000bd0:	f107 0210 	add.w	r2, r7, #16
 8000bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bde:	78da      	ldrb	r2, [r3, #3]
 8000be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be2:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be6:	3301      	adds	r3, #1
 8000be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000bea:	7892      	ldrb	r2, [r2, #2]
 8000bec:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000bf4:	7852      	ldrb	r2, [r2, #1]
 8000bf6:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c04:	3301      	adds	r3, #1
 8000c06:	663b      	str	r3, [r7, #96]	; 0x60
 8000c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	dddb      	ble.n	8000bc6 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4619      	mov	r1, r3
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff fe13 	bl	8000840 <mavlink_sha256_calc>
	    offset = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1a7      	bne.n	8000b74 <mavlink_sha256_update+0x44>
	}
    }
}
 8000c24:	bf00      	nop
 8000c26:	3770      	adds	r7, #112	; 0x70
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b098      	sub	sp, #96	; 0x60
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	08db      	lsrs	r3, r3, #3
 8000c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c44:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3308      	adds	r3, #8
 8000c54:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	3301      	adds	r3, #1
 8000c60:	2247      	movs	r2, #71	; 0x47
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 faa7 	bl	80051b8 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c70:	3307      	adds	r3, #7
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000c78:	440b      	add	r3, r1
 8000c7a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	0a1a      	lsrs	r2, r3, #8
 8000c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c86:	3306      	adds	r3, #6
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000c8e:	440b      	add	r3, r1
 8000c90:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	0c1a      	lsrs	r2, r3, #16
 8000c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c9c:	3305      	adds	r3, #5
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ca4:	440b      	add	r3, r1
 8000ca6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	0e1a      	lsrs	r2, r3, #24
 8000cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000cba:	440b      	add	r3, r1
 8000cbc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cc6:	3303      	adds	r3, #3
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000cce:	440b      	add	r3, r1
 8000cd0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	0a1a      	lsrs	r2, r3, #8
 8000cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cdc:	3302      	adds	r3, #2
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ce4:	440b      	add	r3, r1
 8000ce6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	0c1a      	lsrs	r2, r3, #16
 8000cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	0e1b      	lsrs	r3, r3, #24
 8000d06:	b2d9      	uxtb	r1, r3
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d0e:	4413      	add	r3, r2
 8000d10:	460a      	mov	r2, r1
 8000d12:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d16:	f103 0208 	add.w	r2, r3, #8
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff05 	bl	8000b30 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d28:	78da      	ldrb	r2, [r3, #3]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d34:	7892      	ldrb	r2, [r2, #2]
 8000d36:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d3e:	7852      	ldrb	r2, [r2, #1]
 8000d40:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3303      	adds	r3, #3
 8000d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	3304      	adds	r3, #4
 8000d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d52:	79d2      	ldrb	r2, [r2, #7]
 8000d54:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	3305      	adds	r3, #5
 8000d5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d5c:	7992      	ldrb	r2, [r2, #6]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	3760      	adds	r7, #96	; 0x60
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <mavlink_get_channel_status+0x24>)
 8000d7e:	4413      	add	r3, r2
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	200004d0 	.word	0x200004d0

08000d90 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f240 1223 	movw	r2, #291	; 0x123
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <mavlink_get_channel_buffer+0x24>)
 8000da6:	4413      	add	r3, r2
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000044 	.word	0x20000044

08000db8 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b0a1      	sub	sp, #132	; 0x84
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <mavlink_sign_packet+0x20>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <mavlink_sign_packet+0x24>
	    return 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e051      	b.n	8000e80 <mavlink_sign_packet+0xc8>
	}
	signature[0] = signing->link_id;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	785a      	ldrb	r2, [r3, #1]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f103 0408 	add.w	r4, r3, #8
 8000dea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000dee:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3301      	adds	r3, #1
 8000df6:	f107 0110 	add.w	r1, r7, #16
 8000dfa:	2206      	movs	r2, #6
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 f9d0 	bl	80051a2 <memcpy>
	signing->timestamp++;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000e08:	1c4b      	adds	r3, r1, #1
 8000e0a:	f142 0400 	adc.w	r4, r2, #0
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fcd9 	bl	80007d0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f103 0110 	add.w	r1, r3, #16
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	2220      	movs	r2, #32
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fe80 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	f107 0318 	add.w	r3, r7, #24
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fe79 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000e3e:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fe70 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	2202      	movs	r2, #2
 8000e56:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fe68 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	2207      	movs	r2, #7
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe61 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1dda      	adds	r2, r3, #7
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fed7 	bl	8000c2c <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000e7e:	230d      	movs	r3, #13
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3784      	adds	r7, #132	; 0x84
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd90      	pop	{r4, r7, pc}

08000e88 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000e94:	e002      	b.n	8000e9c <_mav_trim_payload+0x14>
		length--;
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d906      	bls.n	8000eb0 <_mav_trim_payload+0x28>
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f2      	beq.n	8000e96 <_mav_trim_payload+0xe>
	}
	return length;
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8000ebc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000ec0:	b0aa      	sub	sp, #168	; 0xa8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <mavlink_signature_check+0x18>
		return true;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e123      	b.n	800111c <mavlink_signature_check+0x260>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8000ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000eea:	3307      	adds	r3, #7
 8000eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fc6b 	bl	80007d0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f103 0110 	add.w	r1, r3, #16
 8000f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f04:	2220      	movs	r2, #32
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fe12 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	330a      	adds	r3, #10
 8000f12:	461a      	mov	r2, r3
 8000f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f18:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fe07 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8000f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fdfe 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8000f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f38:	2207      	movs	r2, #7
 8000f3a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fdf6 	bl	8000b30 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8000f44:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fe6c 	bl	8000c2c <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	2206      	movs	r2, #6
 8000f5a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 f910 	bl	8005184 <memcmp>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <mavlink_signature_check+0xb2>
		return false;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e0d6      	b.n	800111c <mavlink_signature_check+0x260>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8000f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	f04f 0400 	mov.w	r4, #0
 8000f80:	e9c7 3406 	strd	r3, r4, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8000f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f88:	1c59      	adds	r1, r3, #1
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2206      	movs	r2, #6
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 f906 	bl	80051a2 <memcpy>

	if (signing_streams == NULL) {
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <mavlink_signature_check+0xe4>
		return false;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e0bd      	b.n	800111c <mavlink_signature_check+0x260>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000fa6:	e02b      	b.n	8001000 <mavlink_signature_check+0x144>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	79d9      	ldrb	r1, [r3, #7]
 8000fac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4403      	add	r3, r0
 8000fba:	3303      	adds	r3, #3
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d119      	bne.n	8000ff6 <mavlink_signature_check+0x13a>
		    msg->compid == signing_streams->stream[i].compid &&
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7a19      	ldrb	r1, [r3, #8]
 8000fc6:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fca:	68b8      	ldr	r0, [r7, #8]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4403      	add	r3, r0
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d10c      	bne.n	8000ff6 <mavlink_signature_check+0x13a>
		    link_id == signing_streams->stream[i].link_id) {
 8000fdc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3302      	adds	r3, #2
 8000fec:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8000fee:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d00b      	beq.n	800100e <mavlink_signature_check+0x152>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000ff6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001008:	429a      	cmp	r2, r3
 800100a:	d3cd      	bcc.n	8000fa8 <mavlink_signature_check+0xec>
 800100c:	e000      	b.n	8001010 <mavlink_signature_check+0x154>
			break;
 800100e:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001018:	429a      	cmp	r2, r3
 800101a:	d143      	bne.n	80010a4 <mavlink_signature_check+0x1e8>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d901      	bls.n	8001028 <mavlink_signature_check+0x16c>
			// over max number of streams
			return false;
 8001024:	2300      	movs	r3, #0
 8001026:	e079      	b.n	800111c <mavlink_signature_check+0x260>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001028:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800102c:	493e      	ldr	r1, [pc, #248]	; (8001128 <mavlink_signature_check+0x26c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	eb11 0b03 	adds.w	fp, r1, r3
 8001036:	eb42 0c04 	adc.w	ip, r2, r4
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f103 0408 	add.w	r4, r3, #8
 8001040:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001044:	45a4      	cmp	ip, r4
 8001046:	bf08      	it	eq
 8001048:	459b      	cmpeq	fp, r3
 800104a:	d201      	bcs.n	8001050 <mavlink_signature_check+0x194>
			return false;
 800104c:	2300      	movs	r3, #0
 800104e:	e065      	b.n	800111c <mavlink_signature_check+0x260>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001050:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	79d8      	ldrb	r0, [r3, #7]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	440b      	add	r3, r1
 8001062:	3303      	adds	r3, #3
 8001064:	4602      	mov	r2, r0
 8001066:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001068:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7a18      	ldrb	r0, [r3, #8]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	440b      	add	r3, r1
 800107a:	3304      	adds	r3, #4
 800107c:	4602      	mov	r2, r0
 800107e:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001080:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	440b      	add	r3, r1
 800108e:	3302      	adds	r3, #2
 8001090:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001094:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	e01d      	b.n	80010e0 <mavlink_signature_check+0x224>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	f04f 0400 	mov.w	r4, #0
 80010ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 80010b0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	4413      	add	r3, r2
 80010be:	1d59      	adds	r1, r3, #5
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2206      	movs	r2, #6
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 f86b 	bl	80051a2 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 80010cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80010d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80010d4:	42a2      	cmp	r2, r4
 80010d6:	bf08      	it	eq
 80010d8:	4299      	cmpeq	r1, r3
 80010da:	d301      	bcc.n	80010e0 <mavlink_signature_check+0x224>
			// repeating old timestamp
			return false;
 80010dc:	2300      	movs	r3, #0
 80010de:	e01d      	b.n	800111c <mavlink_signature_check+0x260>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80010e0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	1d58      	adds	r0, r3, #5
 80010f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010f4:	3301      	adds	r3, #1
 80010f6:	2206      	movs	r2, #6
 80010f8:	4619      	mov	r1, r3
 80010fa:	f004 f852 	bl	80051a2 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 80010fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8001108:	42a2      	cmp	r2, r4
 800110a:	bf08      	it	eq
 800110c:	4299      	cmpeq	r1, r3
 800110e:	d204      	bcs.n	800111a <mavlink_signature_check+0x25e>
		signing->timestamp = tstamp.t64;
 8001110:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	e9c2 3402 	strd	r3, r4, [r2, #8]
	}
	return true;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	37a8      	adds	r7, #168	; 0xa8
 8001120:	46bd      	mov	sp, r7
 8001122:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001126:	bf00      	nop
 8001128:	005b8d80 	.word	0x005b8d80

0800112c <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	b08f      	sub	sp, #60	; 0x3c
 8001130:	af04      	add	r7, sp, #16
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	72fb      	strb	r3, [r7, #11]
 800113a:	4613      	mov	r3, r2
 800113c:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7b1b      	ldrb	r3, [r3, #12]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00c      	beq.n	800117a <mavlink_finalize_message_buffer+0x4e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <mavlink_finalize_message_buffer+0x4e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <mavlink_finalize_message_buffer+0x4e>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <mavlink_finalize_message_buffer+0x50>
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001180:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 800118c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <mavlink_finalize_message_buffer+0x6c>
 8001194:	230d      	movs	r3, #13
 8001196:	e000      	b.n	800119a <mavlink_finalize_message_buffer+0x6e>
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 800119e:	230a      	movs	r3, #10
 80011a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 80011a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	22fe      	movs	r2, #254	; 0xfe
 80011b0:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011b8:	e002      	b.n	80011c0 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	22fd      	movs	r2, #253	; 0xfd
 80011be:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80011c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10a      	bne.n	80011de <mavlink_finalize_message_buffer+0xb2>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	330c      	adds	r3, #12
 80011cc:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe58 	bl	8000e88 <_mav_trim_payload>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	e001      	b.n	80011e2 <mavlink_finalize_message_buffer+0xb6>
 80011de:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	7afa      	ldrb	r2, [r7, #11]
 80011ea:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	7aba      	ldrb	r2, [r7, #10]
 80011f0:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80011f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	799a      	ldrb	r2, [r3, #6]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	799b      	ldrb	r3, [r3, #6]
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	789b      	ldrb	r3, [r3, #2]
 800122c:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	78db      	ldrb	r3, [r3, #3]
 8001232:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	799b      	ldrb	r3, [r3, #6]
 8001240:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	79db      	ldrb	r3, [r3, #7]
 8001246:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	7a1b      	ldrb	r3, [r3, #8]
 800124c:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	7a5a      	ldrb	r2, [r3, #9]
 8001252:	7a99      	ldrb	r1, [r3, #10]
 8001254:	0209      	lsls	r1, r1, #8
 8001256:	430a      	orrs	r2, r1
 8001258:	7adb      	ldrb	r3, [r3, #11]
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	4313      	orrs	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	777b      	strb	r3, [r7, #29]
 8001262:	e030      	b.n	80012c6 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	795b      	ldrb	r3, [r3, #5]
 800126e:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	799b      	ldrb	r3, [r3, #6]
 8001274:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	79db      	ldrb	r3, [r3, #7]
 800127a:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	7a1b      	ldrb	r3, [r3, #8]
 8001280:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	7a5a      	ldrb	r2, [r3, #9]
 8001286:	7a99      	ldrb	r1, [r3, #10]
 8001288:	0209      	lsls	r1, r1, #8
 800128a:	430a      	orrs	r2, r1
 800128c:	7adb      	ldrb	r3, [r3, #11]
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	4313      	orrs	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	7a5a      	ldrb	r2, [r3, #9]
 800129a:	7a99      	ldrb	r1, [r3, #10]
 800129c:	0209      	lsls	r1, r1, #8
 800129e:	430a      	orrs	r2, r1
 80012a0:	7adb      	ldrb	r3, [r3, #11]
 80012a2:	041b      	lsls	r3, r3, #16
 80012a4:	4313      	orrs	r3, r2
 80012a6:	121b      	asrs	r3, r3, #8
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	7a5a      	ldrb	r2, [r3, #9]
 80012b2:	7a99      	ldrb	r1, [r3, #10]
 80012b4:	0209      	lsls	r1, r1, #8
 80012b6:	430a      	orrs	r2, r1
 80012b8:	7adb      	ldrb	r3, [r3, #11]
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	4313      	orrs	r3, r2
 80012be:	141b      	asrs	r3, r3, #16
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 80012c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	3301      	adds	r3, #1
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fa3d 	bl	8000758 <crc_calculate>
 80012de:	4603      	mov	r3, r0
 80012e0:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f103 010c 	add.w	r1, r3, #12
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	78db      	ldrb	r3, [r3, #3]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f107 0316 	add.w	r3, r7, #22
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fa50 	bl	8000798 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80012f8:	f107 0216 	add.w	r2, r7, #22
 80012fc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f9ea 	bl	80006dc <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001308:	8af9      	ldrh	r1, [r7, #22]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	78d2      	ldrb	r2, [r2, #3]
 8001312:	4413      	add	r3, r2
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001318:	8afb      	ldrh	r3, [r7, #22]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b299      	uxth	r1, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f103 020c 	add.w	r2, r3, #12
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	3301      	adds	r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	b2ca      	uxtb	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001330:	8afa      	ldrh	r2, [r7, #22]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8001336:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800133a:	2b00      	cmp	r3, #0
 800133c:	d01a      	beq.n	8001374 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001350:	68f9      	ldr	r1, [r7, #12]
 8001352:	310c      	adds	r1, #12
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001358:	4401      	add	r1, r0
 800135a:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 800135e:	f107 0018 	add.w	r0, r7, #24
 8001362:	9102      	str	r1, [sp, #8]
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4633      	mov	r3, r6
 800136a:	4602      	mov	r2, r0
 800136c:	4629      	mov	r1, r5
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fd22 	bl	8000db8 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	78db      	ldrb	r3, [r3, #3]
 8001378:	b29a      	uxth	r2, r3
 800137a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	3302      	adds	r3, #2
 8001390:	b29b      	uxth	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	372c      	adds	r7, #44	; 0x2c
 8001396:	46bd      	mov	sp, r7
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800139a <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b088      	sub	sp, #32
 800139e:	af04      	add	r7, sp, #16
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	4608      	mov	r0, r1
 80013a4:	4611      	mov	r1, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70bb      	strb	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcd6 	bl	8000d68 <mavlink_get_channel_status>
 80013bc:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80013be:	78ba      	ldrb	r2, [r7, #2]
 80013c0:	78f9      	ldrb	r1, [r7, #3]
 80013c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	7f3b      	ldrb	r3, [r7, #28]
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	7e3b      	ldrb	r3, [r7, #24]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff feaa 	bl	800112c <mavlink_finalize_message_buffer>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af04      	add	r7, sp, #16
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	4608      	mov	r0, r1
 80013ec:	4611      	mov	r1, r2
 80013ee:	461a      	mov	r2, r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	70fb      	strb	r3, [r7, #3]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70bb      	strb	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80013fc:	78ba      	ldrb	r2, [r7, #2]
 80013fe:	78f9      	ldrb	r1, [r7, #3]
 8001400:	7d3b      	ldrb	r3, [r7, #20]
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	7c3b      	ldrb	r3, [r7, #16]
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffc3 	bl	800139a <mavlink_finalize_message_chan>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	709a      	strb	r2, [r3, #2]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	78db      	ldrb	r3, [r3, #3]
 800144a:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	2bfe      	cmp	r3, #254	; 0xfe
 8001452:	d13a      	bne.n	80014ca <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001458:	2305      	movs	r3, #5
 800145a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	789a      	ldrb	r2, [r3, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3302      	adds	r3, #2
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	7992      	ldrb	r2, [r2, #6]
 8001474:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3303      	adds	r3, #3
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	79d2      	ldrb	r2, [r2, #7]
 800147e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3304      	adds	r3, #4
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	7a12      	ldrb	r2, [r2, #8]
 8001488:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	7a5a      	ldrb	r2, [r3, #9]
 800148e:	7a99      	ldrb	r1, [r3, #10]
 8001490:	0209      	lsls	r1, r1, #8
 8001492:	430a      	orrs	r2, r1
 8001494:	7adb      	ldrb	r3, [r3, #11]
 8001496:	041b      	lsls	r3, r3, #16
 8001498:	4313      	orrs	r3, r2
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3305      	adds	r3, #5
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1d98      	adds	r0, r3, #6
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f103 010c 	add.w	r1, r3, #12
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	461a      	mov	r2, r3
 80014b4:	f003 fe75 	bl	80051a2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80014b8:	7dbb      	ldrb	r3, [r7, #22]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	78d2      	ldrb	r2, [r2, #3]
 80014be:	4413      	add	r3, r2
 80014c0:	3301      	adds	r3, #1
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	e06c      	b.n	80015a4 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	330c      	adds	r3, #12
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fcd8 	bl	8000e88 <_mav_trim_payload>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80014dc:	2309      	movs	r3, #9
 80014de:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	789a      	ldrb	r2, [r3, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3302      	adds	r3, #2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	7912      	ldrb	r2, [r2, #4]
 80014f8:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3303      	adds	r3, #3
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	7952      	ldrb	r2, [r2, #5]
 8001502:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3304      	adds	r3, #4
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	7992      	ldrb	r2, [r2, #6]
 800150c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3305      	adds	r3, #5
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	79d2      	ldrb	r2, [r2, #7]
 8001516:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3306      	adds	r3, #6
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	7a12      	ldrb	r2, [r2, #8]
 8001520:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	7a5a      	ldrb	r2, [r3, #9]
 8001526:	7a99      	ldrb	r1, [r3, #10]
 8001528:	0209      	lsls	r1, r1, #8
 800152a:	430a      	orrs	r2, r1
 800152c:	7adb      	ldrb	r3, [r3, #11]
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	4313      	orrs	r3, r2
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3307      	adds	r3, #7
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	7a5a      	ldrb	r2, [r3, #9]
 8001540:	7a99      	ldrb	r1, [r3, #10]
 8001542:	0209      	lsls	r1, r1, #8
 8001544:	430a      	orrs	r2, r1
 8001546:	7adb      	ldrb	r3, [r3, #11]
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	4313      	orrs	r3, r2
 800154c:	121a      	asrs	r2, r3, #8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3308      	adds	r3, #8
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7a5a      	ldrb	r2, [r3, #9]
 800155a:	7a99      	ldrb	r1, [r3, #10]
 800155c:	0209      	lsls	r1, r1, #8
 800155e:	430a      	orrs	r2, r1
 8001560:	7adb      	ldrb	r3, [r3, #11]
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	4313      	orrs	r3, r2
 8001566:	141a      	asrs	r2, r3, #16
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3309      	adds	r3, #9
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f103 000a 	add.w	r0, r3, #10
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	330c      	adds	r3, #12
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	4619      	mov	r1, r3
 800157e:	f003 fe10 	bl	80051a2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001582:	7dba      	ldrb	r2, [r7, #22]
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	4413      	add	r3, r2
 8001588:	3301      	adds	r3, #1
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	791b      	ldrb	r3, [r3, #4]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <mavlink_msg_to_send_buffer+0x164>
 800159c:	230d      	movs	r3, #13
 800159e:	e000      	b.n	80015a2 <mavlink_msg_to_send_buffer+0x166>
 80015a0:	2300      	movs	r3, #0
 80015a2:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	3301      	adds	r3, #1
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1c98      	adds	r0, r3, #2
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80015d2:	7dfa      	ldrb	r2, [r7, #23]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f003 fde4 	bl	80051a2 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80015da:	7dbb      	ldrb	r3, [r7, #22]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3303      	adds	r3, #3
 80015f0:	b29b      	uxth	r3, r3
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001606:	f107 030e 	add.w	r3, r7, #14
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f897 	bl	800073e <crc_init>
	msg->checksum = crcTmp;
 8001610:	89fa      	ldrh	r2, [r7, #14]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	801a      	strh	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001632:	f107 020e 	add.w	r2, r7, #14
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f84e 	bl	80006dc <crc_accumulate>
	msg->checksum = checksum;
 8001640:	89fa      	ldrh	r2, [r7, #14]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	801a      	strh	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	23d6      	movs	r3, #214	; 0xd6
 800165e:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001660:	e025      	b.n	80016ae <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4413      	add	r3, r2
 8001668:	3301      	adds	r3, #1
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800166e:	491e      	ldr	r1, [pc, #120]	; (80016e8 <mavlink_get_msg_entry+0x98>)
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	d203      	bcs.n	800168c <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3b01      	subs	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
                continue;
 800168a:	e010      	b.n	80016ae <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 800168c:	4916      	ldr	r1, [pc, #88]	; (80016e8 <mavlink_get_msg_entry+0x98>)
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d902      	bls.n	80016a8 <mavlink_get_msg_entry+0x58>
                low = mid;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	617b      	str	r3, [r7, #20]
                continue;
 80016a6:	e002      	b.n	80016ae <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	617b      	str	r3, [r7, #20]
            break;
 80016ac:	e003      	b.n	80016b6 <mavlink_get_msg_entry+0x66>
        while (low < high) {
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3d5      	bcc.n	8001662 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80016b6:	490c      	ldr	r1, [pc, #48]	; (80016e8 <mavlink_get_msg_entry+0x98>)
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e006      	b.n	80016de <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <mavlink_get_msg_entry+0x98>)
 80016dc:	4413      	add	r3, r2
}
 80016de:	4618      	mov	r0, r3
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	080052f8 	.word	0x080052f8

080016ec <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	78db      	ldrb	r3, [r3, #3]
 800170a:	2b0f      	cmp	r3, #15
 800170c:	f200 826e 	bhi.w	8001bec <mavlink_frame_char_buffer+0x500>
 8001710:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <mavlink_frame_char_buffer+0x2c>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	08001759 	.word	0x08001759
 800171c:	08001759 	.word	0x08001759
 8001720:	080017b7 	.word	0x080017b7
 8001724:	0800181d 	.word	0x0800181d
 8001728:	08001855 	.word	0x08001855
 800172c:	0800186d 	.word	0x0800186d
 8001730:	08001885 	.word	0x08001885
 8001734:	0800189d 	.word	0x0800189d
 8001738:	080018b5 	.word	0x080018b5
 800173c:	0800190f 	.word	0x0800190f
 8001740:	0800195b 	.word	0x0800195b
 8001744:	080019b7 	.word	0x080019b7
 8001748:	080019ef 	.word	0x080019ef
 800174c:	08001a7b 	.word	0x08001a7b
 8001750:	08001a7b 	.word	0x08001a7b
 8001754:	08001b37 	.word	0x08001b37
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2bfd      	cmp	r3, #253	; 0xfd
 800175c:	d113      	bne.n	8001786 <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2202      	movs	r2, #2
 8001762:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	7b1b      	ldrb	r3, [r3, #12]
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff ff3b 	bl	80015fa <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001784:	e229      	b.n	8001bda <mavlink_frame_char_buffer+0x4ee>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2bfe      	cmp	r3, #254	; 0xfe
 800178a:	f040 8226 	bne.w	8001bda <mavlink_frame_char_buffer+0x4ee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2202      	movs	r2, #2
 8001792:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	7b1b      	ldrb	r3, [r3, #12]
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ff23 	bl	80015fa <mavlink_start_checksum>
		break;
 80017b4:	e211      	b.n	8001bda <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00f      	beq.n	80017de <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	f7ff fe27 	bl	800141e <_mav_parse_error>
			status->msg_received = 0;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2201      	movs	r2, #1
 80017da:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 80017dc:	e206      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
			rxmsg->len = c;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	79fa      	ldrb	r2, [r7, #7]
 80017e2:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2200      	movs	r2, #0
 80017e8:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4619      	mov	r1, r3
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff ff15 	bl	800161e <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	7b1b      	ldrb	r3, [r3, #12]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2205      	movs	r2, #5
 8001810:	70da      	strb	r2, [r3, #3]
		break;
 8001812:	e1eb      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2203      	movs	r2, #3
 8001818:	70da      	strb	r2, [r3, #3]
		break;
 800181a:	e1e7      	b.n	8001bec <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	791b      	ldrb	r3, [r3, #4]
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f7ff fdf5 	bl	800141e <_mav_parse_error>
			status->msg_received = 0;
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2201      	movs	r2, #1
 800183e:	70da      	strb	r2, [r3, #3]
			break;
 8001840:	e1d4      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
		}
		mavlink_update_checksum(rxmsg, c);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4619      	mov	r1, r3
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fee9 	bl	800161e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2204      	movs	r2, #4
 8001850:	70da      	strb	r2, [r3, #3]
		break;
 8001852:	e1cb      	b.n	8001bec <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	4619      	mov	r1, r3
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fedd 	bl	800161e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2205      	movs	r2, #5
 8001868:	70da      	strb	r2, [r3, #3]
		break;
 800186a:	e1bf      	b.n	8001bec <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4619      	mov	r1, r3
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff fed1 	bl	800161e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2206      	movs	r2, #6
 8001880:	70da      	strb	r2, [r3, #3]
		break;
 8001882:	e1b3      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4619      	mov	r1, r3
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fec5 	bl	800161e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2207      	movs	r2, #7
 8001898:	70da      	strb	r2, [r3, #3]
		break;
 800189a:	e1a7      	b.n	8001bec <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4619      	mov	r1, r3
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff feb9 	bl	800161e <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2208      	movs	r2, #8
 80018b0:	70da      	strb	r2, [r3, #3]
		break;
 80018b2:	e19b      	b.n	8001bec <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	b2d9      	uxtb	r1, r3
 80018be:	2000      	movs	r0, #0
 80018c0:	4301      	orrs	r1, r0
 80018c2:	7251      	strb	r1, [r2, #9]
 80018c4:	0a19      	lsrs	r1, r3, #8
 80018c6:	b2c9      	uxtb	r1, r1
 80018c8:	2000      	movs	r0, #0
 80018ca:	4301      	orrs	r1, r0
 80018cc:	7291      	strb	r1, [r2, #10]
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	430b      	orrs	r3, r1
 80018d6:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4619      	mov	r1, r3
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff fe9e 	bl	800161e <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	7b1b      	ldrb	r3, [r3, #12]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	78db      	ldrb	r3, [r3, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	220b      	movs	r2, #11
 80018fa:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 80018fc:	e176      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	220c      	movs	r2, #12
 8001902:	70da      	strb	r2, [r3, #3]
		break;
 8001904:	e172      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2209      	movs	r2, #9
 800190a:	70da      	strb	r2, [r3, #3]
		break;
 800190c:	e16e      	b.n	8001bec <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	7a5a      	ldrb	r2, [r3, #9]
 8001912:	7a99      	ldrb	r1, [r3, #10]
 8001914:	0209      	lsls	r1, r1, #8
 8001916:	430a      	orrs	r2, r1
 8001918:	7adb      	ldrb	r3, [r3, #11]
 800191a:	041b      	lsls	r3, r3, #16
 800191c:	4313      	orrs	r3, r2
 800191e:	461a      	mov	r2, r3
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	4313      	orrs	r3, r2
 8001926:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	b2d1      	uxtb	r1, r2
 800192e:	2000      	movs	r0, #0
 8001930:	4301      	orrs	r1, r0
 8001932:	7259      	strb	r1, [r3, #9]
 8001934:	0a11      	lsrs	r1, r2, #8
 8001936:	b2c9      	uxtb	r1, r1
 8001938:	2000      	movs	r0, #0
 800193a:	4301      	orrs	r1, r0
 800193c:	7299      	strb	r1, [r3, #10]
 800193e:	0c12      	lsrs	r2, r2, #16
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	2100      	movs	r1, #0
 8001944:	430a      	orrs	r2, r1
 8001946:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4619      	mov	r1, r3
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fe66 	bl	800161e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	220a      	movs	r2, #10
 8001956:	70da      	strb	r2, [r3, #3]
		break;
 8001958:	e148      	b.n	8001bec <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	7a5a      	ldrb	r2, [r3, #9]
 800195e:	7a99      	ldrb	r1, [r3, #10]
 8001960:	0209      	lsls	r1, r1, #8
 8001962:	430a      	orrs	r2, r1
 8001964:	7adb      	ldrb	r3, [r3, #11]
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4313      	orrs	r3, r2
 800196a:	461a      	mov	r2, r3
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	4313      	orrs	r3, r2
 8001972:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	b2d1      	uxtb	r1, r2
 800197a:	2000      	movs	r0, #0
 800197c:	4301      	orrs	r1, r0
 800197e:	7259      	strb	r1, [r3, #9]
 8001980:	0a11      	lsrs	r1, r2, #8
 8001982:	b2c9      	uxtb	r1, r1
 8001984:	2000      	movs	r0, #0
 8001986:	4301      	orrs	r1, r0
 8001988:	7299      	strb	r1, [r3, #10]
 800198a:	0c12      	lsrs	r2, r2, #16
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	2100      	movs	r1, #0
 8001990:	430a      	orrs	r2, r1
 8001992:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4619      	mov	r1, r3
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fe40 	bl	800161e <mavlink_update_checksum>
		if(rxmsg->len > 0){
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	220b      	movs	r2, #11
 80019aa:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80019ac:	e11e      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	220c      	movs	r2, #12
 80019b2:	70da      	strb	r2, [r3, #3]
		break;
 80019b4:	e11a      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f103 020c 	add.w	r2, r3, #12
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	1c59      	adds	r1, r3, #1
 80019c2:	b2c8      	uxtb	r0, r1
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	7108      	strb	r0, [r1, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4619      	mov	r1, r3
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff fe23 	bl	800161e <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	791a      	ldrb	r2, [r3, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 80fc 	bne.w	8001bde <mavlink_frame_char_buffer+0x4f2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	220c      	movs	r2, #12
 80019ea:	70da      	strb	r2, [r3, #3]
		}
		break;
 80019ec:	e0f7      	b.n	8001bde <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	7a5a      	ldrb	r2, [r3, #9]
 80019f2:	7a99      	ldrb	r1, [r3, #10]
 80019f4:	0209      	lsls	r1, r1, #8
 80019f6:	430a      	orrs	r2, r1
 80019f8:	7adb      	ldrb	r3, [r3, #11]
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	4313      	orrs	r3, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fe26 	bl	8001650 <mavlink_get_msg_entry>
 8001a04:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <mavlink_frame_char_buffer+0x326>
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	e000      	b.n	8001a14 <mavlink_frame_char_buffer+0x328>
 8001a12:	2300      	movs	r3, #0
 8001a14:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7ff fdff 	bl	800161e <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d003      	beq.n	8001a36 <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	220e      	movs	r2, #14
 8001a32:	70da      	strb	r2, [r3, #3]
 8001a34:	e002      	b.n	8001a3c <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	220d      	movs	r2, #13
 8001a3a:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80cb 	beq.w	8001be2 <mavlink_frame_char_buffer+0x4f6>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	791a      	ldrb	r2, [r3, #4]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	799b      	ldrb	r3, [r3, #6]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f080 80c4 	bcs.w	8001be2 <mavlink_frame_char_buffer+0x4f6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	7912      	ldrb	r2, [r2, #4]
 8001a62:	1898      	adds	r0, r3, r2
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	799b      	ldrb	r3, [r3, #6]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	f003 fba0 	bl	80051b8 <memset>
		}
		break;
 8001a78:	e0b3      	b.n	8001be2 <mavlink_frame_char_buffer+0x4f6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	2b0e      	cmp	r3, #14
 8001a80:	d008      	beq.n	8001a94 <mavlink_frame_char_buffer+0x3a8>
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d003      	beq.n	8001a9c <mavlink_frame_char_buffer+0x3b0>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	e002      	b.n	8001aa2 <mavlink_frame_char_buffer+0x3b6>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00e      	beq.n	8001ad4 <mavlink_frame_char_buffer+0x3e8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	220f      	movs	r2, #15
 8001aba:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	220d      	movs	r2, #13
 8001ac0:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	f000 808d 	beq.w	8001be6 <mavlink_frame_char_buffer+0x4fa>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001ad2:	e088      	b.n	8001be6 <mavlink_frame_char_buffer+0x4fa>
			if (status->signing &&
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01f      	beq.n	8001b1c <mavlink_frame_char_buffer+0x430>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d013      	beq.n	8001b0e <mavlink_frame_char_buffer+0x422>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	7a59      	ldrb	r1, [r3, #9]
 8001af0:	7a98      	ldrb	r0, [r3, #10]
 8001af2:	0200      	lsls	r0, r0, #8
 8001af4:	4301      	orrs	r1, r0
 8001af6:	7adb      	ldrb	r3, [r3, #11]
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	430b      	orrs	r3, r1
 8001afc:	4619      	mov	r1, r3
 8001afe:	68b8      	ldr	r0, [r7, #8]
 8001b00:	4790      	blx	r2
 8001b02:	4603      	mov	r3, r0
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <mavlink_frame_char_buffer+0x430>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d002      	beq.n	8001b1c <mavlink_frame_char_buffer+0x430>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d05e      	beq.n	8001be6 <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001b28:	f240 1223 	movw	r2, #291	; 0x123
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	6838      	ldr	r0, [r7, #0]
 8001b30:	f003 fb37 	bl	80051a2 <memcpy>
		break;
 8001b34:	e057      	b.n	8001be6 <mavlink_frame_char_buffer+0x4fa>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	7b5b      	ldrb	r3, [r3, #13]
 8001b3a:	f1c3 030d 	rsb	r3, r3, #13
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	7b5b      	ldrb	r3, [r3, #13]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	7b5b      	ldrb	r3, [r3, #13]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d146      	bne.n	8001bea <mavlink_frame_char_buffer+0x4fe>
			// we have the whole signature, check it is OK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	6918      	ldr	r0, [r3, #16]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f9a8 	bl	8000ebc <mavlink_signature_check>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	77fb      	strb	r3, [r7, #31]
			if (!sig_ok &&
 8001b70:	7ffb      	ldrb	r3, [r7, #31]
 8001b72:	f083 0301 	eor.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <mavlink_frame_char_buffer+0x4c0>
			   	(status->signing->accept_unsigned_callback &&
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <mavlink_frame_char_buffer+0x4c0>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	7a59      	ldrb	r1, [r3, #9]
 8001b90:	7a98      	ldrb	r0, [r3, #10]
 8001b92:	0200      	lsls	r0, r0, #8
 8001b94:	4301      	orrs	r1, r0
 8001b96:	7adb      	ldrb	r3, [r3, #11]
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	4790      	blx	r2
 8001ba2:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <mavlink_frame_char_buffer+0x4c0>
				// accepted via application level override
				sig_ok = true;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <mavlink_frame_char_buffer+0x4ce>
				status->msg_received = MAVLINK_FRAMING_OK;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e002      	b.n	8001bc0 <mavlink_frame_char_buffer+0x4d4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00e      	beq.n	8001bea <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001bcc:	f240 1223 	movw	r2, #291	; 0x123
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f003 fae5 	bl	80051a2 <memcpy>
			}
		}
		break;
 8001bd8:	e007      	b.n	8001bea <mavlink_frame_char_buffer+0x4fe>
		break;
 8001bda:	bf00      	nop
 8001bdc:	e006      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
		break;
 8001bde:	bf00      	nop
 8001be0:	e004      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
		break;
 8001be2:	bf00      	nop
 8001be4:	e002      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
		break;
 8001be6:	bf00      	nop
 8001be8:	e000      	b.n	8001bec <mavlink_frame_char_buffer+0x500>
		break;
 8001bea:	bf00      	nop
	}

	bufferIndex++;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d110      	bne.n	8001c1c <mavlink_frame_char_buffer+0x530>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	799a      	ldrb	r2, [r3, #6]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	891b      	ldrh	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <mavlink_frame_char_buffer+0x524>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	891b      	ldrh	r3, [r3, #8]
 8001c14:	3301      	adds	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <mavlink_frame_char_buffer+0x53e>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	78da      	ldrb	r2, [r3, #3]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01a      	beq.n	8001c66 <mavlink_frame_char_buffer+0x57a>
           r_mavlink_status->parse_state = status->parse_state;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	78da      	ldrb	r2, [r3, #3]
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	791a      	ldrb	r2, [r3, #4]
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	795b      	ldrb	r3, [r3, #5]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	891a      	ldrh	r2, [r3, #8]
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	789b      	ldrb	r3, [r3, #2]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	7b1a      	ldrb	r2, [r3, #12]
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d110      	bne.n	8001c96 <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00d      	beq.n	8001c96 <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	781b      	ldrb	r3, [r3, #0]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop

08001ca4 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f869 	bl	8000d90 <mavlink_get_channel_buffer>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f850 	bl	8000d68 <mavlink_get_channel_status>
 8001cc8:	4601      	mov	r1, r0
 8001cca:	7bba      	ldrb	r2, [r7, #14]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff fd0a 	bl	80016ec <mavlink_frame_char_buffer>
 8001cd8:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}

08001ce2 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b088      	sub	sp, #32
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	4603      	mov	r3, r0
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001cf4:	7bb9      	ldrb	r1, [r7, #14]
 8001cf6:	7bf8      	ldrb	r0, [r7, #15]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f7ff ffd2 	bl	8001ca4 <mavlink_frame_char>
 8001d00:	4603      	mov	r3, r0
 8001d02:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d002      	beq.n	8001d10 <mavlink_parse_char+0x2e>
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d120      	bne.n	8001d52 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f83c 	bl	8000d90 <mavlink_get_channel_buffer>
 8001d18:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f823 	bl	8000d68 <mavlink_get_channel_status>
 8001d22:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001d24:	6978      	ldr	r0, [r7, #20]
 8001d26:	f7ff fb7a 	bl	800141e <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2201      	movs	r2, #1
 8001d34:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001d36:	7bbb      	ldrb	r3, [r7, #14]
 8001d38:	2bfd      	cmp	r3, #253	; 0xfd
 8001d3a:	d108      	bne.n	8001d4e <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2200      	movs	r2, #0
 8001d46:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001d48:	69b8      	ldr	r0, [r7, #24]
 8001d4a:	f7ff fc56 	bl	80015fa <mavlink_start_checksum>
	    }
	    return 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	2100      	movs	r1, #0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f003 fa20 	bl	80051b8 <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 8001d78:	e004      	b.n	8001d84 <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f003 fa0f 	bl	80051a2 <memcpy>
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <mavlink_msg_raw_imu_pack>:
 * @param temperature [cdegC] Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag, uint8_t id, int16_t temperature)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b08d      	sub	sp, #52	; 0x34
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4603      	mov	r3, r0
 8001d94:	603a      	str	r2, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	71bb      	strb	r3, [r7, #6]
    _mav_put_int16_t(buf, 27, temperature);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RAW_IMU_LEN);
#else
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
 8001d9c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001da0:	e9c7 3402 	strd	r3, r4, [r7, #8]
    packet.xacc = xacc;
 8001da4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001da8:	823b      	strh	r3, [r7, #16]
    packet.yacc = yacc;
 8001daa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001dae:	827b      	strh	r3, [r7, #18]
    packet.zacc = zacc;
 8001db0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001db4:	82bb      	strh	r3, [r7, #20]
    packet.xgyro = xgyro;
 8001db6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001dba:	82fb      	strh	r3, [r7, #22]
    packet.ygyro = ygyro;
 8001dbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dc0:	833b      	strh	r3, [r7, #24]
    packet.zgyro = zgyro;
 8001dc2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001dc6:	837b      	strh	r3, [r7, #26]
    packet.xmag = xmag;
 8001dc8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001dcc:	83bb      	strh	r3, [r7, #28]
    packet.ymag = ymag;
 8001dce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001dd2:	83fb      	strh	r3, [r7, #30]
    packet.zmag = zmag;
 8001dd4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001dd8:	843b      	strh	r3, [r7, #32]
    packet.id = id;
 8001dda:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001dde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    packet.temperature = temperature;
 8001de2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001de6:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	f107 0108 	add.w	r1, r7, #8
 8001df2:	221d      	movs	r2, #29
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 f9d4 	bl	80051a2 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_RAW_IMU;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f042 021b 	orr.w	r2, r2, #27
 8001e02:	725a      	strb	r2, [r3, #9]
 8001e04:	2200      	movs	r2, #0
 8001e06:	729a      	strb	r2, [r3, #10]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RAW_IMU_MIN_LEN, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
 8001e0c:	79ba      	ldrb	r2, [r7, #6]
 8001e0e:	79f9      	ldrb	r1, [r7, #7]
 8001e10:	2390      	movs	r3, #144	; 0x90
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	231d      	movs	r3, #29
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	231a      	movs	r3, #26
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f7ff fae1 	bl	80013e2 <mavlink_finalize_message>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	372c      	adds	r7, #44	; 0x2c
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}

08001e2a <mavlink_msg_raw_imu_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param raw_imu C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 8001e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2c:	b099      	sub	sp, #100	; 0x64
 8001e2e:	af0e      	add	r7, sp, #56	; 0x38
 8001e30:	623a      	str	r2, [r7, #32]
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	4603      	mov	r3, r0
 8001e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag, raw_imu->id, raw_imu->temperature);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e4c:	b218      	sxth	r0, r3
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e54:	b21c      	sxth	r4, r3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e5c:	b21d      	sxth	r5, r3
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e64:	b21e      	sxth	r6, r3
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e76:	fa0f fc83 	sxth.w	ip, r3
 8001e7a:	4663      	mov	r3, ip
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e84:	fa0f fc83 	sxth.w	ip, r3
 8001e88:	4663      	mov	r3, ip
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e92:	fa0f fc83 	sxth.w	ip, r3
 8001e96:	4663      	mov	r3, ip
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001ea0:	fa0f fc83 	sxth.w	ip, r3
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8001eae:	4663      	mov	r3, ip
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f9b3 301b 	ldrsh.w	r3, [r3, #27]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	f897 e026 	ldrb.w	lr, [r7, #38]	; 0x26
 8001ebe:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 8001ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	930a      	str	r3, [sp, #40]	; 0x28
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	9309      	str	r3, [sp, #36]	; 0x24
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	9308      	str	r3, [sp, #32]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9307      	str	r3, [sp, #28]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	9306      	str	r3, [sp, #24]
 8001edc:	9605      	str	r6, [sp, #20]
 8001ede:	9504      	str	r5, [sp, #16]
 8001ee0:	9403      	str	r4, [sp, #12]
 8001ee2:	9002      	str	r0, [sp, #8]
 8001ee4:	e9cd 1200 	strd	r1, r2, [sp]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	4671      	mov	r1, lr
 8001eec:	4660      	mov	r0, ip
 8001eee:	f7ff ff4d 	bl	8001d8c <mavlink_msg_raw_imu_pack>
 8001ef2:	4603      	mov	r3, r0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	372c      	adds	r7, #44	; 0x2c
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001efc <mavlink_msg_rc_channels_scaled_decode>:
 *
 * @param msg The message to decode
 * @param rc_channels_scaled C-struct to decode the message contents into
 */
static inline void mavlink_msg_rc_channels_scaled_decode(const mavlink_message_t* msg, mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
    rc_channels_scaled->chan7_scaled = mavlink_msg_rc_channels_scaled_get_chan7_scaled(msg);
    rc_channels_scaled->chan8_scaled = mavlink_msg_rc_channels_scaled_get_chan8_scaled(msg);
    rc_channels_scaled->port = mavlink_msg_rc_channels_scaled_get_port(msg);
    rc_channels_scaled->rssi = mavlink_msg_rc_channels_scaled_get_rssi(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN? msg->len : MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	78db      	ldrb	r3, [r3, #3]
 8001f0a:	2b16      	cmp	r3, #22
 8001f0c:	bf28      	it	cs
 8001f0e:	2316      	movcs	r3, #22
 8001f10:	73fb      	strb	r3, [r7, #15]
        memset(rc_channels_scaled, 0, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
 8001f12:	2216      	movs	r2, #22
 8001f14:	2100      	movs	r1, #0
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	f003 f94e 	bl	80051b8 <memset>
    memcpy(rc_channels_scaled, _MAV_PAYLOAD(msg), len);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	330c      	adds	r3, #12
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	4619      	mov	r1, r3
 8001f24:	6838      	ldr	r0, [r7, #0]
 8001f26:	f003 f93c 	bl	80051a2 <memcpy>
#endif
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <mavlink_msg_named_value_int_pack>:
 * @param value  Signed integer value
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, int32_t value)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b08c      	sub	sp, #48	; 0x30
 8001f36:	af02      	add	r7, sp, #8
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	460b      	mov	r3, r1
 8001f42:	73bb      	strb	r3, [r7, #14]
    _mav_put_int32_t(buf, 4, value);
    _mav_put_char_array(buf, 8, name, 10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#else
    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	617b      	str	r3, [r7, #20]
    packet.value = value;
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	61bb      	str	r3, [r7, #24]
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	3308      	adds	r3, #8
 8001f52:	220a      	movs	r2, #10
 8001f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff00 	bl	8001d5c <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	330c      	adds	r3, #12
 8001f60:	f107 0114 	add.w	r1, r7, #20
 8001f64:	2212      	movs	r2, #18
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 f91b 	bl	80051a2 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_NAMED_VALUE_INT;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f062 0203 	orn	r2, r2, #3
 8001f74:	725a      	strb	r2, [r3, #9]
 8001f76:	2200      	movs	r2, #0
 8001f78:	729a      	strb	r2, [r3, #10]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_NAMED_VALUE_INT_MIN_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
 8001f7e:	7bba      	ldrb	r2, [r7, #14]
 8001f80:	7bf9      	ldrb	r1, [r7, #15]
 8001f82:	232c      	movs	r3, #44	; 0x2c
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	2312      	movs	r3, #18
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2312      	movs	r3, #18
 8001f8c:	68b8      	ldr	r0, [r7, #8]
 8001f8e:	f7ff fa28 	bl	80013e2 <mavlink_finalize_message>
 8001f92:	4603      	mov	r3, r0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <mavlink_msg_named_value_int_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param named_value_int C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60ba      	str	r2, [r7, #8]
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	460b      	mov	r3, r1
 8001fac:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681c      	ldr	r4, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6852      	ldr	r2, [r2, #4]
 8001fba:	7bb9      	ldrb	r1, [r7, #14]
 8001fbc:	7bf8      	ldrb	r0, [r7, #15]
 8001fbe:	9201      	str	r2, [sp, #4]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	f7ff ffb4 	bl	8001f32 <mavlink_msg_named_value_int_pack>
 8001fca:	4603      	mov	r3, r0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <MAV_Parse_Data>:
uint8_t test[5] = {0xFE, 0xFE, 0xFE, 0xFE, 0xFE};
char rx_buffer_mav[279];
uint8_t byte_arr[279];
uint8_t motor_armed = 0;

void MAV_Parse_Data(){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	Radio_Recieve_Raw(&byte_arr, sizeof(byte_arr));
 8001fda:	f240 1117 	movw	r1, #279	; 0x117
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <MAV_Parse_Data+0x98>)
 8001fe0:	f000 fd52 	bl	8002a88 <Radio_Recieve_Raw>
	//Radio_Transmit_Raw(&byte_arr, sizeof(byte_arr));
	//Radio_Transmit_Raw(&"msgid", 4);

	for(int i=0;i<279;i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	e037      	b.n	800205a <MAV_Parse_Data+0x86>
	{
		 if (mavlink_parse_char(chan, byte_arr[i], &msg, &status))//if any mavlink message is sent
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <MAV_Parse_Data+0x9c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b2d8      	uxtb	r0, r3
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	; (800206c <MAV_Parse_Data+0x98>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	7819      	ldrb	r1, [r3, #0]
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <MAV_Parse_Data+0xa0>)
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <MAV_Parse_Data+0xa4>)
 8001ffc:	f7ff fe71 	bl	8001ce2 <mavlink_parse_char>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d026      	beq.n	8002054 <MAV_Parse_Data+0x80>
			 //Radio_Transmit_Raw(&test, 4);
			 //MAV_Send_Debug_Statement_Default();
			 //MAV_Send_Debug_Statement("msgid", msg.msgid); //WARNING: UNCOMMENTING THIS MAY CAUSE SOME OF THE OTHER MESSAGE TO NOT SEND
			 //printf("Received message with ID %d, sequence: %d from component %d of system %d\n", msg.msgid, msg.seq, msg.compid, msg.sysid);
			 // ... DECODE THE MESSAGE PAYLOAD HERE ...
			 switch (msg.msgid)
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <MAV_Parse_Data+0xa4>)
 8002008:	7a5a      	ldrb	r2, [r3, #9]
 800200a:	7a99      	ldrb	r1, [r3, #10]
 800200c:	0209      	lsls	r1, r1, #8
 800200e:	430a      	orrs	r2, r1
 8002010:	7adb      	ldrb	r3, [r3, #11]
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	4313      	orrs	r3, r2
 8002016:	2b22      	cmp	r3, #34	; 0x22
 8002018:	d000      	beq.n	800201c <MAV_Parse_Data+0x48>
			 		Motor_Set_Speed_All(rc_channels_scaled_msg.chan1_scaled, rc_channels_scaled_msg.chan2_scaled, rc_channels_scaled_msg.chan3_scaled, rc_channels_scaled_msg.chan4_scaled);
			 		break;
			 		*/
			 	 }
			 }//end switch
			 break;
 800201a:	e022      	b.n	8002062 <MAV_Parse_Data+0x8e>
			 		mavlink_msg_rc_channels_scaled_decode(&msg, &rc_channels_scaled_msg);
 800201c:	4917      	ldr	r1, [pc, #92]	; (800207c <MAV_Parse_Data+0xa8>)
 800201e:	4816      	ldr	r0, [pc, #88]	; (8002078 <MAV_Parse_Data+0xa4>)
 8002020:	f7ff ff6c 	bl	8001efc <mavlink_msg_rc_channels_scaled_decode>
			 		if(motor_armed == 0){
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MAV_Parse_Data+0xac>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <MAV_Parse_Data+0x62>
			 			Motor_Arm();
 800202c:	f000 f906 	bl	800223c <Motor_Arm>
			 			motor_armed = 1;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MAV_Parse_Data+0xac>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
			 		Control_Set_Target(rc_channels_scaled_msg.chan1_scaled,rc_channels_scaled_msg.chan2_scaled,rc_channels_scaled_msg.chan3_scaled, rc_channels_scaled_msg.chan4_scaled);//channel values are int16
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MAV_Parse_Data+0xa8>)
 8002038:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MAV_Parse_Data+0xa8>)
 800203e:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MAV_Parse_Data+0xa8>)
 8002044:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MAV_Parse_Data+0xa8>)
 800204a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800204e:	f7fe f87d 	bl	800014c <Control_Set_Target>
			 break;
 8002052:	e006      	b.n	8002062 <MAV_Parse_Data+0x8e>
	for(int i=0;i<279;i++)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8002060:	ddc3      	ble.n	8001fea <MAV_Parse_Data+0x16>
	     }//end if
	}//end for
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200008b8 	.word	0x200008b8
 8002070:	2000003c 	.word	0x2000003c
 8002074:	200008a0 	.word	0x200008a0
 8002078:	20000644 	.word	0x20000644
 800207c:	20000880 	.word	0x20000880
 8002080:	20000040 	.word	0x20000040

08002084 <MAV_Send_Raw_Imu>:
	//Radio_Transmit_Raw(&test, 1);
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
}
void MAV_Send_Raw_Imu()
{//sends IMU data through radio to ground station
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	b08d      	sub	sp, #52	; 0x34
 8002088:	af00      	add	r7, sp, #0
 800208a:	466b      	mov	r3, sp
 800208c:	461e      	mov	r6, r3
	//Radio_Transmit_Raw(&test2, 1);
	//HAL_Delay(500);
	//Radio_Transmit_Raw(&test, 1);
	//create buffer of proper length
	//int PACKET_STATIC_SIZE = 10 + 3 + payload_len + 2; //mavlink[FTP header + payload]mavlink
	int PACKET_STATIC_SIZE = 10 + 29 + 2 ; //mavlink[imu data ]mavlink
 800208e:	2329      	movs	r3, #41	; 0x29
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t buffer[PACKET_STATIC_SIZE];
 8002092:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002094:	1e6b      	subs	r3, r5, #1
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
 8002098:	462b      	mov	r3, r5
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	f04f 0400 	mov.w	r4, #0
 80020a8:	00d4      	lsls	r4, r2, #3
 80020aa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020ae:	00cb      	lsls	r3, r1, #3
 80020b0:	462b      	mov	r3, r5
 80020b2:	4619      	mov	r1, r3
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	f04f 0400 	mov.w	r4, #0
 80020c0:	00d4      	lsls	r4, r2, #3
 80020c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020c6:	00cb      	lsls	r3, r1, #3
 80020c8:	462b      	mov	r3, r5
 80020ca:	3307      	adds	r3, #7
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	ebad 0d03 	sub.w	sp, sp, r3
 80020d4:	466b      	mov	r3, sp
 80020d6:	3300      	adds	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
	//test = 0x22;
	//Radio_Transmit_Raw(&test, 1);
	//create struct and fill in data
	mavlink_raw_imu_t msgStruct;
	msgStruct.time_usec = (uint64_t) 0x3333333333333333;
 80020da:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 80020e4:	60bb      	str	r3, [r7, #8]
	//test = 0x33;
	//Radio_Transmit_Raw(&test, 1);
	//msgStruct.yacc  = mpu_acc[MPU_AXIS_Y];
	//msgStruct.zacc  = mpu_acc[MPU_AXIS_Z];
	//HAL_Delay(500);
	msgStruct.xacc  = (int16_t)mpu_acc[MPU_AXIS_X];
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <MAV_Send_Raw_Imu+0xf0>)
 80020e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ec:	81bb      	strh	r3, [r7, #12]
	msgStruct.yacc  = (int16_t)mpu_acc[MPU_AXIS_Y];
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <MAV_Send_Raw_Imu+0xf0>)
 80020f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020f4:	81fb      	strh	r3, [r7, #14]
	msgStruct.zacc  = (int16_t)mpu_acc[MPU_AXIS_Z];
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MAV_Send_Raw_Imu+0xf0>)
 80020f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020fc:	823b      	strh	r3, [r7, #16]
	msgStruct.xgyro = (int16_t)mpu_gyro[MPU_AXIS_X];
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <MAV_Send_Raw_Imu+0xf4>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b21b      	sxth	r3, r3
 8002104:	827b      	strh	r3, [r7, #18]
	msgStruct.ygyro = (int16_t)mpu_gyro[MPU_AXIS_Y];
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MAV_Send_Raw_Imu+0xf4>)
 8002108:	885b      	ldrh	r3, [r3, #2]
 800210a:	b21b      	sxth	r3, r3
 800210c:	82bb      	strh	r3, [r7, #20]
	msgStruct.zgyro = (int16_t)mpu_gyro[MPU_AXIS_Z];
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <MAV_Send_Raw_Imu+0xf4>)
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	b21b      	sxth	r3, r3
 8002114:	82fb      	strh	r3, [r7, #22]
	msgStruct.xmag  = (int16_t)control_output[MPU_AXIS_X];//sends control output
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MAV_Send_Raw_Imu+0xf8>)
 8002118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211c:	833b      	strh	r3, [r7, #24]
	msgStruct.ymag  = (int16_t)control_output[MPU_AXIS_Y];//sends control output
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <MAV_Send_Raw_Imu+0xf8>)
 8002120:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002124:	837b      	strh	r3, [r7, #26]
	msgStruct.zmag  = (int16_t)0x1111;
 8002126:	f241 1311 	movw	r3, #4369	; 0x1111
 800212a:	83bb      	strh	r3, [r7, #28]
	msgStruct.id    = (uint8_t)0x11;
 800212c:	2311      	movs	r3, #17
 800212e:	77bb      	strb	r3, [r7, #30]
	msgStruct.temperature = (int16_t)0x1111;
 8002130:	2300      	movs	r3, #0
 8002132:	f043 0311 	orr.w	r3, r3, #17
 8002136:	77fb      	strb	r3, [r7, #31]
 8002138:	2300      	movs	r3, #0
 800213a:	f043 0311 	orr.w	r3, r3, #17
 800213e:	f887 3020 	strb.w	r3, [r7, #32]
	//test = 0x44;
	//Radio_Transmit_Raw(&test, 1);
	//memcpy(msgStruct.payload,payload_new, sizeof(payload_new));

	//encode and serialize
	mavlink_msg_raw_imu_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MAV_Send_Raw_Imu+0xfc>)
 8002144:	7818      	ldrb	r0, [r3, #0]
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MAV_Send_Raw_Imu+0x100>)
 8002148:	7819      	ldrb	r1, [r3, #0]
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <MAV_Send_Raw_Imu+0x104>)
 800214e:	f7ff fe6c 	bl	8001e2a <mavlink_msg_raw_imu_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <MAV_Send_Raw_Imu+0x104>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f970 	bl	800143c <mavlink_msg_to_send_buffer>
	//test = 0x55;
	//Radio_Transmit_Raw(&test, 1);
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	b2aa      	uxth	r2, r5
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fc7c 	bl	8002a60 <Radio_Transmit_Raw>
 8002168:	46b5      	mov	sp, r6
}
 800216a:	bf00      	nop
 800216c:	3734      	adds	r7, #52	; 0x34
 800216e:	46bd      	mov	sp, r7
 8002170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002172:	bf00      	nop
 8002174:	20000530 	.word	0x20000530
 8002178:	20000538 	.word	0x20000538
 800217c:	20000540 	.word	0x20000540
 8002180:	20000004 	.word	0x20000004
 8002184:	20000005 	.word	0x20000005
 8002188:	20000644 	.word	0x20000644

0800218c <MAV_Send_Msg_Named_Value_Int>:

void MAV_Send_Msg_Named_Value_Int(char message[], uint32_t value)
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218e:	b08b      	sub	sp, #44	; 0x2c
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	466b      	mov	r3, sp
 8002198:	461e      	mov	r6, r3
	//create buffer of static proper length (static for this mavlink message)
	int PACKET_STATIC_SIZE = 30; //used to determine buffer size, and reduce bad 00's being sent
 800219a:	231e      	movs	r3, #30
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
	char buffer[PACKET_STATIC_SIZE];
 800219e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80021a0:	1e6b      	subs	r3, r5, #1
 80021a2:	623b      	str	r3, [r7, #32]
 80021a4:	462b      	mov	r3, r5
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	f04f 0400 	mov.w	r4, #0
 80021b4:	00d4      	lsls	r4, r2, #3
 80021b6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021ba:	00cb      	lsls	r3, r1, #3
 80021bc:	462b      	mov	r3, r5
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	f04f 0400 	mov.w	r4, #0
 80021cc:	00d4      	lsls	r4, r2, #3
 80021ce:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021d2:	00cb      	lsls	r3, r1, #3
 80021d4:	462b      	mov	r3, r5
 80021d6:	3307      	adds	r3, #7
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	ebad 0d03 	sub.w	sp, sp, r3
 80021e0:	466b      	mov	r3, sp
 80021e2:	3300      	adds	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]

	//create struct and fill in data
	mavlink_named_value_int_t msgStruct;
	strcpy(msgStruct.name,message);
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	3308      	adds	r3, #8
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 ffea 	bl	80051c8 <strcpy>
	msgStruct.time_boot_ms = 4;
 80021f4:	2304      	movs	r3, #4
 80021f6:	60bb      	str	r3, [r7, #8]
	msgStruct.value = value;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
	//encode and serialize
	mavlink_msg_named_value_int_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MAV_Send_Msg_Named_Value_Int+0xa4>)
 80021fe:	7818      	ldrb	r0, [r3, #0]
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MAV_Send_Msg_Named_Value_Int+0xa8>)
 8002202:	7819      	ldrb	r1, [r3, #0]
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <MAV_Send_Msg_Named_Value_Int+0xac>)
 800220a:	f7ff fec7 	bl	8001f9c <mavlink_msg_named_value_int_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4909      	ldr	r1, [pc, #36]	; (8002238 <MAV_Send_Msg_Named_Value_Int+0xac>)
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f912 	bl	800143c <mavlink_msg_to_send_buffer>
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	b2aa      	uxth	r2, r5
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fc1e 	bl	8002a60 <Radio_Transmit_Raw>
 8002224:	46b5      	mov	sp, r6
}
 8002226:	bf00      	nop
 8002228:	372c      	adds	r7, #44	; 0x2c
 800222a:	46bd      	mov	sp, r7
 800222c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800222e:	bf00      	nop
 8002230:	20000004 	.word	0x20000004
 8002234:	20000005 	.word	0x20000005
 8002238:	20000644 	.word	0x20000644

0800223c <Motor_Arm>:
uint8_t timChannels[] = {TIM_CHANNEL_1,TIM_CHANNEL_2,TIM_CHANNEL_3,TIM_CHANNEL_4};
uint16_t motor_maxPower = 1200;//limits max throttle of drone
int16_t motor_speeds[4];//holds information of most recently configured motor speeds

void Motor_Arm()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	//ARM PWM Signals
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002240:	2100      	movs	r1, #0
 8002242:	4850      	ldr	r0, [pc, #320]	; (8002384 <Motor_Arm+0x148>)
 8002244:	f002 f980 	bl	8004548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002248:	2104      	movs	r1, #4
 800224a:	484e      	ldr	r0, [pc, #312]	; (8002384 <Motor_Arm+0x148>)
 800224c:	f002 f97c 	bl	8004548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002250:	2108      	movs	r1, #8
 8002252:	484c      	ldr	r0, [pc, #304]	; (8002384 <Motor_Arm+0x148>)
 8002254:	f002 f978 	bl	8004548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002258:	210c      	movs	r1, #12
 800225a:	484a      	ldr	r0, [pc, #296]	; (8002384 <Motor_Arm+0x148>)
 800225c:	f002 f974 	bl	8004548 <HAL_TIM_PWM_Start>
	HAL_Delay(20);
 8002260:	2014      	movs	r0, #20
 8002262:	f000 fe1d 	bl	8002ea0 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[0], 700);
 8002266:	4b48      	ldr	r3, [pc, #288]	; (8002388 <Motor_Arm+0x14c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <Motor_Arm+0x3e>
 800226e:	4b45      	ldr	r3, [pc, #276]	; (8002384 <Motor_Arm+0x148>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002276:	635a      	str	r2, [r3, #52]	; 0x34
 8002278:	e018      	b.n	80022ac <Motor_Arm+0x70>
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <Motor_Arm+0x14c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d105      	bne.n	800228e <Motor_Arm+0x52>
 8002282:	4b40      	ldr	r3, [pc, #256]	; (8002384 <Motor_Arm+0x148>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
 800228c:	e00e      	b.n	80022ac <Motor_Arm+0x70>
 800228e:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <Motor_Arm+0x14c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d105      	bne.n	80022a2 <Motor_Arm+0x66>
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <Motor_Arm+0x148>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800229e:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a0:	e004      	b.n	80022ac <Motor_Arm+0x70>
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <Motor_Arm+0x148>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[1], 700);
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <Motor_Arm+0x14c>)
 80022ae:	785b      	ldrb	r3, [r3, #1]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <Motor_Arm+0x84>
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <Motor_Arm+0x148>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
 80022be:	e018      	b.n	80022f2 <Motor_Arm+0xb6>
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <Motor_Arm+0x14c>)
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d105      	bne.n	80022d4 <Motor_Arm+0x98>
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <Motor_Arm+0x148>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
 80022d2:	e00e      	b.n	80022f2 <Motor_Arm+0xb6>
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <Motor_Arm+0x14c>)
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d105      	bne.n	80022e8 <Motor_Arm+0xac>
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <Motor_Arm+0x148>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80022e6:	e004      	b.n	80022f2 <Motor_Arm+0xb6>
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <Motor_Arm+0x148>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[2], 700);
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <Motor_Arm+0x14c>)
 80022f4:	789b      	ldrb	r3, [r3, #2]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <Motor_Arm+0xca>
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <Motor_Arm+0x148>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002302:	635a      	str	r2, [r3, #52]	; 0x34
 8002304:	e018      	b.n	8002338 <Motor_Arm+0xfc>
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <Motor_Arm+0x14c>)
 8002308:	789b      	ldrb	r3, [r3, #2]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d105      	bne.n	800231a <Motor_Arm+0xde>
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <Motor_Arm+0x148>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002316:	639a      	str	r2, [r3, #56]	; 0x38
 8002318:	e00e      	b.n	8002338 <Motor_Arm+0xfc>
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <Motor_Arm+0x14c>)
 800231c:	789b      	ldrb	r3, [r3, #2]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d105      	bne.n	800232e <Motor_Arm+0xf2>
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <Motor_Arm+0x148>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800232a:	63da      	str	r2, [r3, #60]	; 0x3c
 800232c:	e004      	b.n	8002338 <Motor_Arm+0xfc>
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <Motor_Arm+0x148>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[3], 700);
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <Motor_Arm+0x14c>)
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <Motor_Arm+0x110>
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <Motor_Arm+0x148>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
	//uint16_t pulse_width = 7;
}
 800234a:	e018      	b.n	800237e <Motor_Arm+0x142>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[3], 700);
 800234c:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <Motor_Arm+0x14c>)
 800234e:	78db      	ldrb	r3, [r3, #3]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d105      	bne.n	8002360 <Motor_Arm+0x124>
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <Motor_Arm+0x148>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800235e:	e00e      	b.n	800237e <Motor_Arm+0x142>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[3], 700);
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <Motor_Arm+0x14c>)
 8002362:	78db      	ldrb	r3, [r3, #3]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d105      	bne.n	8002374 <Motor_Arm+0x138>
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <Motor_Arm+0x148>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002372:	e004      	b.n	800237e <Motor_Arm+0x142>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[3], 700);
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <Motor_Arm+0x148>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200005c4 	.word	0x200005c4
 8002388:	20000008 	.word	0x20000008

0800238c <Motor_Set_Speed_Single>:

void Motor_Set_Speed_Single(uint8_t MotorNum, int16_t speed_scaled)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	460a      	mov	r2, r1
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	4613      	mov	r3, r2
 800239a:	80bb      	strh	r3, [r7, #4]
	//input: (0 to 1000), this gets converted to between 800 and 1600 (see clock speed calcs)
	int16_t speed_converted = 8*(speed_scaled/10) + 800;
 800239c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <Motor_Set_Speed_Single+0xa0>)
 80023a2:	fb82 1203 	smull	r1, r2, r2, r3
 80023a6:	1092      	asrs	r2, r2, #2
 80023a8:	17db      	asrs	r3, r3, #31
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	3364      	adds	r3, #100	; 0x64
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	81fb      	strh	r3, [r7, #14]
	if(speed_converted > motor_maxPower){speed_converted = motor_maxPower;}//govenor (safety feature)
 80023b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <Motor_Set_Speed_Single+0xa4>)
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	4293      	cmp	r3, r2
 80023c2:	dd02      	ble.n	80023ca <Motor_Set_Speed_Single+0x3e>
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <Motor_Set_Speed_Single+0xa4>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	81fb      	strh	r3, [r7, #14]
	motor_speeds[MotorNum] = speed_converted;
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4919      	ldr	r1, [pc, #100]	; (8002434 <Motor_Set_Speed_Single+0xa8>)
 80023ce:	89fa      	ldrh	r2, [r7, #14]
 80023d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <Motor_Set_Speed_Single+0xac>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <Motor_Set_Speed_Single+0x5e>
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <Motor_Set_Speed_Single+0xb0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023e8:	e01a      	b.n	8002420 <Motor_Set_Speed_Single+0x94>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <Motor_Set_Speed_Single+0xac>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d105      	bne.n	8002400 <Motor_Set_Speed_Single+0x74>
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <Motor_Set_Speed_Single+0xb0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023fe:	e00f      	b.n	8002420 <Motor_Set_Speed_Single+0x94>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <Motor_Set_Speed_Single+0xac>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	2b08      	cmp	r3, #8
 8002408:	d105      	bne.n	8002416 <Motor_Set_Speed_Single+0x8a>
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <Motor_Set_Speed_Single+0xb0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002412:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002414:	e004      	b.n	8002420 <Motor_Set_Speed_Single+0x94>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <Motor_Set_Speed_Single+0xb0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	66666667 	.word	0x66666667
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000898 	.word	0x20000898
 8002438:	20000008 	.word	0x20000008
 800243c:	200005c4 	.word	0x200005c4

08002440 <Motor_Set_Speed_All>:

void Motor_Set_Speed_All(int16_t speed_scaled1, int16_t speed_scaled2, int16_t speed_scaled3, int16_t speed_scaled4)
{//input: (0 to 1000)
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4623      	mov	r3, r4
 8002450:	80fb      	strh	r3, [r7, #6]
 8002452:	4603      	mov	r3, r0
 8002454:	80bb      	strh	r3, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]
 800245a:	4613      	mov	r3, r2
 800245c:	803b      	strh	r3, [r7, #0]
	//CONVENTION from front left clockwise
	Motor_Set_Speed_Single(MOTOR_FRONTLEFT,  speed_scaled1 + 150);//compensate for apparent detuning in control signal
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	3396      	adds	r3, #150	; 0x96
 8002462:	b29b      	uxth	r3, r3
 8002464:	b21b      	sxth	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff ff8f 	bl	800238c <Motor_Set_Speed_Single>
	Motor_Set_Speed_Single(MOTOR_FRONTLEFT,  speed_scaled1);
 800246e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002472:	4619      	mov	r1, r3
 8002474:	2000      	movs	r0, #0
 8002476:	f7ff ff89 	bl	800238c <Motor_Set_Speed_Single>
	Motor_Set_Speed_Single(MOTOR_FRONTRIGHT, speed_scaled2);
 800247a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800247e:	4619      	mov	r1, r3
 8002480:	2003      	movs	r0, #3
 8002482:	f7ff ff83 	bl	800238c <Motor_Set_Speed_Single>
	Motor_Set_Speed_Single(MOTOR_BACKRIGHT, speed_scaled3);
 8002486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800248a:	4619      	mov	r1, r3
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff ff7d 	bl	800238c <Motor_Set_Speed_Single>
	Motor_Set_Speed_Single(MOTOR_BACKLEFT,   speed_scaled4);
 8002492:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002496:	4619      	mov	r1, r3
 8002498:	2002      	movs	r0, #2
 800249a:	f7ff ff77 	bl	800238c <Motor_Set_Speed_Single>
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}
	...

080024a8 <Motor_Set_Speed_Calculated>:

void Motor_Set_Speed_Calculated(int16_t thrust, int16_t pitch, int16_t roll, int16_t yaw)
{	//input values: -1000 to 1000
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4604      	mov	r4, r0
 80024b0:	4608      	mov	r0, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	4623      	mov	r3, r4
 80024b8:	80fb      	strh	r3, [r7, #6]
 80024ba:	4603      	mov	r3, r0
 80024bc:	80bb      	strh	r3, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	807b      	strh	r3, [r7, #2]
 80024c2:	4613      	mov	r3, r2
 80024c4:	803b      	strh	r3, [r7, #0]
	//max power: thrust + 3*thrust*pitch/100
	//+thrust is forward, +roll is right, +yaw is CW
	int16_t frontLeft   = thrust + -1*thrust*(pitch)/1000 + -1*thrust*(roll)/1000 + -1*thrust*(yaw)/1000;
 80024c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ca:	425b      	negs	r3, r3
 80024cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	4a64      	ldr	r2, [pc, #400]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 80024d6:	fb82 1203 	smull	r1, r2, r2, r3
 80024da:	1192      	asrs	r2, r2, #6
 80024dc:	17db      	asrs	r3, r3, #31
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4413      	add	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ec:	425b      	negs	r3, r3
 80024ee:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	495c      	ldr	r1, [pc, #368]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 80024f8:	fb81 0103 	smull	r0, r1, r1, r3
 80024fc:	1189      	asrs	r1, r1, #6
 80024fe:	17db      	asrs	r3, r3, #31
 8002500:	1acb      	subs	r3, r1, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	4413      	add	r3, r2
 8002506:	b29a      	uxth	r2, r3
 8002508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800250c:	425b      	negs	r3, r3
 800250e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4954      	ldr	r1, [pc, #336]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 8002518:	fb81 0103 	smull	r0, r1, r1, r3
 800251c:	1189      	asrs	r1, r1, #6
 800251e:	17db      	asrs	r3, r3, #31
 8002520:	1acb      	subs	r3, r1, r3
 8002522:	b29b      	uxth	r3, r3
 8002524:	4413      	add	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	81fb      	strh	r3, [r7, #14]
	int16_t frontRight  = thrust + -1*thrust*(pitch)/1000 +    thrust*(roll)/1000 +    thrust*(yaw)/1000;
 800252a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252e:	425b      	negs	r3, r3
 8002530:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	4a4b      	ldr	r2, [pc, #300]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 800253a:	fb82 1203 	smull	r1, r2, r2, r3
 800253e:	1192      	asrs	r2, r2, #6
 8002540:	17db      	asrs	r3, r3, #31
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	b29a      	uxth	r2, r3
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4413      	add	r3, r2
 800254a:	b29a      	uxth	r2, r3
 800254c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002550:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4943      	ldr	r1, [pc, #268]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 800255a:	fb81 0103 	smull	r0, r1, r1, r3
 800255e:	1189      	asrs	r1, r1, #6
 8002560:	17db      	asrs	r3, r3, #31
 8002562:	1acb      	subs	r3, r1, r3
 8002564:	b29b      	uxth	r3, r3
 8002566:	4413      	add	r3, r2
 8002568:	b29a      	uxth	r2, r3
 800256a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800256e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	493c      	ldr	r1, [pc, #240]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 8002578:	fb81 0103 	smull	r0, r1, r1, r3
 800257c:	1189      	asrs	r1, r1, #6
 800257e:	17db      	asrs	r3, r3, #31
 8002580:	1acb      	subs	r3, r1, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4413      	add	r3, r2
 8002586:	b29b      	uxth	r3, r3
 8002588:	81bb      	strh	r3, [r7, #12]
	int16_t backRight   = thrust +    thrust*(pitch)/1000 + -1*thrust*(roll)/1000 + -1*thrust*(yaw)/1000;
 800258a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	4a34      	ldr	r2, [pc, #208]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 8002598:	fb82 1203 	smull	r1, r2, r2, r3
 800259c:	1192      	asrs	r2, r2, #6
 800259e:	17db      	asrs	r3, r3, #31
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	4413      	add	r3, r2
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ae:	425b      	negs	r3, r3
 80025b0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	492b      	ldr	r1, [pc, #172]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 80025ba:	fb81 0103 	smull	r0, r1, r1, r3
 80025be:	1189      	asrs	r1, r1, #6
 80025c0:	17db      	asrs	r3, r3, #31
 80025c2:	1acb      	subs	r3, r1, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ce:	425b      	negs	r3, r3
 80025d0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4923      	ldr	r1, [pc, #140]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 80025da:	fb81 0103 	smull	r0, r1, r1, r3
 80025de:	1189      	asrs	r1, r1, #6
 80025e0:	17db      	asrs	r3, r3, #31
 80025e2:	1acb      	subs	r3, r1, r3
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	817b      	strh	r3, [r7, #10]
	int16_t backLeft    = thrust +    thrust*(pitch)/1000 +    thrust*(roll)/1000 + 	  thrust*(yaw)/1000;
 80025ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80025f4:	fb02 f303 	mul.w	r3, r2, r3
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 80025fa:	fb82 1203 	smull	r1, r2, r2, r3
 80025fe:	1192      	asrs	r2, r2, #6
 8002600:	17db      	asrs	r3, r3, #31
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	b29a      	uxth	r2, r3
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	4413      	add	r3, r2
 800260a:	b29a      	uxth	r2, r3
 800260c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002610:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4913      	ldr	r1, [pc, #76]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 800261a:	fb81 0103 	smull	r0, r1, r1, r3
 800261e:	1189      	asrs	r1, r1, #6
 8002620:	17db      	asrs	r3, r3, #31
 8002622:	1acb      	subs	r3, r1, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	4413      	add	r3, r2
 8002628:	b29a      	uxth	r2, r3
 800262a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	490c      	ldr	r1, [pc, #48]	; (8002668 <Motor_Set_Speed_Calculated+0x1c0>)
 8002638:	fb81 0103 	smull	r0, r1, r1, r3
 800263c:	1189      	asrs	r1, r1, #6
 800263e:	17db      	asrs	r3, r3, #31
 8002640:	1acb      	subs	r3, r1, r3
 8002642:	b29b      	uxth	r3, r3
 8002644:	4413      	add	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	813b      	strh	r3, [r7, #8]
	//frontLeft  = (((frontLeft)  < (-100)) ? (-100) : (frontLeft));   frontLeft  = (((frontLeft)  > (1000)) ? (1000) : (frontLeft));
	//frontRight = (((frontRight) < (-100)) ? (-100) : (frontRight));  frontRight =  (((frontRight) > (1000)) ? (1000) : (frontRight));
	//backRight  = (((backRight)  < (-100)) ? (-100) : (backRight));   backRight  = (((backRight)  > (1000)) ? (1000) : (backRight));
	//backLeft  =  (((backLeft)   < (-100)) ? (-100) : (backLeft));     backLeft  = (((backLeft)   > (1000)) ? (1000) : (backLeft));
	//output: 0 to 1000
	Motor_Set_Speed_All(frontLeft, frontRight, backLeft, backRight);
 800264a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800264e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002652:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002656:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800265a:	f7ff fef1 	bl	8002440 <Motor_Set_Speed_All>
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bd90      	pop	{r4, r7, pc}
 8002666:	bf00      	nop
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <Motor_Set_Speed_Guided>:

void Motor_Set_Speed_Guided()
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	Motor_Set_Speed_Calculated(control_targets[CONTROL_THRUST], control_output[CONTROL_PITCH], control_output[CONTROL_ROLL], 0);
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <Motor_Set_Speed_Guided+0x20>)
 8002672:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <Motor_Set_Speed_Guided+0x24>)
 8002678:	f9b3 1000 	ldrsh.w	r1, [r3]
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <Motor_Set_Speed_Guided+0x24>)
 800267e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002682:	2300      	movs	r3, #0
 8002684:	f7ff ff10 	bl	80024a8 <Motor_Set_Speed_Calculated>
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200005ac 	.word	0x200005ac
 8002690:	20000540 	.word	0x20000540

08002694 <Mpu_Is_Ready>:
uint8_t  mpu_ma_index = 0;//keeps track of most recent insert in MA
int16_t  mpu_acc[3] = {0};//stored data as [x,y,z]
int16_t  mpu_cal[3];     //holds calibration data of accelerometer (board is tilted up slightly)

uint8_t Mpu_Is_Ready()
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
	//returns HAL address
	uint8_t mpu_ready_status = I2c_IsDeviceReady(MPU_I2C_ADDRESS);
 800269a:	2068      	movs	r0, #104	; 0x68
 800269c:	f7fd fe70 	bl	8000380 <I2c_IsDeviceReady>
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	return mpu_ready_status;
 80026a4:	79fb      	ldrb	r3, [r7, #7]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <Mpu_Wake>:

void Mpu_Wake()
{//set initial configs on power management 1 register
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
	//power settings
	uint8_t pwr_config = 0b00000001;
 80026b4:	2301      	movs	r3, #1
 80026b6:	71fb      	strb	r3, [r7, #7]
	Mpu_Write(MPU_REG_PWR_MGMT_1, pwr_config);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4619      	mov	r1, r3
 80026bc:	206b      	movs	r0, #107	; 0x6b
 80026be:	f000 f99f 	bl	8002a00 <Mpu_Write>
	//accelerometer settings
	uint8_t acc_config = 0b00000000;//set full scale range
 80026c2:	2300      	movs	r3, #0
 80026c4:	71bb      	strb	r3, [r7, #6]
	Mpu_Write(MPU_REG_ACC_CONFIG, acc_config);
 80026c6:	79bb      	ldrb	r3, [r7, #6]
 80026c8:	4619      	mov	r1, r3
 80026ca:	201c      	movs	r0, #28
 80026cc:	f000 f998 	bl	8002a00 <Mpu_Write>
	//gyrometer settings
	uint8_t gyro_config = 0b00000000;//set full scale range
 80026d0:	2300      	movs	r3, #0
 80026d2:	717b      	strb	r3, [r7, #5]
	Mpu_Write(MPU_REG_GYRO_CONFIG, gyro_config);
 80026d4:	797b      	ldrb	r3, [r7, #5]
 80026d6:	4619      	mov	r1, r3
 80026d8:	201b      	movs	r0, #27
 80026da:	f000 f991 	bl	8002a00 <Mpu_Write>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <Mpu_Calibrate>:

void Mpu_Calibrate()
{//sets calibration values as current accelerometer reading to account for board tilt
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	Mpu_Update_Values();
 80026ec:	f000 f870 	bl	80027d0 <Mpu_Update_Values>
	mpu_cal[MPU_AXIS_X] = mpu_acc[MPU_AXIS_X];
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <Mpu_Calibrate+0x2c>)
 80026f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <Mpu_Calibrate+0x30>)
 80026f8:	801a      	strh	r2, [r3, #0]
	mpu_cal[MPU_AXIS_Y] = mpu_acc[MPU_AXIS_Y];
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <Mpu_Calibrate+0x2c>)
 80026fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <Mpu_Calibrate+0x30>)
 8002702:	805a      	strh	r2, [r3, #2]
	mpu_cal[MPU_AXIS_Z] = mpu_acc[MPU_AXIS_Z];
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <Mpu_Calibrate+0x2c>)
 8002706:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800270a:	4b03      	ldr	r3, [pc, #12]	; (8002718 <Mpu_Calibrate+0x30>)
 800270c:	809a      	strh	r2, [r3, #4]
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000530 	.word	0x20000530
 8002718:	200009dc 	.word	0x200009dc

0800271c <Mpu_Update_Values_MA>:

void Mpu_Update_Values_MA()
{//need to address HAL delay with proper blocking protocol
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	if(Mpu_Is_Ready() == HAL_OK)
 8002720:	f7ff ffb8 	bl	8002694 <Mpu_Is_Ready>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d140      	bne.n	80027ac <Mpu_Update_Values_MA+0x90>
	{
		//update moving average arrays
		Mpu_Get_Acc_Data_MA(MPU_AXIS_X);
 800272a:	2000      	movs	r0, #0
 800272c:	f000 f8cc 	bl	80028c8 <Mpu_Get_Acc_Data_MA>
		HAL_Delay(1);
 8002730:	2001      	movs	r0, #1
 8002732:	f000 fbb5 	bl	8002ea0 <HAL_Delay>
		Mpu_Get_Acc_Data_MA(MPU_AXIS_Y);
 8002736:	2001      	movs	r0, #1
 8002738:	f000 f8c6 	bl	80028c8 <Mpu_Get_Acc_Data_MA>
		HAL_Delay(1);
 800273c:	2001      	movs	r0, #1
 800273e:	f000 fbaf 	bl	8002ea0 <HAL_Delay>
		Mpu_Get_Acc_Data_MA(MPU_AXIS_Z);
 8002742:	2002      	movs	r0, #2
 8002744:	f000 f8c0 	bl	80028c8 <Mpu_Get_Acc_Data_MA>
		//calculate new MA
		mpu_acc[MPU_AXIS_X] = Mpu_Calc_Acc_From_MA(&mpu_ma_x);
 8002748:	481b      	ldr	r0, [pc, #108]	; (80027b8 <Mpu_Update_Values_MA+0x9c>)
 800274a:	f000 f895 	bl	8002878 <Mpu_Calc_Acc_From_MA>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <Mpu_Update_Values_MA+0xa0>)
 8002754:	801a      	strh	r2, [r3, #0]
		mpu_acc[MPU_AXIS_Y] = Mpu_Calc_Acc_From_MA(&mpu_ma_y);
 8002756:	481a      	ldr	r0, [pc, #104]	; (80027c0 <Mpu_Update_Values_MA+0xa4>)
 8002758:	f000 f88e 	bl	8002878 <Mpu_Calc_Acc_From_MA>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <Mpu_Update_Values_MA+0xa0>)
 8002762:	805a      	strh	r2, [r3, #2]
		mpu_acc[MPU_AXIS_Z] = Mpu_Calc_Acc_From_MA(&mpu_ma_z);
 8002764:	4817      	ldr	r0, [pc, #92]	; (80027c4 <Mpu_Update_Values_MA+0xa8>)
 8002766:	f000 f887 	bl	8002878 <Mpu_Calc_Acc_From_MA>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <Mpu_Update_Values_MA+0xa0>)
 8002770:	809a      	strh	r2, [r3, #4]
		mpu_ma_index +=1;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <Mpu_Update_Values_MA+0xac>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <Mpu_Update_Values_MA+0xac>)
 800277c:	701a      	strb	r2, [r3, #0]
		if(mpu_ma_index >= MPU_MA_SIZE)
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <Mpu_Update_Values_MA+0xac>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b04      	cmp	r3, #4
 8002784:	d902      	bls.n	800278c <Mpu_Update_Values_MA+0x70>
		{
			mpu_ma_index = 0;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <Mpu_Update_Values_MA+0xac>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1);
 800278c:	2001      	movs	r0, #1
 800278e:	f000 fb87 	bl	8002ea0 <HAL_Delay>
		//gyro stuff
		Mpu_Get_Gyro_Data(MPU_AXIS_X);
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f84a 	bl	800282c <Mpu_Get_Gyro_Data>
		HAL_Delay(1);
 8002798:	2001      	movs	r0, #1
 800279a:	f000 fb81 	bl	8002ea0 <HAL_Delay>
		Mpu_Get_Gyro_Data(MPU_AXIS_Y);
 800279e:	2001      	movs	r0, #1
 80027a0:	f000 f844 	bl	800282c <Mpu_Get_Gyro_Data>
		HAL_Delay(1);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f000 fb7b 	bl	8002ea0 <HAL_Delay>
	}
	else
	{
		MAV_Send_Msg_Named_Value_Int("mpu_err", 0);
	}
}
 80027aa:	e003      	b.n	80027b4 <Mpu_Update_Values_MA+0x98>
		MAV_Send_Msg_Named_Value_Int("mpu_err", 0);
 80027ac:	2100      	movs	r1, #0
 80027ae:	4807      	ldr	r0, [pc, #28]	; (80027cc <Mpu_Update_Values_MA+0xb0>)
 80027b0:	f7ff fcec 	bl	800218c <MAV_Send_Msg_Named_Value_Int>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200009d0 	.word	0x200009d0
 80027bc:	20000530 	.word	0x20000530
 80027c0:	200009e8 	.word	0x200009e8
 80027c4:	200009f4 	.word	0x200009f4
 80027c8:	2000053e 	.word	0x2000053e
 80027cc:	080051f0 	.word	0x080051f0

080027d0 <Mpu_Update_Values>:
void Mpu_Update_Values()
{//need to address HAL delay with proper blocking protocol
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	if(Mpu_Is_Ready() == HAL_OK)
 80027d4:	f7ff ff5e 	bl	8002694 <Mpu_Is_Ready>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11e      	bne.n	800281c <Mpu_Update_Values+0x4c>
	{
		//update without MA
		Mpu_Get_Acc_Data(MPU_AXIS_X);
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 f8d4 	bl	800298c <Mpu_Get_Acc_Data>
		HAL_Delay(1);
 80027e4:	2001      	movs	r0, #1
 80027e6:	f000 fb5b 	bl	8002ea0 <HAL_Delay>
		Mpu_Get_Acc_Data(MPU_AXIS_Y);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 f8ce 	bl	800298c <Mpu_Get_Acc_Data>
		HAL_Delay(1);
 80027f0:	2001      	movs	r0, #1
 80027f2:	f000 fb55 	bl	8002ea0 <HAL_Delay>
		Mpu_Get_Acc_Data(MPU_AXIS_Z);
 80027f6:	2002      	movs	r0, #2
 80027f8:	f000 f8c8 	bl	800298c <Mpu_Get_Acc_Data>
		HAL_Delay(1);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f000 fb4f 	bl	8002ea0 <HAL_Delay>
		//gyro stuff
		Mpu_Get_Gyro_Data(MPU_AXIS_X);
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f812 	bl	800282c <Mpu_Get_Gyro_Data>
		HAL_Delay(1);
 8002808:	2001      	movs	r0, #1
 800280a:	f000 fb49 	bl	8002ea0 <HAL_Delay>
		Mpu_Get_Gyro_Data(MPU_AXIS_Y);
 800280e:	2001      	movs	r0, #1
 8002810:	f000 f80c 	bl	800282c <Mpu_Get_Gyro_Data>
		HAL_Delay(1);
 8002814:	2001      	movs	r0, #1
 8002816:	f000 fb43 	bl	8002ea0 <HAL_Delay>
	else
	{
		MAV_Send_Msg_Named_Value_Int("mpu_err", 0);
	}

}
 800281a:	e003      	b.n	8002824 <Mpu_Update_Values+0x54>
		MAV_Send_Msg_Named_Value_Int("mpu_err", 0);
 800281c:	2100      	movs	r1, #0
 800281e:	4802      	ldr	r0, [pc, #8]	; (8002828 <Mpu_Update_Values+0x58>)
 8002820:	f7ff fcb4 	bl	800218c <MAV_Send_Msg_Named_Value_Int>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	080051f0 	.word	0x080051f0

0800282c <Mpu_Get_Gyro_Data>:

void Mpu_Get_Gyro_Data(uint8_t gyro_axis)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
	uint8_t command = MPU_REG_GYRO_X + 2*gyro_axis;
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3343      	adds	r3, #67	; 0x43
 800283e:	73fb      	strb	r3, [r7, #15]
	Mpu_Read(command, &mpu_gyro_buffer);
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	490b      	ldr	r1, [pc, #44]	; (8002870 <Mpu_Get_Gyro_Data+0x44>)
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f8f2 	bl	8002a2e <Mpu_Read>
	mpu_gyro[gyro_axis] = (((uint16_t) mpu_gyro_buffer[0])<<8) + ((uint16_t) mpu_gyro_buffer[1]);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <Mpu_Get_Gyro_Data+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b299      	uxth	r1, r3
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <Mpu_Get_Gyro_Data+0x44>)
 8002856:	785b      	ldrb	r3, [r3, #1]
 8002858:	b29a      	uxth	r2, r3
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	440a      	add	r2, r1
 800285e:	b291      	uxth	r1, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <Mpu_Get_Gyro_Data+0x48>)
 8002862:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200005bc 	.word	0x200005bc
 8002874:	20000538 	.word	0x20000538

08002878 <Mpu_Calc_Acc_From_MA>:

int16_t Mpu_Calc_Acc_From_MA(uint16_t *ma_arr)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	int32_t value = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0;i<MPU_MA_SIZE;i++)
 8002884:	2300      	movs	r3, #0
 8002886:	72fb      	strb	r3, [r7, #11]
 8002888:	e00b      	b.n	80028a2 <Mpu_Calc_Acc_From_MA+0x2a>
	{
		value += ma_arr[i];
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0;i<MPU_MA_SIZE;i++)
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	3301      	adds	r3, #1
 80028a0:	72fb      	strb	r3, [r7, #11]
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d9f0      	bls.n	800288a <Mpu_Calc_Acc_From_MA+0x12>
	}
	//value = value/((int16_t) MPU_MA_SIZE+1);
	return ((int16_t) value)/MPU_MA_SIZE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <Mpu_Calc_Acc_From_MA+0x4c>)
 80028ae:	fb82 1203 	smull	r1, r2, r2, r3
 80028b2:	1052      	asrs	r2, r2, #1
 80028b4:	17db      	asrs	r3, r3, #31
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	b21b      	sxth	r3, r3
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	66666667 	.word	0x66666667

080028c8 <Mpu_Get_Acc_Data_MA>:
void Mpu_Get_Acc_Data_MA(uint8_t acc_axis)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	uint8_t command = MPU_REG_ACC_X + 2*acc_axis;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	333b      	adds	r3, #59	; 0x3b
 80028da:	73fb      	strb	r3, [r7, #15]
	Mpu_Read(command, &mpu_acc_buffer);
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	4925      	ldr	r1, [pc, #148]	; (8002974 <Mpu_Get_Acc_Data_MA+0xac>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f8a4 	bl	8002a2e <Mpu_Read>
	//data is high byte first
	//Radio_Transmit_Raw(&mpu_acc_buffer, 2);
	//HAL_Delay(1000);
	int16_t value = (((uint16_t) mpu_acc_buffer[0])<<8) + ((uint16_t) mpu_acc_buffer[1]);
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <Mpu_Get_Acc_Data_MA+0xac>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b20      	ldr	r3, [pc, #128]	; (8002974 <Mpu_Get_Acc_Data_MA+0xac>)
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	81bb      	strh	r3, [r7, #12]
	if     (acc_axis == MPU_AXIS_X){mpu_ma_x[mpu_ma_index] = value - mpu_cal[acc_axis];}
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <Mpu_Get_Acc_Data_MA+0x5a>
 8002902:	89ba      	ldrh	r2, [r7, #12]
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	491c      	ldr	r1, [pc, #112]	; (8002978 <Mpu_Get_Acc_Data_MA+0xb0>)
 8002908:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800290c:	b29b      	uxth	r3, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	b299      	uxth	r1, r3
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <Mpu_Get_Acc_Data_MA+0xb4>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	b209      	sxth	r1, r1
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <Mpu_Get_Acc_Data_MA+0xb8>)
 800291c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	else if(acc_axis == MPU_AXIS_Y){mpu_ma_y[mpu_ma_index] = value - mpu_cal[acc_axis];}
	else if(acc_axis == MPU_AXIS_Z){mpu_ma_z[mpu_ma_index] = value - mpu_cal[acc_axis];}
}
 8002920:	e024      	b.n	800296c <Mpu_Get_Acc_Data_MA+0xa4>
	else if(acc_axis == MPU_AXIS_Y){mpu_ma_y[mpu_ma_index] = value - mpu_cal[acc_axis];}
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d10f      	bne.n	8002948 <Mpu_Get_Acc_Data_MA+0x80>
 8002928:	89ba      	ldrh	r2, [r7, #12]
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	4912      	ldr	r1, [pc, #72]	; (8002978 <Mpu_Get_Acc_Data_MA+0xb0>)
 800292e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002932:	b29b      	uxth	r3, r3
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	b299      	uxth	r1, r3
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <Mpu_Get_Acc_Data_MA+0xb4>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	b209      	sxth	r1, r1
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <Mpu_Get_Acc_Data_MA+0xbc>)
 8002942:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8002946:	e011      	b.n	800296c <Mpu_Get_Acc_Data_MA+0xa4>
	else if(acc_axis == MPU_AXIS_Z){mpu_ma_z[mpu_ma_index] = value - mpu_cal[acc_axis];}
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d10e      	bne.n	800296c <Mpu_Get_Acc_Data_MA+0xa4>
 800294e:	89ba      	ldrh	r2, [r7, #12]
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	4909      	ldr	r1, [pc, #36]	; (8002978 <Mpu_Get_Acc_Data_MA+0xb0>)
 8002954:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002958:	b29b      	uxth	r3, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	b299      	uxth	r1, r3
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <Mpu_Get_Acc_Data_MA+0xb4>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	b209      	sxth	r1, r1
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <Mpu_Get_Acc_Data_MA+0xc0>)
 8002968:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200005c0 	.word	0x200005c0
 8002978:	200009dc 	.word	0x200009dc
 800297c:	2000053e 	.word	0x2000053e
 8002980:	200009d0 	.word	0x200009d0
 8002984:	200009e8 	.word	0x200009e8
 8002988:	200009f4 	.word	0x200009f4

0800298c <Mpu_Get_Acc_Data>:

void Mpu_Get_Acc_Data(uint8_t acc_axis)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
	uint8_t command = MPU_REG_ACC_X + 2*acc_axis;
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	333b      	adds	r3, #59	; 0x3b
 800299e:	73fb      	strb	r3, [r7, #15]
	Mpu_Read(command, &mpu_acc_buffer);
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	4914      	ldr	r1, [pc, #80]	; (80029f4 <Mpu_Get_Acc_Data+0x68>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 f842 	bl	8002a2e <Mpu_Read>
	//data is high byte first
	//Radio_Transmit_Raw(&mpu_acc_buffer, 2);
	//HAL_Delay(1000);
	mpu_acc[acc_axis] = (((uint16_t) mpu_acc_buffer[0])<<8) + ((uint16_t) mpu_acc_buffer[1]);
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <Mpu_Get_Acc_Data+0x68>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <Mpu_Get_Acc_Data+0x68>)
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	b29a      	uxth	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	b211      	sxth	r1, r2
 80029c2:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <Mpu_Get_Acc_Data+0x6c>)
 80029c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	mpu_acc[acc_axis] = mpu_acc[acc_axis] - mpu_cal[acc_axis];
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <Mpu_Get_Acc_Data+0x6c>)
 80029cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4909      	ldr	r1, [pc, #36]	; (80029fc <Mpu_Get_Acc_Data+0x70>)
 80029d6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	b29a      	uxth	r2, r3
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	b211      	sxth	r1, r2
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <Mpu_Get_Acc_Data+0x6c>)
 80029e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200005c0 	.word	0x200005c0
 80029f8:	20000530 	.word	0x20000530
 80029fc:	200009dc 	.word	0x200009dc

08002a00 <Mpu_Write>:

void Mpu_Write(uint8_t regNum, uint8_t writeValue)
{//input: register number to access, value to write to that register
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	460a      	mov	r2, r1
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	71bb      	strb	r3, [r7, #6]
	uint8_t command[2];//see write sequence in data sheet
	command[0] = regNum;
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	733b      	strb	r3, [r7, #12]
	command[1] = writeValue;
 8002a14:	79bb      	ldrb	r3, [r7, #6]
 8002a16:	737b      	strb	r3, [r7, #13]
	I2c_Master_Transmit(MPU_I2C_ADDRESS, &command, 2);
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2068      	movs	r0, #104	; 0x68
 8002a22:	f7fd fcc5 	bl	80003b0 <I2c_Master_Transmit>
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <Mpu_Read>:

void Mpu_Read(uint8_t regNum, uint8_t* buffer )
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	6039      	str	r1, [r7, #0]
 8002a38:	71fb      	strb	r3, [r7, #7]
	uint8_t command = regNum;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	73fb      	strb	r3, [r7, #15]
	I2c_Master_Transmit(MPU_I2C_ADDRESS, &command, 1);//request register
 8002a3e:	f107 030f 	add.w	r3, r7, #15
 8002a42:	2201      	movs	r2, #1
 8002a44:	4619      	mov	r1, r3
 8002a46:	2068      	movs	r0, #104	; 0x68
 8002a48:	f7fd fcb2 	bl	80003b0 <I2c_Master_Transmit>
	I2c_Master_Receive(MPU_I2C_ADDRESS, buffer, 2);
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	2068      	movs	r0, #104	; 0x68
 8002a52:	f7fd fcc9 	bl	80003e8 <I2c_Master_Receive>

}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4803      	ldr	r0, [pc, #12]	; (8002a84 <Radio_Transmit_Raw+0x24>)
 8002a76:	f002 f8fe 	bl	8004c76 <HAL_UART_Transmit>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000604 	.word	0x20000604

08002a88 <Radio_Recieve_Raw>:
void Radio_Recieve_Raw(uint8_t* messageDestination, int numBytesToRecieve){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive (&huart1,messageDestination, numBytesToRecieve , RADIO_RX_TIMEOUT);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <Radio_Recieve_Raw+0x24>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <Radio_Recieve_Raw+0x28>)
 8002a9e:	f002 f983 	bl	8004da8 <HAL_UART_Receive>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000010 	.word	0x20000010
 8002ab0:	20000604 	.word	0x20000604

08002ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_MspInit+0x5c>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6193      	str	r3, [r2, #24]
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	61d3      	str	r3, [r2, #28]
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_MspInit+0x60>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <HAL_MspInit+0x60>)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010000 	.word	0x40010000

08002b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d124      	bne.n	8002b82 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <HAL_I2C_MspInit+0x78>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <HAL_I2C_MspInit+0x78>)
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_I2C_MspInit+0x78>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b56:	2312      	movs	r3, #18
 8002b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	4619      	mov	r1, r3
 8002b64:	480b      	ldr	r0, [pc, #44]	; (8002b94 <HAL_I2C_MspInit+0x7c>)
 8002b66:	f000 faa1 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_I2C_MspInit+0x78>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_I2C_MspInit+0x78>)
 8002b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b74:	61d3      	str	r3, [r2, #28]
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_I2C_MspInit+0x78>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40005800 	.word	0x40005800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010c00 	.word	0x40010c00

08002b98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <HAL_TIM_PWM_MspInit+0x34>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	61d3      	str	r3, [r2, #28]
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0310 	add.w	r3, r7, #16
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <HAL_TIM_MspPostInit+0x5c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d118      	bne.n	8002c26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_TIM_MspPostInit+0x60>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_TIM_MspPostInit+0x60>)
 8002bfa:	f043 0308 	orr.w	r3, r3, #8
 8002bfe:	6193      	str	r3, [r2, #24]
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_TIM_MspPostInit+0x60>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2302      	movs	r3, #2
 8002c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_TIM_MspPostInit+0x64>)
 8002c22:	f000 fa43 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010c00 	.word	0x40010c00

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_UART_MspInit+0x8c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d131      	bne.n	8002cc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_UART_MspInit+0x90>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_UART_MspInit+0x90>)
 8002c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_UART_MspInit+0x90>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_UART_MspInit+0x90>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_UART_MspInit+0x90>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_UART_MspInit+0x90>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c96:	2303      	movs	r3, #3
 8002c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f107 0310 	add.w	r3, r7, #16
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480b      	ldr	r0, [pc, #44]	; (8002cd0 <HAL_UART_MspInit+0x94>)
 8002ca2:	f000 fa03 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <HAL_UART_MspInit+0x94>)
 8002cbc:	f000 f9f6 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40010800 	.word	0x40010800

08002cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <HardFault_Handler+0x4>

08002ce6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <MemManage_Handler+0x4>

08002cec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <BusFault_Handler+0x4>

08002cf2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <UsageFault_Handler+0x4>

08002cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d20:	f000 f8a2 	bl	8002e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <SystemInit+0x5c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <SystemInit+0x5c>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <SystemInit+0x5c>)
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4911      	ldr	r1, [pc, #68]	; (8002d84 <SystemInit+0x5c>)
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <SystemInit+0x60>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <SystemInit+0x5c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <SystemInit+0x5c>)
 8002d4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <SystemInit+0x5c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <SystemInit+0x5c>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <SystemInit+0x5c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <SystemInit+0x5c>)
 8002d66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002d6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SystemInit+0x5c>)
 8002d6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SystemInit+0x64>)
 8002d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40021000 	.word	0x40021000
 8002d88:	f8ff0000 	.word	0xf8ff0000
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d92:	e003      	b.n	8002d9c <LoopCopyDataInit>

08002d94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d9a:	3104      	adds	r1, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d9c:	480a      	ldr	r0, [pc, #40]	; (8002dc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002da0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002da2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002da4:	d3f6      	bcc.n	8002d94 <CopyDataInit>
  ldr r2, =_sbss
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002da8:	e002      	b.n	8002db0 <LoopFillZerobss>

08002daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002dac:	f842 3b04 	str.w	r3, [r2], #4

08002db0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002db2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002db4:	d3f9      	bcc.n	8002daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002db6:	f7ff ffb7 	bl	8002d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dba:	f002 f9bf 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dbe:	f7fd fb2f 	bl	8000420 <main>
  bx lr
 8002dc2:	4770      	bx	lr
  ldr r3, =_sidata
 8002dc4:	08005d1c 	.word	0x08005d1c
  ldr r0, =_sdata
 8002dc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002dcc:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8002dd0:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8002dd4:	20000a04 	.word	0x20000a04

08002dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <ADC1_2_IRQHandler>
	...

08002ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_Init+0x28>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <HAL_Init+0x28>)
 8002de6:	f043 0310 	orr.w	r3, r3, #16
 8002dea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dec:	2003      	movs	r0, #3
 8002dee:	f000 f929 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f000 f808 	bl	8002e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df8:	f7ff fe5c 	bl	8002ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40022000 	.word	0x40022000

08002e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_InitTick+0x54>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_InitTick+0x58>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f933 	bl	8003092 <HAL_SYSTICK_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00e      	b.n	8002e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d80a      	bhi.n	8002e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f000 f909 	bl	800305a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e48:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <HAL_InitTick+0x5c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000014 	.word	0x20000014
 8002e60:	2000001c 	.word	0x2000001c
 8002e64:	20000018 	.word	0x20000018

08002e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_IncTick+0x1c>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_IncTick+0x20>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_IncTick+0x20>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	2000001c 	.word	0x2000001c
 8002e88:	20000a00 	.word	0x20000a00

08002e8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <HAL_GetTick+0x10>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	20000a00 	.word	0x20000a00

08002ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d005      	beq.n	8002ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_Delay+0x40>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ec6:	bf00      	nop
 8002ec8:	f7ff ffe0 	bl	8002e8c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d8f7      	bhi.n	8002ec8 <HAL_Delay+0x28>
  {
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	2000001c 	.word	0x2000001c

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff90 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff49 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff5e 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff90 	bl	8002f9c <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5f 	bl	8002f48 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ffb0 	bl	8003000 <SysTick_Config>
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b08b      	sub	sp, #44	; 0x2c
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030be:	e127      	b.n	8003310 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030c0:	2201      	movs	r2, #1
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f040 8116 	bne.w	800330a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b12      	cmp	r3, #18
 80030e4:	d034      	beq.n	8003150 <HAL_GPIO_Init+0xa4>
 80030e6:	2b12      	cmp	r3, #18
 80030e8:	d80d      	bhi.n	8003106 <HAL_GPIO_Init+0x5a>
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d02b      	beq.n	8003146 <HAL_GPIO_Init+0x9a>
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d804      	bhi.n	80030fc <HAL_GPIO_Init+0x50>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d031      	beq.n	800315a <HAL_GPIO_Init+0xae>
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d01c      	beq.n	8003134 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030fa:	e048      	b.n	800318e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d043      	beq.n	8003188 <HAL_GPIO_Init+0xdc>
 8003100:	2b11      	cmp	r3, #17
 8003102:	d01b      	beq.n	800313c <HAL_GPIO_Init+0x90>
          break;
 8003104:	e043      	b.n	800318e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003106:	4a89      	ldr	r2, [pc, #548]	; (800332c <HAL_GPIO_Init+0x280>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d026      	beq.n	800315a <HAL_GPIO_Init+0xae>
 800310c:	4a87      	ldr	r2, [pc, #540]	; (800332c <HAL_GPIO_Init+0x280>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d806      	bhi.n	8003120 <HAL_GPIO_Init+0x74>
 8003112:	4a87      	ldr	r2, [pc, #540]	; (8003330 <HAL_GPIO_Init+0x284>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d020      	beq.n	800315a <HAL_GPIO_Init+0xae>
 8003118:	4a86      	ldr	r2, [pc, #536]	; (8003334 <HAL_GPIO_Init+0x288>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_GPIO_Init+0xae>
          break;
 800311e:	e036      	b.n	800318e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003120:	4a85      	ldr	r2, [pc, #532]	; (8003338 <HAL_GPIO_Init+0x28c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0xae>
 8003126:	4a85      	ldr	r2, [pc, #532]	; (800333c <HAL_GPIO_Init+0x290>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d016      	beq.n	800315a <HAL_GPIO_Init+0xae>
 800312c:	4a84      	ldr	r2, [pc, #528]	; (8003340 <HAL_GPIO_Init+0x294>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0xae>
          break;
 8003132:	e02c      	b.n	800318e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	623b      	str	r3, [r7, #32]
          break;
 800313a:	e028      	b.n	800318e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	3304      	adds	r3, #4
 8003142:	623b      	str	r3, [r7, #32]
          break;
 8003144:	e023      	b.n	800318e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	3308      	adds	r3, #8
 800314c:	623b      	str	r3, [r7, #32]
          break;
 800314e:	e01e      	b.n	800318e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	330c      	adds	r3, #12
 8003156:	623b      	str	r3, [r7, #32]
          break;
 8003158:	e019      	b.n	800318e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003162:	2304      	movs	r3, #4
 8003164:	623b      	str	r3, [r7, #32]
          break;
 8003166:	e012      	b.n	800318e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003170:	2308      	movs	r3, #8
 8003172:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	611a      	str	r2, [r3, #16]
          break;
 800317a:	e008      	b.n	800318e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800317c:	2308      	movs	r3, #8
 800317e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	615a      	str	r2, [r3, #20]
          break;
 8003186:	e002      	b.n	800318e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003188:	2300      	movs	r3, #0
 800318a:	623b      	str	r3, [r7, #32]
          break;
 800318c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d801      	bhi.n	8003198 <HAL_GPIO_Init+0xec>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	e001      	b.n	800319c <HAL_GPIO_Init+0xf0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2bff      	cmp	r3, #255	; 0xff
 80031a2:	d802      	bhi.n	80031aa <HAL_GPIO_Init+0xfe>
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x104>
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	3b08      	subs	r3, #8
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	210f      	movs	r1, #15
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	401a      	ands	r2, r3
 80031c2:	6a39      	ldr	r1, [r7, #32]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8096 	beq.w	800330a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031de:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_GPIO_Init+0x298>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_GPIO_Init+0x298>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6193      	str	r3, [r2, #24]
 80031ea:	4b56      	ldr	r3, [pc, #344]	; (8003344 <HAL_GPIO_Init+0x298>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031f6:	4a54      	ldr	r2, [pc, #336]	; (8003348 <HAL_GPIO_Init+0x29c>)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4b      	ldr	r2, [pc, #300]	; (800334c <HAL_GPIO_Init+0x2a0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x19e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <HAL_GPIO_Init+0x2a4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x19a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a49      	ldr	r2, [pc, #292]	; (8003354 <HAL_GPIO_Init+0x2a8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x196>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a48      	ldr	r2, [pc, #288]	; (8003358 <HAL_GPIO_Init+0x2ac>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x192>
 800323a:	2303      	movs	r3, #3
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x1a0>
 800323e:	2304      	movs	r3, #4
 8003240:	e004      	b.n	800324c <HAL_GPIO_Init+0x1a0>
 8003242:	2302      	movs	r3, #2
 8003244:	e002      	b.n	800324c <HAL_GPIO_Init+0x1a0>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_GPIO_Init+0x1a0>
 800324a:	2300      	movs	r3, #0
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	f002 0203 	and.w	r2, r2, #3
 8003252:	0092      	lsls	r2, r2, #2
 8003254:	4093      	lsls	r3, r2
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800325c:	493a      	ldr	r1, [pc, #232]	; (8003348 <HAL_GPIO_Init+0x29c>)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3302      	adds	r3, #2
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003276:	4b39      	ldr	r3, [pc, #228]	; (800335c <HAL_GPIO_Init+0x2b0>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4938      	ldr	r1, [pc, #224]	; (800335c <HAL_GPIO_Init+0x2b0>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
 8003282:	e006      	b.n	8003292 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003284:	4b35      	ldr	r3, [pc, #212]	; (800335c <HAL_GPIO_Init+0x2b0>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	43db      	mvns	r3, r3
 800328c:	4933      	ldr	r1, [pc, #204]	; (800335c <HAL_GPIO_Init+0x2b0>)
 800328e:	4013      	ands	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	492e      	ldr	r1, [pc, #184]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
 80032aa:	e006      	b.n	80032ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ac:	4b2b      	ldr	r3, [pc, #172]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	4929      	ldr	r1, [pc, #164]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032c6:	4b25      	ldr	r3, [pc, #148]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4924      	ldr	r1, [pc, #144]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
 80032d2:	e006      	b.n	80032e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	43db      	mvns	r3, r3
 80032dc:	491f      	ldr	r1, [pc, #124]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032de:	4013      	ands	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032ee:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	491a      	ldr	r1, [pc, #104]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60cb      	str	r3, [r1, #12]
 80032fa:	e006      	b.n	800330a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <HAL_GPIO_Init+0x2b0>)
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	43db      	mvns	r3, r3
 8003304:	4915      	ldr	r1, [pc, #84]	; (800335c <HAL_GPIO_Init+0x2b0>)
 8003306:	4013      	ands	r3, r2
 8003308:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	3301      	adds	r3, #1
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	f47f aed0 	bne.w	80030c0 <HAL_GPIO_Init+0x14>
  }
}
 8003320:	bf00      	nop
 8003322:	372c      	adds	r7, #44	; 0x2c
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	10210000 	.word	0x10210000
 8003330:	10110000 	.word	0x10110000
 8003334:	10120000 	.word	0x10120000
 8003338:	10310000 	.word	0x10310000
 800333c:	10320000 	.word	0x10320000
 8003340:	10220000 	.word	0x10220000
 8003344:	40021000 	.word	0x40021000
 8003348:	40010000 	.word	0x40010000
 800334c:	40010800 	.word	0x40010800
 8003350:	40010c00 	.word	0x40010c00
 8003354:	40011000 	.word	0x40011000
 8003358:	40011400 	.word	0x40011400
 800335c:	40010400 	.word	0x40010400

08003360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800337c:	e003      	b.n	8003386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	611a      	str	r2, [r3, #16]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e10f      	b.n	80035c2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fbae 	bl	8002b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d4:	f001 f864 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 80033d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a7b      	ldr	r2, [pc, #492]	; (80035cc <HAL_I2C_Init+0x23c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d807      	bhi.n	80033f4 <HAL_I2C_Init+0x64>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a7a      	ldr	r2, [pc, #488]	; (80035d0 <HAL_I2C_Init+0x240>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	bf94      	ite	ls
 80033ec:	2301      	movls	r3, #1
 80033ee:	2300      	movhi	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e006      	b.n	8003402 <HAL_I2C_Init+0x72>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a77      	ldr	r2, [pc, #476]	; (80035d4 <HAL_I2C_Init+0x244>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bf94      	ite	ls
 80033fc:	2301      	movls	r3, #1
 80033fe:	2300      	movhi	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0db      	b.n	80035c2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a72      	ldr	r2, [pc, #456]	; (80035d8 <HAL_I2C_Init+0x248>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0c9b      	lsrs	r3, r3, #18
 8003414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a64      	ldr	r2, [pc, #400]	; (80035cc <HAL_I2C_Init+0x23c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d802      	bhi.n	8003444 <HAL_I2C_Init+0xb4>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3301      	adds	r3, #1
 8003442:	e009      	b.n	8003458 <HAL_I2C_Init+0xc8>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	4a63      	ldr	r2, [pc, #396]	; (80035dc <HAL_I2C_Init+0x24c>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	3301      	adds	r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800346a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4956      	ldr	r1, [pc, #344]	; (80035cc <HAL_I2C_Init+0x23c>)
 8003474:	428b      	cmp	r3, r1
 8003476:	d80d      	bhi.n	8003494 <HAL_I2C_Init+0x104>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e59      	subs	r1, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fbb1 f3f3 	udiv	r3, r1, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b04      	cmp	r3, #4
 800348e:	bf38      	it	cc
 8003490:	2304      	movcc	r3, #4
 8003492:	e04f      	b.n	8003534 <HAL_I2C_Init+0x1a4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d111      	bne.n	80034c0 <HAL_I2C_Init+0x130>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e012      	b.n	80034e6 <HAL_I2C_Init+0x156>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	0099      	lsls	r1, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Init+0x15e>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e022      	b.n	8003534 <HAL_I2C_Init+0x1a4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10e      	bne.n	8003514 <HAL_I2C_Init+0x184>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1e58      	subs	r0, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	440b      	add	r3, r1
 8003504:	fbb0 f3f3 	udiv	r3, r0, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003512:	e00f      	b.n	8003534 <HAL_I2C_Init+0x1a4>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e58      	subs	r0, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	0099      	lsls	r1, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	6809      	ldr	r1, [r1, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6911      	ldr	r1, [r2, #16]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	4311      	orrs	r1, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	000186a0 	.word	0x000186a0
 80035d0:	001e847f 	.word	0x001e847f
 80035d4:	003d08ff 	.word	0x003d08ff
 80035d8:	431bde83 	.word	0x431bde83
 80035dc:	10624dd3 	.word	0x10624dd3

080035e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	461a      	mov	r2, r3
 80035ec:	460b      	mov	r3, r1
 80035ee:	817b      	strh	r3, [r7, #10]
 80035f0:	4613      	mov	r3, r2
 80035f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7ff fc4a 	bl	8002e8c <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	f040 80e0 	bne.w	80037c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2319      	movs	r3, #25
 800360e:	2201      	movs	r2, #1
 8003610:	4970      	ldr	r1, [pc, #448]	; (80037d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fd5e 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	e0d3      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_I2C_Master_Transmit+0x50>
 800362c:	2302      	movs	r3, #2
 800362e:	e0cc      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d007      	beq.n	8003656 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003664:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2210      	movs	r2, #16
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	893a      	ldrh	r2, [r7, #8]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a50      	ldr	r2, [pc, #320]	; (80037d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003698:	8979      	ldrh	r1, [r7, #10]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fbec 	bl	8003e7c <I2C_MasterRequestWrite>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e08d      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036c4:	e066      	b.n	8003794 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fdd8 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d107      	bne.n	80036ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06b      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d11b      	bne.n	8003768 <HAL_I2C_Master_Transmit+0x188>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	6a39      	ldr	r1, [r7, #32]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fdc8 	bl	8004302 <I2C_WaitOnBTFFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e01a      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d194      	bne.n	80036c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	00100002 	.word	0x00100002
 80037d8:	ffff0000 	.word	0xffff0000

080037dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	; 0x30
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	461a      	mov	r2, r3
 80037e8:	460b      	mov	r3, r1
 80037ea:	817b      	strh	r3, [r7, #10]
 80037ec:	4613      	mov	r3, r2
 80037ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037f0:	f7ff fb4c 	bl	8002e8c <HAL_GetTick>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b20      	cmp	r3, #32
 8003800:	f040 8213 	bne.w	8003c2a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2319      	movs	r3, #25
 800380a:	2201      	movs	r2, #1
 800380c:	497e      	ldr	r1, [pc, #504]	; (8003a08 <HAL_I2C_Master_Receive+0x22c>)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fc60 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800381a:	2302      	movs	r3, #2
 800381c:	e206      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_I2C_Master_Receive+0x50>
 8003828:	2302      	movs	r3, #2
 800382a:	e1ff      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d007      	beq.n	8003852 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0201 	orr.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2222      	movs	r2, #34	; 0x22
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2210      	movs	r2, #16
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	893a      	ldrh	r2, [r7, #8]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a5e      	ldr	r2, [pc, #376]	; (8003a0c <HAL_I2C_Master_Receive+0x230>)
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003894:	8979      	ldrh	r1, [r7, #10]
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fb64 	bl	8003f68 <I2C_MasterRequestRead>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1c0      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	623b      	str	r3, [r7, #32]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e194      	b.n	8003c04 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d11d      	bne.n	800391e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038f2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003918:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800391a:	b662      	cpsie	i
 800391c:	e172      	b.n	8003c04 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	2b02      	cmp	r3, #2
 8003924:	d11d      	bne.n	8003962 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003934:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003936:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800395e:	b662      	cpsie	i
 8003960:	e150      	b.n	8003c04 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003988:	e13c      	b.n	8003c04 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	2b03      	cmp	r3, #3
 8003990:	f200 80f5 	bhi.w	8003b7e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b01      	cmp	r3, #1
 800399a:	d123      	bne.n	80039e4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fcef 	bl	8004384 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e13d      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e2:	e10f      	b.n	8003c04 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d150      	bne.n	8003a8e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	2200      	movs	r2, #0
 80039f4:	4906      	ldr	r1, [pc, #24]	; (8003a10 <HAL_I2C_Master_Receive+0x234>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fb6c 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e112      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
 8003a06:	bf00      	nop
 8003a08:	00100002 	.word	0x00100002
 8003a0c:	ffff0000 	.word	0xffff0000
 8003a10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a14:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a24:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a58:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a8c:	e0ba      	b.n	8003c04 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	2200      	movs	r2, #0
 8003a96:	4967      	ldr	r1, [pc, #412]	; (8003c34 <HAL_I2C_Master_Receive+0x458>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fb1b 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0c1      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	494f      	ldr	r1, [pc, #316]	; (8003c34 <HAL_I2C_Master_Receive+0x458>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 faec 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e092      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b14:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b48:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b7c:	e042      	b.n	8003c04 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fbfe 	bl	8004384 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e04c      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d118      	bne.n	8003c04 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f aebe 	bne.w	800398a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	00010004 	.word	0x00010004

08003c38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff f920 	bl	8002e8c <HAL_GetTick>
 8003c4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f040 8105 	bne.w	8003e6a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2319      	movs	r3, #25
 8003c66:	2201      	movs	r2, #1
 8003c68:	4982      	ldr	r1, [pc, #520]	; (8003e74 <HAL_I2C_IsDeviceReady+0x23c>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa32 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
 8003c78:	e0f8      	b.n	8003e6c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_I2C_IsDeviceReady+0x50>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e0f1      	b.n	8003e6c <HAL_I2C_IsDeviceReady+0x234>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d007      	beq.n	8003cae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2224      	movs	r2, #36	; 0x24
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a6a      	ldr	r2, [pc, #424]	; (8003e78 <HAL_I2C_IsDeviceReady+0x240>)
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f9f0 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0b6      	b.n	8003e6c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d0e:	f7ff f8bd 	bl	8002e8c <HAL_GetTick>
 8003d12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d42:	e025      	b.n	8003d90 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d44:	f7ff f8a2 	bl	8002e8c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <HAL_I2C_IsDeviceReady+0x122>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	22a0      	movs	r2, #160	; 0xa0
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2ba0      	cmp	r3, #160	; 0xa0
 8003d9a:	d005      	beq.n	8003da8 <HAL_I2C_IsDeviceReady+0x170>
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_I2C_IsDeviceReady+0x170>
 8003da2:	7dbb      	ldrb	r3, [r7, #22]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0cd      	beq.n	8003d44 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d129      	bne.n	8003e12 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2319      	movs	r3, #25
 8003dea:	2201      	movs	r2, #1
 8003dec:	4921      	ldr	r1, [pc, #132]	; (8003e74 <HAL_I2C_IsDeviceReady+0x23c>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f970 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e036      	b.n	8003e6c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e02c      	b.n	8003e6c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2319      	movs	r3, #25
 8003e32:	2201      	movs	r2, #1
 8003e34:	490f      	ldr	r1, [pc, #60]	; (8003e74 <HAL_I2C_IsDeviceReady+0x23c>)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f94c 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e012      	b.n	8003e6c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	f4ff af3e 	bcc.w	8003cd2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	00100002 	.word	0x00100002
 8003e78:	ffff0000 	.word	0xffff0000

08003e7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d006      	beq.n	8003ea6 <I2C_MasterRequestWrite+0x2a>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d003      	beq.n	8003ea6 <I2C_MasterRequestWrite+0x2a>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea4:	d108      	bne.n	8003eb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e00b      	b.n	8003ed0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	2b12      	cmp	r3, #18
 8003ebe:	d107      	bne.n	8003ed0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f8f9 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e035      	b.n	8003f58 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef4:	d108      	bne.n	8003f08 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e01b      	b.n	8003f40 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	11db      	asrs	r3, r3, #7
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f063 030f 	orn	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	490e      	ldr	r1, [pc, #56]	; (8003f60 <I2C_MasterRequestWrite+0xe4>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f92b 	bl	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e010      	b.n	8003f58 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4907      	ldr	r1, [pc, #28]	; (8003f64 <I2C_MasterRequestWrite+0xe8>)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f91b 	bl	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	00010008 	.word	0x00010008
 8003f64:	00010002 	.word	0x00010002

08003f68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	460b      	mov	r3, r1
 8003f76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d006      	beq.n	8003fa2 <I2C_MasterRequestRead+0x3a>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d003      	beq.n	8003fa2 <I2C_MasterRequestRead+0x3a>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa0:	d108      	bne.n	8003fb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e00b      	b.n	8003fcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2b11      	cmp	r3, #17
 8003fba:	d107      	bne.n	8003fcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f87b 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e06d      	b.n	80040c4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff0:	d108      	bne.n	8004004 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]
 8004002:	e053      	b.n	80040ac <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	11db      	asrs	r3, r3, #7
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 0306 	and.w	r3, r3, #6
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f063 030f 	orn	r3, r3, #15
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	492a      	ldr	r1, [pc, #168]	; (80040cc <I2C_MasterRequestRead+0x164>)
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f8ad 	bl	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e048      	b.n	80040c4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004032:	897b      	ldrh	r3, [r7, #10]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4923      	ldr	r1, [pc, #140]	; (80040d0 <I2C_MasterRequestRead+0x168>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f89d 	bl	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e038      	b.n	80040c4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004076:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f825 	bl	80040d4 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e017      	b.n	80040c4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004094:	897b      	ldrh	r3, [r7, #10]
 8004096:	11db      	asrs	r3, r3, #7
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0306 	and.w	r3, r3, #6
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f063 030e 	orn	r3, r3, #14
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <I2C_MasterRequestRead+0x168>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f865 	bl	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00010008 	.word	0x00010008
 80040d0:	00010002 	.word	0x00010002

080040d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e4:	e025      	b.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d021      	beq.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe fecd 	bl	8002e8c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d116      	bne.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e023      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10d      	bne.n	8004158 <I2C_WaitOnFlagUntilTimeout+0x84>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	43da      	mvns	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	e00c      	b.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	429a      	cmp	r2, r3
 8004176:	d0b6      	beq.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004190:	e051      	b.n	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d123      	bne.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e046      	b.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d021      	beq.n	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fe fe4b 	bl	8002e8c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e020      	b.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10c      	bne.n	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	43da      	mvns	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e00b      	b.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d18d      	bne.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428c:	e02d      	b.n	80042ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f8ce 	bl	8004430 <I2C_IsAcknowledgeFailed>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e02d      	b.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d021      	beq.n	80042ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fe fdf1 	bl	8002e8c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d116      	bne.n	80042ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e007      	b.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d1ca      	bne.n	800428e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800430e:	e02d      	b.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f88d 	bl	8004430 <I2C_IsAcknowledgeFailed>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e02d      	b.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d021      	beq.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004328:	f7fe fdb0 	bl	8002e8c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e007      	b.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d1ca      	bne.n	8004310 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004390:	e042      	b.n	8004418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b10      	cmp	r3, #16
 800439e:	d119      	bne.n	80043d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0210 	mvn.w	r2, #16
 80043a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e029      	b.n	8004428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fe fd5a 	bl	8002e8c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e007      	b.n	8004428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d1b5      	bne.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d11b      	bne.n	8004480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f043 0204 	orr.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004490:	4b02      	ldr	r3, [pc, #8]	; (800449c <HAL_RCC_GetHCLKFreq+0x10>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	20000014 	.word	0x20000014

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a4:	f7ff fff2 	bl	800448c <HAL_RCC_GetHCLKFreq>
 80044a8:	4601      	mov	r1, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	08005d0c 	.word	0x08005d0c

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044cc:	f7ff ffde 	bl	800448c <HAL_RCC_GetHCLKFreq>
 80044d0:	4601      	mov	r1, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	0adb      	lsrs	r3, r3, #11
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4a03      	ldr	r2, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	08005d0c 	.word	0x08005d0c

080044f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e01d      	b.n	800453e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fe fb3e 	bl	8002b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f000 f902 	bl	8004738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fad6 	bl	8004b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a10      	ldr	r2, [pc, #64]	; (80045a8 <HAL_TIM_PWM_Start+0x60>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d107      	bne.n	800457a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b06      	cmp	r3, #6
 800458a:	d007      	beq.n	800459c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40012c00 	.word	0x40012c00

080045ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0b4      	b.n	8004730 <HAL_TIM_PWM_ConfigChannel+0x184>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	f200 809f 	bhi.w	800471c <HAL_TIM_PWM_ConfigChannel+0x170>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	08004619 	.word	0x08004619
 80045e8:	0800471d 	.word	0x0800471d
 80045ec:	0800471d 	.word	0x0800471d
 80045f0:	0800471d 	.word	0x0800471d
 80045f4:	08004659 	.word	0x08004659
 80045f8:	0800471d 	.word	0x0800471d
 80045fc:	0800471d 	.word	0x0800471d
 8004600:	0800471d 	.word	0x0800471d
 8004604:	0800469b 	.word	0x0800469b
 8004608:	0800471d 	.word	0x0800471d
 800460c:	0800471d 	.word	0x0800471d
 8004610:	0800471d 	.word	0x0800471d
 8004614:	080046db 	.word	0x080046db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f8ec 	bl	80047fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0208 	orr.w	r2, r2, #8
 8004632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0204 	bic.w	r2, r2, #4
 8004642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	619a      	str	r2, [r3, #24]
      break;
 8004656:	e062      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f932 	bl	80048c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	619a      	str	r2, [r3, #24]
      break;
 8004698:	e041      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f97b 	bl	800499c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0208 	orr.w	r2, r2, #8
 80046b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0204 	bic.w	r2, r2, #4
 80046c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	61da      	str	r2, [r3, #28]
      break;
 80046d8:	e021      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f9c5 	bl	8004a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69d9      	ldr	r1, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	021a      	lsls	r2, r3, #8
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	61da      	str	r2, [r3, #28]
      break;
 800471a:	e000      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800471c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <TIM_Base_SetConfig+0xb8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00b      	beq.n	8004768 <TIM_Base_SetConfig+0x30>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004756:	d007      	beq.n	8004768 <TIM_Base_SetConfig+0x30>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a26      	ldr	r2, [pc, #152]	; (80047f4 <TIM_Base_SetConfig+0xbc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_Base_SetConfig+0x30>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <TIM_Base_SetConfig+0xc0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d108      	bne.n	800477a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <TIM_Base_SetConfig+0xb8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00b      	beq.n	800479a <TIM_Base_SetConfig+0x62>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004788:	d007      	beq.n	800479a <TIM_Base_SetConfig+0x62>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <TIM_Base_SetConfig+0xbc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_Base_SetConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <TIM_Base_SetConfig+0xc0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d108      	bne.n	80047ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <TIM_Base_SetConfig+0xb8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d103      	bne.n	80047e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	615a      	str	r2, [r3, #20]
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800

080047fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f023 0201 	bic.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 0302 	bic.w	r3, r3, #2
 8004844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <TIM_OC1_SetConfig+0xc8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d10c      	bne.n	8004872 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0308 	bic.w	r3, r3, #8
 800485e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <TIM_OC1_SetConfig+0xc8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d111      	bne.n	800489e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40012c00 	.word	0x40012c00

080048c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <TIM_OC2_SetConfig+0xd0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10d      	bne.n	8004944 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <TIM_OC2_SetConfig+0xd0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d113      	bne.n	8004974 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40012c00 	.word	0x40012c00

0800499c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0303 	bic.w	r3, r3, #3
 80049d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <TIM_OC3_SetConfig+0xd0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10d      	bne.n	8004a16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <TIM_OC3_SetConfig+0xd0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d113      	bne.n	8004a46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00

08004a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0f      	ldr	r2, [pc, #60]	; (8004b08 <TIM_OC4_SetConfig+0x98>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	40012c00 	.word	0x40012c00

08004b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2201      	movs	r2, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1a      	ldr	r2, [r3, #32]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	401a      	ands	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	431a      	orrs	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e032      	b.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e03f      	b.n	8004c6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fe f81a 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	; 0x24
 8004c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f9b1 	bl	8004f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b088      	sub	sp, #32
 8004c7a:	af02      	add	r7, sp, #8
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	f040 8083 	bne.w	8004d9e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Transmit+0x2e>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e07b      	b.n	8004da0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Transmit+0x40>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e074      	b.n	8004da0 <HAL_UART_Transmit+0x12a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2221      	movs	r2, #33	; 0x21
 8004cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ccc:	f7fe f8de 	bl	8002e8c <HAL_GetTick>
 8004cd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cde:	e042      	b.n	8004d66 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf6:	d122      	bne.n	8004d3e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f8f6 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e046      	b.n	8004da0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d24:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	3302      	adds	r3, #2
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	e017      	b.n	8004d66 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	e013      	b.n	8004d66 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f8d3 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e023      	b.n	8004da0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	60ba      	str	r2, [r7, #8]
 8004d5e:	781a      	ldrb	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1b7      	bne.n	8004ce0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f8ba 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00a      	b.n	8004da0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	f040 8090 	bne.w	8004eea <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_UART_Receive+0x2e>
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e088      	b.n	8004eec <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_UART_Receive+0x40>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e081      	b.n	8004eec <HAL_UART_Receive+0x144>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2222      	movs	r2, #34	; 0x22
 8004dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004dfe:	f7fe f845 	bl	8002e8c <HAL_GetTick>
 8004e02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e10:	e05c      	b.n	8004ecc <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d12b      	bne.n	8004e82 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2120      	movs	r1, #32
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f85d 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e053      	b.n	8004eec <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10c      	bne.n	8004e6a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	3302      	adds	r3, #2
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	e030      	b.n	8004ecc <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	e024      	b.n	8004ecc <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f831 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e027      	b.n	8004eec <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	60ba      	str	r2, [r7, #8]
 8004eb0:	b2ca      	uxtb	r2, r1
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e00a      	b.n	8004ecc <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	1c59      	adds	r1, r3, #1
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d19d      	bne.n	8004e12 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f04:	e02c      	b.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d028      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f14:	f7fd ffba 	bl	8002e8c <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d21d      	bcs.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e00f      	b.n	8004f80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d0c3      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fc2:	f023 030c 	bic.w	r3, r3, #12
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a52      	ldr	r2, [pc, #328]	; (8005134 <UART_SetConfig+0x1ac>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d14e      	bne.n	800508e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7ff fa6a 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 8004ff4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009a      	lsls	r2, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	4a4a      	ldr	r2, [pc, #296]	; (8005138 <UART_SetConfig+0x1b0>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	0119      	lsls	r1, r3, #4
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fbb2 f2f3 	udiv	r2, r2, r3
 800502c:	4b42      	ldr	r3, [pc, #264]	; (8005138 <UART_SetConfig+0x1b0>)
 800502e:	fba3 0302 	umull	r0, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2064      	movs	r0, #100	; 0x64
 8005036:	fb00 f303 	mul.w	r3, r0, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	4a3d      	ldr	r2, [pc, #244]	; (8005138 <UART_SetConfig+0x1b0>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504c:	4419      	add	r1, r3
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009a      	lsls	r2, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fbb2 f2f3 	udiv	r2, r2, r3
 8005064:	4b34      	ldr	r3, [pc, #208]	; (8005138 <UART_SetConfig+0x1b0>)
 8005066:	fba3 0302 	umull	r0, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2064      	movs	r0, #100	; 0x64
 800506e:	fb00 f303 	mul.w	r3, r0, r3
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	3332      	adds	r3, #50	; 0x32
 8005078:	4a2f      	ldr	r2, [pc, #188]	; (8005138 <UART_SetConfig+0x1b0>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	f003 020f 	and.w	r2, r3, #15
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	440a      	add	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800508c:	e04d      	b.n	800512a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800508e:	f7ff fa07 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8005092:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009a      	lsls	r2, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	4a23      	ldr	r2, [pc, #140]	; (8005138 <UART_SetConfig+0x1b0>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	0119      	lsls	r1, r3, #4
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009a      	lsls	r2, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ca:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <UART_SetConfig+0x1b0>)
 80050cc:	fba3 0302 	umull	r0, r3, r3, r2
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2064      	movs	r0, #100	; 0x64
 80050d4:	fb00 f303 	mul.w	r3, r0, r3
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	3332      	adds	r3, #50	; 0x32
 80050de:	4a16      	ldr	r2, [pc, #88]	; (8005138 <UART_SetConfig+0x1b0>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ea:	4419      	add	r1, r3
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009a      	lsls	r2, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005102:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <UART_SetConfig+0x1b0>)
 8005104:	fba3 0302 	umull	r0, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	2064      	movs	r0, #100	; 0x64
 800510c:	fb00 f303 	mul.w	r3, r0, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	3332      	adds	r3, #50	; 0x32
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <UART_SetConfig+0x1b0>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f003 020f 	and.w	r2, r3, #15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	440a      	add	r2, r1
 8005128:	609a      	str	r2, [r3, #8]
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40013800 	.word	0x40013800
 8005138:	51eb851f 	.word	0x51eb851f

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	2500      	movs	r5, #0
 8005140:	4e0c      	ldr	r6, [pc, #48]	; (8005174 <__libc_init_array+0x38>)
 8005142:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005144:	1ba4      	subs	r4, r4, r6
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	42a5      	cmp	r5, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	f000 f844 	bl	80051d8 <_init>
 8005150:	2500      	movs	r5, #0
 8005152:	4e0a      	ldr	r6, [pc, #40]	; (800517c <__libc_init_array+0x40>)
 8005154:	4c0a      	ldr	r4, [pc, #40]	; (8005180 <__libc_init_array+0x44>)
 8005156:	1ba4      	subs	r4, r4, r6
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	42a5      	cmp	r5, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005164:	4798      	blx	r3
 8005166:	3501      	adds	r5, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800516e:	4798      	blx	r3
 8005170:	3501      	adds	r5, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	08005d14 	.word	0x08005d14
 8005178:	08005d14 	.word	0x08005d14
 800517c:	08005d14 	.word	0x08005d14
 8005180:	08005d18 	.word	0x08005d18

08005184 <memcmp>:
 8005184:	b530      	push	{r4, r5, lr}
 8005186:	2400      	movs	r4, #0
 8005188:	42a2      	cmp	r2, r4
 800518a:	d101      	bne.n	8005190 <memcmp+0xc>
 800518c:	2000      	movs	r0, #0
 800518e:	e007      	b.n	80051a0 <memcmp+0x1c>
 8005190:	5d03      	ldrb	r3, [r0, r4]
 8005192:	3401      	adds	r4, #1
 8005194:	190d      	adds	r5, r1, r4
 8005196:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800519a:	42ab      	cmp	r3, r5
 800519c:	d0f4      	beq.n	8005188 <memcmp+0x4>
 800519e:	1b58      	subs	r0, r3, r5
 80051a0:	bd30      	pop	{r4, r5, pc}

080051a2 <memcpy>:
 80051a2:	b510      	push	{r4, lr}
 80051a4:	1e43      	subs	r3, r0, #1
 80051a6:	440a      	add	r2, r1
 80051a8:	4291      	cmp	r1, r2
 80051aa:	d100      	bne.n	80051ae <memcpy+0xc>
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b6:	e7f7      	b.n	80051a8 <memcpy+0x6>

080051b8 <memset>:
 80051b8:	4603      	mov	r3, r0
 80051ba:	4402      	add	r2, r0
 80051bc:	4293      	cmp	r3, r2
 80051be:	d100      	bne.n	80051c2 <memset+0xa>
 80051c0:	4770      	bx	lr
 80051c2:	f803 1b01 	strb.w	r1, [r3], #1
 80051c6:	e7f9      	b.n	80051bc <memset+0x4>

080051c8 <strcpy>:
 80051c8:	4603      	mov	r3, r0
 80051ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ce:	f803 2b01 	strb.w	r2, [r3], #1
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	d1f9      	bne.n	80051ca <strcpy+0x2>
 80051d6:	4770      	bx	lr

080051d8 <_init>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr

080051e4 <_fini>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	bf00      	nop
 80051e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ea:	bc08      	pop	{r3}
 80051ec:	469e      	mov	lr, r3
 80051ee:	4770      	bx	lr
