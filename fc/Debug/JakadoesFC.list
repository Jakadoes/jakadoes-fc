
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001098  2000000c  08002c34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010a4  08002c34  000210a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0a0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d60  00000000  00000000  0002d0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  0002ee38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d58  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006839  00000000  00000000  000309c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0b6  00000000  00000000  000371f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b94e2  00000000  00000000  000432af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb4  00000000  00000000  000fc80c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf8 	.word	0x08002bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002bf8 	.word	0x08002bf8

0800014c <Cam_Is_Ready>:
uint32_t handle_photo_index = 0;
uint8_t  handle_photo_length = 10;
uint8_t  handle_photo_stop = 3000;

uint8_t Cam_Is_Ready()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	//returns HAL address
	uint8_t cam_ready_status = I2c_IsDeviceReady(CAM_I2C_ADDRESS);
 8000152:	2026      	movs	r0, #38	; 0x26
 8000154:	f000 f8e8 	bl	8000328 <I2c_IsDeviceReady>
 8000158:	4603      	mov	r3, r0
 800015a:	71fb      	strb	r3, [r7, #7]
	return cam_ready_status;
 800015c:	79fb      	ldrb	r3, [r7, #7]
}
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}
	...

08000168 <Cam_Poll_Image>:
		 //very important to send and expect to recieve the same amount of bytes, otherwise EIO and busy lock down errors
	//}
}

void Cam_Poll_Image(uint32_t startIndex, uint8_t numBytes)
{//receives image buffer data starting at startIndex of length numBytes
 8000168:	b5b0      	push	{r4, r5, r7, lr}
 800016a:	b088      	sub	sp, #32
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	460b      	mov	r3, r1
 8000172:	70fb      	strb	r3, [r7, #3]
 8000174:	466b      	mov	r3, sp
 8000176:	461d      	mov	r5, r3
	uint8_t command = CAM_COM_POLL_IMAGE;
 8000178:	2313      	movs	r3, #19
 800017a:	74fb      	strb	r3, [r7, #19]
	uint8_t details[5];//format [startIndex [4:1] , numBytes[0]
		details[4] = (uint8_t) (startIndex >> 8*3) & 0x000F;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	0e1b      	lsrs	r3, r3, #24
 8000180:	b2db      	uxtb	r3, r3
 8000182:	f003 030f 	and.w	r3, r3, #15
 8000186:	b2db      	uxtb	r3, r3
 8000188:	743b      	strb	r3, [r7, #16]
		details[3] = (uint8_t) (startIndex >> 8*2) & 0x000F;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	0c1b      	lsrs	r3, r3, #16
 800018e:	b2db      	uxtb	r3, r3
 8000190:	f003 030f 	and.w	r3, r3, #15
 8000194:	b2db      	uxtb	r3, r3
 8000196:	73fb      	strb	r3, [r7, #15]
		details[2] = (uint8_t) (startIndex >> 8*1) & 0x000F;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	0a1b      	lsrs	r3, r3, #8
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f003 030f 	and.w	r3, r3, #15
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	73bb      	strb	r3, [r7, #14]
		details[1] = (uint8_t) startIndex & 0x000F;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	737b      	strb	r3, [r7, #13]
		details[0] = numBytes;
 80001b2:	78fb      	ldrb	r3, [r7, #3]
 80001b4:	733b      	strb	r3, [r7, #12]
	uint8_t test = 0x22;
 80001b6:	2322      	movs	r3, #34	; 0x22
 80001b8:	72fb      	strb	r3, [r7, #11]
	Radio_Transmit_Raw(&test, 1);
 80001ba:	f107 030b 	add.w	r3, r7, #11
 80001be:	2101      	movs	r1, #1
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fa83 	bl	80006cc <Radio_Transmit_Raw>
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);//transmit image command
 80001c6:	f107 0313 	add.w	r3, r7, #19
 80001ca:	2201      	movs	r2, #1
 80001cc:	4619      	mov	r1, r3
 80001ce:	2026      	movs	r0, #38	; 0x26
 80001d0:	f000 f8c2 	bl	8000358 <I2c_Master_Transmit>
	//HAL_Delay(500);
	test = 0x33;
 80001d4:	2333      	movs	r3, #51	; 0x33
 80001d6:	72fb      	strb	r3, [r7, #11]
	Radio_Transmit_Raw(&test, 1);
 80001d8:	f107 030b 	add.w	r3, r7, #11
 80001dc:	2101      	movs	r1, #1
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fa74 	bl	80006cc <Radio_Transmit_Raw>
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &details, 5);//transmit details of requested transmission
 80001e4:	f107 030c 	add.w	r3, r7, #12
 80001e8:	2205      	movs	r2, #5
 80001ea:	4619      	mov	r1, r3
 80001ec:	2026      	movs	r0, #38	; 0x26
 80001ee:	f000 f8b3 	bl	8000358 <I2c_Master_Transmit>
	HAL_Delay(600);//this delay may be needed
 80001f2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80001f6:	f000 fc73 	bl	8000ae0 <HAL_Delay>
	test = 0x44;
 80001fa:	2344      	movs	r3, #68	; 0x44
 80001fc:	72fb      	strb	r3, [r7, #11]
	Radio_Transmit_Raw(&test, 1);
 80001fe:	f107 030b 	add.w	r3, r7, #11
 8000202:	2101      	movs	r1, #1
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fa61 	bl	80006cc <Radio_Transmit_Raw>
	uint8_t temp_buffer[numBytes];//cannot index rx_buffer directly here!
 800020a:	78f8      	ldrb	r0, [r7, #3]
 800020c:	4603      	mov	r3, r0
 800020e:	3b01      	subs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
 8000212:	b2c1      	uxtb	r1, r0
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	f04f 0300 	mov.w	r3, #0
 800021c:	f04f 0400 	mov.w	r4, #0
 8000220:	00d4      	lsls	r4, r2, #3
 8000222:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000226:	00cb      	lsls	r3, r1, #3
 8000228:	b2c1      	uxtb	r1, r0
 800022a:	f04f 0200 	mov.w	r2, #0
 800022e:	f04f 0300 	mov.w	r3, #0
 8000232:	f04f 0400 	mov.w	r4, #0
 8000236:	00d4      	lsls	r4, r2, #3
 8000238:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	4603      	mov	r3, r0
 8000240:	3307      	adds	r3, #7
 8000242:	08db      	lsrs	r3, r3, #3
 8000244:	00db      	lsls	r3, r3, #3
 8000246:	ebad 0d03 	sub.w	sp, sp, r3
 800024a:	466b      	mov	r3, sp
 800024c:	3300      	adds	r3, #0
 800024e:	617b      	str	r3, [r7, #20]
	I2c_Master_Receive(CAM_I2C_ADDRESS, &temp_buffer, numBytes);//receive requested information
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	78fa      	ldrb	r2, [r7, #3]
 8000254:	b292      	uxth	r2, r2
 8000256:	4619      	mov	r1, r3
 8000258:	2026      	movs	r0, #38	; 0x26
 800025a:	f000 f899 	bl	8000390 <I2c_Master_Receive>
	Radio_Transmit_Raw(&test, 1);
 800025e:	f107 030b 	add.w	r3, r7, #11
 8000262:	2101      	movs	r1, #1
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fa31 	bl	80006cc <Radio_Transmit_Raw>
	///transfer temp to photo buffer
	for (uint32_t i=0; i<numBytes; i++)
 800026a:	2300      	movs	r3, #0
 800026c:	61fb      	str	r3, [r7, #28]
 800026e:	e00b      	b.n	8000288 <Cam_Poll_Image+0x120>
	{
		cam_photo_rx_buffer[startIndex + i] = temp_buffer[i];
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	4413      	add	r3, r2
 8000276:	6979      	ldr	r1, [r7, #20]
 8000278:	69fa      	ldr	r2, [r7, #28]
 800027a:	440a      	add	r2, r1
 800027c:	7811      	ldrb	r1, [r2, #0]
 800027e:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <Cam_Poll_Image+0x13c>)
 8000280:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i=0; i<numBytes; i++)
 8000282:	69fb      	ldr	r3, [r7, #28]
 8000284:	3301      	adds	r3, #1
 8000286:	61fb      	str	r3, [r7, #28]
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	69fa      	ldr	r2, [r7, #28]
 800028c:	429a      	cmp	r2, r3
 800028e:	d3ef      	bcc.n	8000270 <Cam_Poll_Image+0x108>
	}
	HAL_Delay(500);
 8000290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000294:	f000 fc24 	bl	8000ae0 <HAL_Delay>
 8000298:	46ad      	mov	sp, r5
}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bdb0      	pop	{r4, r5, r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000007c 	.word	0x2000007c

080002a8 <Cam_Transmit_Photo_Debug>:
	strncpy(&photo_data, &cam_photo_rx_buffer[startIndex], numBytes);
	//Radio_Transmit_Raw(&photo_data, numBytes);
	MAV_send_File_Transfer_Protocol(&photo_data, numBytes);
}
void Cam_Transmit_Photo_Debug(uint32_t startIndex, uint8_t numBytes)
{//transmits specified photodata as raw serial data (no mavlink)
 80002a8:	b5b0      	push	{r4, r5, r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
 80002b4:	466b      	mov	r3, sp
 80002b6:	461d      	mov	r5, r3
	uint8_t photo_data[numBytes];
 80002b8:	78f8      	ldrb	r0, [r7, #3]
 80002ba:	4603      	mov	r3, r0
 80002bc:	3b01      	subs	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	b2c1      	uxtb	r1, r0
 80002c2:	f04f 0200 	mov.w	r2, #0
 80002c6:	f04f 0300 	mov.w	r3, #0
 80002ca:	f04f 0400 	mov.w	r4, #0
 80002ce:	00d4      	lsls	r4, r2, #3
 80002d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002d4:	00cb      	lsls	r3, r1, #3
 80002d6:	b2c1      	uxtb	r1, r0
 80002d8:	f04f 0200 	mov.w	r2, #0
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	f04f 0400 	mov.w	r4, #0
 80002e4:	00d4      	lsls	r4, r2, #3
 80002e6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002ea:	00cb      	lsls	r3, r1, #3
 80002ec:	4603      	mov	r3, r0
 80002ee:	3307      	adds	r3, #7
 80002f0:	08db      	lsrs	r3, r3, #3
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	ebad 0d03 	sub.w	sp, sp, r3
 80002f8:	466b      	mov	r3, sp
 80002fa:	3300      	adds	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
	strncpy(&photo_data, &cam_photo_rx_buffer[startIndex], numBytes);
 80002fe:	68b8      	ldr	r0, [r7, #8]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <Cam_Transmit_Photo_Debug+0x7c>)
 8000304:	4413      	add	r3, r2
 8000306:	78fa      	ldrb	r2, [r7, #3]
 8000308:	4619      	mov	r1, r3
 800030a:	f002 fc5f 	bl	8002bcc <strncpy>
	//Radio_Transmit_Raw(&photo_data, numBytes);
	Radio_Transmit_Raw(&photo_data, numBytes);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	78fa      	ldrb	r2, [r7, #3]
 8000312:	4611      	mov	r1, r2
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f9d9 	bl	80006cc <Radio_Transmit_Raw>
 800031a:	46ad      	mov	sp, r5
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bdb0      	pop	{r4, r5, r7, pc}
 8000324:	2000007c 	.word	0x2000007c

08000328 <I2c_IsDeviceReady>:
I2C_HandleTypeDef hi2c2;
#define I2C_TRIALS_DEFAULT 40
#define I2C_TIMEOUT_DEFAULT 2000

uint8_t I2c_IsDeviceReady(uint8_t Address)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	b29b      	uxth	r3, r3
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	81fb      	strh	r3, [r7, #14]
	//uint16_t devAddress = 0b0000000001110111;
	uint8_t test[2];
	//test[1] = devAddress & 0xff;
	//test[0] = devAddress >>8;
	//Radio_Transmit_Raw(&test, 2);
	return HAL_I2C_IsDeviceReady(&hi2c2, devAddress, I2C_TRIALS_DEFAULT, I2C_TIMEOUT_DEFAULT);
 800033a:	89f9      	ldrh	r1, [r7, #14]
 800033c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000340:	2228      	movs	r2, #40	; 0x28
 8000342:	4804      	ldr	r0, [pc, #16]	; (8000354 <I2c_IsDeviceReady+0x2c>)
 8000344:	f001 fa98 	bl	8001878 <HAL_I2C_IsDeviceReady>
 8000348:	4603      	mov	r3, r0
}
 800034a:	4618      	mov	r0, r3
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000028 	.word	0x20000028

08000358 <I2c_Master_Transmit>:

void I2c_Master_Transmit(uint8_t Address, uint8_t* message, uint16_t messageSize)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af02      	add	r7, sp, #8
 800035e:	4603      	mov	r3, r0
 8000360:	6039      	str	r1, [r7, #0]
 8000362:	71fb      	strb	r3, [r7, #7]
 8000364:	4613      	mov	r3, r2
 8000366:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left once before use (check HAL documentation)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	b29b      	uxth	r3, r3
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, devAddress, message, messageSize, I2C_TIMEOUT_DEFAULT);
 8000370:	88ba      	ldrh	r2, [r7, #4]
 8000372:	89f9      	ldrh	r1, [r7, #14]
 8000374:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	4613      	mov	r3, r2
 800037c:	683a      	ldr	r2, [r7, #0]
 800037e:	4803      	ldr	r0, [pc, #12]	; (800038c <I2c_Master_Transmit+0x34>)
 8000380:	f000 ff4e 	bl	8001220 <HAL_I2C_Master_Transmit>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000028 	.word	0x20000028

08000390 <I2c_Master_Receive>:

void I2c_Master_Receive(uint8_t Address, uint8_t* messageDestination, uint16_t messageSize)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af02      	add	r7, sp, #8
 8000396:	4603      	mov	r3, r0
 8000398:	6039      	str	r1, [r7, #0]
 800039a:	71fb      	strb	r3, [r7, #7]
 800039c:	4613      	mov	r3, r2
 800039e:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Receive(&hi2c2, devAddress, messageDestination, messageSize, I2C_TIMEOUT_DEFAULT);
 80003a8:	88ba      	ldrh	r2, [r7, #4]
 80003aa:	89f9      	ldrh	r1, [r7, #14]
 80003ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	4613      	mov	r3, r2
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <I2c_Master_Receive+0x34>)
 80003b8:	f001 f830 	bl	800141c <HAL_I2C_Master_Receive>
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000028 	.word	0x20000028

080003c8 <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08a      	sub	sp, #40	; 0x28
 80003cc:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 80003ce:	f000 fb25 	bl	8000a1c <HAL_Init>
	MX_GPIO_Init();
 80003d2:	f000 f937 	bl	8000644 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80003d6:	f000 f90b 	bl	80005f0 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 80003da:	f000 f88d 	bl	80004f8 <MX_TIM4_Init>
	MX_I2C2_Init();
 80003de:	f000 f85d 	bl	800049c <MX_I2C2_Init>
	//    1, // System ID2 (1-255)
	//    1  // Component ID (a MAV_COMPONENT value)
	//};
	//Motor_Arm();
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]
	char tx_buffer[4] = "Hl\r\n";
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <main+0xc0>)
 80003e4:	623b      	str	r3, [r7, #32]
	char rx_buffer[4] = "coef";
 80003e6:	4b29      	ldr	r3, [pc, #164]	; (800048c <main+0xc4>)
 80003e8:	61fb      	str	r3, [r7, #28]
	//uint8_t payload_test[10] = {1,2,3,4,5,6,7,8,9,10};
	uint8_t payload_test[10];
	for (uint8_t i=0; i<10;i++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80003f0:	e00f      	b.n	8000412 <main+0x4a>
	{
		payload_test[i] = i+1;
 80003f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80003f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80003fa:	3201      	adds	r2, #1
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000402:	440b      	add	r3, r1
 8000404:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (uint8_t i=0; i<10;i++)
 8000408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800040c:	3301      	adds	r3, #1
 800040e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000416:	2b09      	cmp	r3, #9
 8000418:	d9eb      	bls.n	80003f2 <main+0x2a>
	}
	uint8_t test[5] = {0x55, 0x55, 0x55, 0x55, 0x55};
 800041a:	4a1d      	ldr	r2, [pc, #116]	; (8000490 <main+0xc8>)
 800041c:	f107 0308 	add.w	r3, r7, #8
 8000420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000424:	6018      	str	r0, [r3, #0]
 8000426:	3304      	adds	r3, #4
 8000428:	7019      	strb	r1, [r3, #0]
	uint8_t baro_flag = 5;
 800042a:	2305      	movs	r3, #5
 800042c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cam_photo_rx_buffer[10] = 0x44;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <main+0xcc>)
 8000432:	2244      	movs	r2, #68	; 0x44
 8000434:	729a      	strb	r2, [r3, #10]
	cam_photo_rx_buffer[11] = 0x55;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <main+0xcc>)
 8000438:	2255      	movs	r2, #85	; 0x55
 800043a:	72da      	strb	r2, [r3, #11]
	cam_photo_rx_buffer[12] = 0x66;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <main+0xcc>)
 800043e:	2266      	movs	r2, #102	; 0x66
 8000440:	731a      	strb	r2, [r3, #12]
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2108      	movs	r1, #8
 8000446:	4814      	ldr	r0, [pc, #80]	; (8000498 <main+0xd0>)
 8000448:	f000 fdaa 	bl	8000fa0 <HAL_GPIO_WritePin>
		//HAL_Delay(1000);
		//**************end of FTP test code*************
		//****start of cam test code****
		//*

		uint8_t cam_status = Cam_Is_Ready();
 800044c:	f7ff fe7e 	bl	800014c <Cam_Is_Ready>
 8000450:	4603      	mov	r3, r0
 8000452:	71fb      	strb	r3, [r7, #7]
		Radio_Transmit_Raw(&cam_status, 1);
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	2101      	movs	r1, #1
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f937 	bl	80006cc <Radio_Transmit_Raw>
		HAL_Delay(50);
 800045e:	2032      	movs	r0, #50	; 0x32
 8000460:	f000 fb3e 	bl	8000ae0 <HAL_Delay>
		if(Cam_Is_Ready() == HAL_OK)
 8000464:	f7ff fe72 	bl	800014c <Cam_Is_Ready>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d103      	bne.n	8000476 <main+0xae>
		{
			//Cam_Poll_Alert();
			Cam_Poll_Image(10, 5);
 800046e:	2105      	movs	r1, #5
 8000470:	200a      	movs	r0, #10
 8000472:	f7ff fe79 	bl	8000168 <Cam_Poll_Image>
		}
		//Radio_Transmit_Raw(&cam_alert_rx_buffer, 1);
		Cam_Transmit_Photo_Debug(10, 5);
 8000476:	2105      	movs	r1, #5
 8000478:	200a      	movs	r0, #10
 800047a:	f7ff ff15 	bl	80002a8 <Cam_Transmit_Photo_Debug>
		//Cam_Transmit_Alert();
		HAL_Delay(100);
 800047e:	2064      	movs	r0, #100	; 0x64
 8000480:	f000 fb2e 	bl	8000ae0 <HAL_Delay>
	while(1){
 8000484:	e7e2      	b.n	800044c <main+0x84>
 8000486:	bf00      	nop
 8000488:	0a0d6c48 	.word	0x0a0d6c48
 800048c:	66656f63 	.word	0x66656f63
 8000490:	08002c10 	.word	0x08002c10
 8000494:	2000007c 	.word	0x2000007c
 8000498:	40010c00 	.word	0x40010c00

0800049c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_I2C2_Init+0x50>)
 80004a2:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <MX_I2C2_Init+0x54>)
 80004a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_I2C2_Init+0x50>)
 80004a8:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <MX_I2C2_Init+0x58>)
 80004aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_I2C2_Init+0x50>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_I2C2_Init+0x50>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_I2C2_Init+0x50>)
 80004ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <MX_I2C2_Init+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_I2C2_Init+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <MX_I2C2_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_I2C2_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <MX_I2C2_Init+0x50>)
 80004da:	f000 fd79 	bl	8000fd0 <HAL_I2C_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004e4:	f000 f8ec 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000028 	.word	0x20000028
 80004f0:	40005800 	.word	0x40005800
 80004f4:	000186a0 	.word	0x000186a0

080004f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800051a:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <MX_TIM4_Init+0xf0>)
 800051c:	4a33      	ldr	r2, [pc, #204]	; (80005ec <MX_TIM4_Init+0xf4>)
 800051e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000520:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <MX_TIM4_Init+0xf0>)
 8000522:	220a      	movs	r2, #10
 8000524:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <MX_TIM4_Init+0xf0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <MX_TIM4_Init+0xf0>)
 800052e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000532:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_TIM4_Init+0xf0>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_TIM4_Init+0xf0>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000540:	4829      	ldr	r0, [pc, #164]	; (80005e8 <MX_TIM4_Init+0xf0>)
 8000542:	f001 fdf5 	bl	8002130 <HAL_TIM_PWM_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800054c:	f000 f8b8 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	4619      	mov	r1, r3
 800055e:	4822      	ldr	r0, [pc, #136]	; (80005e8 <MX_TIM4_Init+0xf0>)
 8000560:	f002 f8c2 	bl	80026e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800056a:	f000 f8a9 	bl	80006c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056e:	2360      	movs	r3, #96	; 0x60
 8000570:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 8000572:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	4818      	ldr	r0, [pc, #96]	; (80005e8 <MX_TIM4_Init+0xf0>)
 8000588:	f001 fdfe 	bl	8002188 <HAL_TIM_PWM_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000592:	f000 f895 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2204      	movs	r2, #4
 800059a:	4619      	mov	r1, r3
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <MX_TIM4_Init+0xf0>)
 800059e:	f001 fdf3 	bl	8002188 <HAL_TIM_PWM_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80005a8:	f000 f88a 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2208      	movs	r2, #8
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <MX_TIM4_Init+0xf0>)
 80005b4:	f001 fde8 	bl	8002188 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80005be:	f000 f87f 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	220c      	movs	r2, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <MX_TIM4_Init+0xf0>)
 80005ca:	f001 fddd 	bl	8002188 <HAL_TIM_PWM_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80005d4:	f000 f874 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <MX_TIM4_Init+0xf0>)
 80005da:	f000 f91b 	bl	8000814 <HAL_TIM_MspPostInit>

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20001020 	.word	0x20001020
 80005ec:	40000800 	.word	0x40000800

080005f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART1_UART_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_USART1_UART_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600*2;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_USART1_UART_Init+0x4c>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART1_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000628:	f002 f8a2 	bl	8002770 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000632:	f000 f845 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20001060 	.word	0x20001060
 8000640:	40013800 	.word	0x40013800

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x74>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <MX_GPIO_Init+0x74>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_GPIO_Init+0x74>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x74>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x74>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x74>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2108      	movs	r1, #8
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x78>)
 800068e:	f000 fc87 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000692:	2308      	movs	r3, #8
 8000694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2302      	movs	r3, #2
 80006a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4619      	mov	r1, r3
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x78>)
 80006aa:	f000 fb1f 	bl	8000cec <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010c00 	.word	0x40010c00

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 80006d8:	887a      	ldrh	r2, [r7, #2]
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <Radio_Transmit_Raw+0x24>)
 80006e2:	f002 f892 	bl	800280a <HAL_UART_Transmit>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20001060 	.word	0x20001060

080006f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_MspInit+0x5c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x5c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_MspInit+0x60>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_MspInit+0x60>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <HAL_I2C_MspInit+0x74>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d124      	bne.n	80007c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_I2C_MspInit+0x78>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <HAL_I2C_MspInit+0x78>)
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_I2C_MspInit+0x78>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000790:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000794:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000796:	2312      	movs	r3, #18
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <HAL_I2C_MspInit+0x7c>)
 80007a6:	f000 faa1 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_I2C_MspInit+0x78>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_I2C_MspInit+0x78>)
 80007b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_I2C_MspInit+0x78>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40005800 	.word	0x40005800
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_TIM_PWM_MspInit+0x34>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d10b      	bne.n	8000802 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_TIM_PWM_MspInit+0x38>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_TIM_PWM_MspInit+0x38>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_TIM_PWM_MspInit+0x38>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40000800 	.word	0x40000800
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <HAL_TIM_MspPostInit+0x5c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d118      	bne.n	8000866 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_TIM_MspPostInit+0x60>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_TIM_MspPostInit+0x60>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_TIM_MspPostInit+0x60>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800084c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2302      	movs	r3, #2
 8000858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_TIM_MspPostInit+0x64>)
 8000862:	f000 fa43 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40000800 	.word	0x40000800
 8000874:	40021000 	.word	0x40021000
 8000878:	40010c00 	.word	0x40010c00

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <HAL_UART_MspInit+0x8c>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d131      	bne.n	8000900 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_UART_MspInit+0x90>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a1a      	ldr	r2, [pc, #104]	; (800090c <HAL_UART_MspInit+0x90>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x90>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x90>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_UART_MspInit+0x90>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_UART_MspInit+0x90>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008e2:	f000 fa03 	bl	8000cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008fc:	f000 f9f6 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000
 8000910:	40010800 	.word	0x40010800

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <HardFault_Handler+0x4>

08000926 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <BusFault_Handler+0x4>

08000932 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <UsageFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f8a2 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <SystemInit+0x5c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <SystemInit+0x5c>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <SystemInit+0x5c>)
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	4911      	ldr	r1, [pc, #68]	; (80009c4 <SystemInit+0x5c>)
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <SystemInit+0x60>)
 8000980:	4013      	ands	r3, r2
 8000982:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <SystemInit+0x5c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <SystemInit+0x5c>)
 800098a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800098e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000992:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <SystemInit+0x5c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <SystemInit+0x5c>)
 800099a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <SystemInit+0x5c>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <SystemInit+0x5c>)
 80009a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SystemInit+0x5c>)
 80009ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SystemInit+0x64>)
 80009b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	f8ff0000 	.word	0xf8ff0000
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009d2:	e003      	b.n	80009dc <LoopCopyDataInit>

080009d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009da:	3104      	adds	r1, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009e4:	d3f6      	bcc.n	80009d4 <CopyDataInit>
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009e8:	e002      	b.n	80009f0 <LoopFillZerobss>

080009ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009ec:	f842 3b04 	str.w	r3, [r2], #4

080009f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009f4:	d3f9      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009f6:	f7ff ffb7 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 f8c3 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fce3 	bl	80003c8 <main>
  bx lr
 8000a02:	4770      	bx	lr
  ldr r3, =_sidata
 8000a04:	08002c28 	.word	0x08002c28
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a14:	200010a4 	.word	0x200010a4

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x28>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f929 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f808 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff fe5c 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x54>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x58>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f933 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00e      	b.n	8000a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d80a      	bhi.n	8000a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 f909 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_InitTick+0x5c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	200010a0 	.word	0x200010a0

08000acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	200010a0 	.word	0x200010a0

08000ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff fff0 	bl	8000acc <HAL_GetTick>
 8000aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af8:	d005      	beq.n	8000b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_Delay+0x40>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b06:	bf00      	nop
 8000b08:	f7ff ffe0 	bl	8000acc <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8f7      	bhi.n	8000b08 <HAL_Delay+0x28>
  {
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000008 	.word	0x20000008

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff90 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff49 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff5e 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff90 	bl	8000bdc <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5f 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffb0 	bl	8000c40 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b08b      	sub	sp, #44	; 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e127      	b.n	8000f50 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d00:	2201      	movs	r2, #1
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f040 8116 	bne.w	8000f4a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b12      	cmp	r3, #18
 8000d24:	d034      	beq.n	8000d90 <HAL_GPIO_Init+0xa4>
 8000d26:	2b12      	cmp	r3, #18
 8000d28:	d80d      	bhi.n	8000d46 <HAL_GPIO_Init+0x5a>
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d02b      	beq.n	8000d86 <HAL_GPIO_Init+0x9a>
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d804      	bhi.n	8000d3c <HAL_GPIO_Init+0x50>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d031      	beq.n	8000d9a <HAL_GPIO_Init+0xae>
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d01c      	beq.n	8000d74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3a:	e048      	b.n	8000dce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d043      	beq.n	8000dc8 <HAL_GPIO_Init+0xdc>
 8000d40:	2b11      	cmp	r3, #17
 8000d42:	d01b      	beq.n	8000d7c <HAL_GPIO_Init+0x90>
          break;
 8000d44:	e043      	b.n	8000dce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d46:	4a89      	ldr	r2, [pc, #548]	; (8000f6c <HAL_GPIO_Init+0x280>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d026      	beq.n	8000d9a <HAL_GPIO_Init+0xae>
 8000d4c:	4a87      	ldr	r2, [pc, #540]	; (8000f6c <HAL_GPIO_Init+0x280>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d806      	bhi.n	8000d60 <HAL_GPIO_Init+0x74>
 8000d52:	4a87      	ldr	r2, [pc, #540]	; (8000f70 <HAL_GPIO_Init+0x284>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d020      	beq.n	8000d9a <HAL_GPIO_Init+0xae>
 8000d58:	4a86      	ldr	r2, [pc, #536]	; (8000f74 <HAL_GPIO_Init+0x288>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d01d      	beq.n	8000d9a <HAL_GPIO_Init+0xae>
          break;
 8000d5e:	e036      	b.n	8000dce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d60:	4a85      	ldr	r2, [pc, #532]	; (8000f78 <HAL_GPIO_Init+0x28c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d019      	beq.n	8000d9a <HAL_GPIO_Init+0xae>
 8000d66:	4a85      	ldr	r2, [pc, #532]	; (8000f7c <HAL_GPIO_Init+0x290>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d016      	beq.n	8000d9a <HAL_GPIO_Init+0xae>
 8000d6c:	4a84      	ldr	r2, [pc, #528]	; (8000f80 <HAL_GPIO_Init+0x294>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0xae>
          break;
 8000d72:	e02c      	b.n	8000dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e028      	b.n	8000dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	3304      	adds	r3, #4
 8000d82:	623b      	str	r3, [r7, #32]
          break;
 8000d84:	e023      	b.n	8000dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e01e      	b.n	8000dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	330c      	adds	r3, #12
 8000d96:	623b      	str	r3, [r7, #32]
          break;
 8000d98:	e019      	b.n	8000dce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d102      	bne.n	8000da8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000da2:	2304      	movs	r3, #4
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e012      	b.n	8000dce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d105      	bne.n	8000dbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db0:	2308      	movs	r3, #8
 8000db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	611a      	str	r2, [r3, #16]
          break;
 8000dba:	e008      	b.n	8000dce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	615a      	str	r2, [r3, #20]
          break;
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
          break;
 8000dcc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2bff      	cmp	r3, #255	; 0xff
 8000dd2:	d801      	bhi.n	8000dd8 <HAL_GPIO_Init+0xec>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	e001      	b.n	8000ddc <HAL_GPIO_Init+0xf0>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	2bff      	cmp	r3, #255	; 0xff
 8000de2:	d802      	bhi.n	8000dea <HAL_GPIO_Init+0xfe>
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x104>
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3b08      	subs	r3, #8
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	210f      	movs	r1, #15
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	401a      	ands	r2, r3
 8000e02:	6a39      	ldr	r1, [r7, #32]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 8096 	beq.w	8000f4a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e1e:	4b59      	ldr	r3, [pc, #356]	; (8000f84 <HAL_GPIO_Init+0x298>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a58      	ldr	r2, [pc, #352]	; (8000f84 <HAL_GPIO_Init+0x298>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <HAL_GPIO_Init+0x298>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e36:	4a54      	ldr	r2, [pc, #336]	; (8000f88 <HAL_GPIO_Init+0x29c>)
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4b      	ldr	r2, [pc, #300]	; (8000f8c <HAL_GPIO_Init+0x2a0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x19e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4a      	ldr	r2, [pc, #296]	; (8000f90 <HAL_GPIO_Init+0x2a4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x19a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <HAL_GPIO_Init+0x2a8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x196>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a48      	ldr	r2, [pc, #288]	; (8000f98 <HAL_GPIO_Init+0x2ac>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x192>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x1a0>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x1a0>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x1a0>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x1a0>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e9c:	493a      	ldr	r1, [pc, #232]	; (8000f88 <HAL_GPIO_Init+0x29c>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb6:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4938      	ldr	r1, [pc, #224]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4933      	ldr	r1, [pc, #204]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	492e      	ldr	r1, [pc, #184]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4929      	ldr	r1, [pc, #164]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	4924      	ldr	r1, [pc, #144]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	608b      	str	r3, [r1, #8]
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	491f      	ldr	r1, [pc, #124]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	491a      	ldr	r1, [pc, #104]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4915      	ldr	r1, [pc, #84]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f aed0 	bne.w	8000d00 <HAL_GPIO_Init+0x14>
  }
}
 8000f60:	bf00      	nop
 8000f62:	372c      	adds	r7, #44	; 0x2c
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	10120000 	.word	0x10120000
 8000f78:	10310000 	.word	0x10310000
 8000f7c:	10320000 	.word	0x10320000
 8000f80:	10220000 	.word	0x10220000
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40011000 	.word	0x40011000
 8000f98:	40011400 	.word	0x40011400
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	611a      	str	r2, [r3, #16]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e10f      	b.n	8001202 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fbae 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	; 0x24
 8001000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001014:	f001 f864 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
 8001018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a7b      	ldr	r2, [pc, #492]	; (800120c <HAL_I2C_Init+0x23c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d807      	bhi.n	8001034 <HAL_I2C_Init+0x64>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <HAL_I2C_Init+0x240>)
 8001028:	4293      	cmp	r3, r2
 800102a:	bf94      	ite	ls
 800102c:	2301      	movls	r3, #1
 800102e:	2300      	movhi	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	e006      	b.n	8001042 <HAL_I2C_Init+0x72>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4a77      	ldr	r2, [pc, #476]	; (8001214 <HAL_I2C_Init+0x244>)
 8001038:	4293      	cmp	r3, r2
 800103a:	bf94      	ite	ls
 800103c:	2301      	movls	r3, #1
 800103e:	2300      	movhi	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0db      	b.n	8001202 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4a72      	ldr	r2, [pc, #456]	; (8001218 <HAL_I2C_Init+0x248>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9b      	lsrs	r3, r3, #18
 8001054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4a64      	ldr	r2, [pc, #400]	; (800120c <HAL_I2C_Init+0x23c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d802      	bhi.n	8001084 <HAL_I2C_Init+0xb4>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	e009      	b.n	8001098 <HAL_I2C_Init+0xc8>
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	4a63      	ldr	r2, [pc, #396]	; (800121c <HAL_I2C_Init+0x24c>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	099b      	lsrs	r3, r3, #6
 8001096:	3301      	adds	r3, #1
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	430b      	orrs	r3, r1
 800109e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4956      	ldr	r1, [pc, #344]	; (800120c <HAL_I2C_Init+0x23c>)
 80010b4:	428b      	cmp	r3, r1
 80010b6:	d80d      	bhi.n	80010d4 <HAL_I2C_Init+0x104>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1e59      	subs	r1, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c6:	3301      	adds	r3, #1
 80010c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	bf38      	it	cc
 80010d0:	2304      	movcc	r3, #4
 80010d2:	e04f      	b.n	8001174 <HAL_I2C_Init+0x1a4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <HAL_I2C_Init+0x130>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1e58      	subs	r0, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	440b      	add	r3, r1
 80010ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	e012      	b.n	8001126 <HAL_I2C_Init+0x156>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1e58      	subs	r0, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	0099      	lsls	r1, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Init+0x15e>
 800112a:	2301      	movs	r3, #1
 800112c:	e022      	b.n	8001174 <HAL_I2C_Init+0x1a4>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10e      	bne.n	8001154 <HAL_I2C_Init+0x184>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1e58      	subs	r0, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	440b      	add	r3, r1
 8001144:	fbb0 f3f3 	udiv	r3, r0, r3
 8001148:	3301      	adds	r3, #1
 800114a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001152:	e00f      	b.n	8001174 <HAL_I2C_Init+0x1a4>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1e58      	subs	r0, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6859      	ldr	r1, [r3, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	0099      	lsls	r1, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	6809      	ldr	r1, [r1, #0]
 8001178:	4313      	orrs	r3, r2
 800117a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69da      	ldr	r2, [r3, #28]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6911      	ldr	r1, [r2, #16]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68d2      	ldr	r2, [r2, #12]
 80011ae:	4311      	orrs	r1, r2
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2220      	movs	r2, #32
 80011ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	000186a0 	.word	0x000186a0
 8001210:	001e847f 	.word	0x001e847f
 8001214:	003d08ff 	.word	0x003d08ff
 8001218:	431bde83 	.word	0x431bde83
 800121c:	10624dd3 	.word	0x10624dd3

08001220 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af02      	add	r7, sp, #8
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	461a      	mov	r2, r3
 800122c:	460b      	mov	r3, r1
 800122e:	817b      	strh	r3, [r7, #10]
 8001230:	4613      	mov	r3, r2
 8001232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fc4a 	bl	8000acc <HAL_GetTick>
 8001238:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b20      	cmp	r3, #32
 8001244:	f040 80e0 	bne.w	8001408 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2319      	movs	r3, #25
 800124e:	2201      	movs	r2, #1
 8001250:	4970      	ldr	r1, [pc, #448]	; (8001414 <HAL_I2C_Master_Transmit+0x1f4>)
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 fd5e 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800125e:	2302      	movs	r3, #2
 8001260:	e0d3      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_I2C_Master_Transmit+0x50>
 800126c:	2302      	movs	r3, #2
 800126e:	e0cc      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b01      	cmp	r3, #1
 8001284:	d007      	beq.n	8001296 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2221      	movs	r2, #33	; 0x21
 80012aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2210      	movs	r2, #16
 80012b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	893a      	ldrh	r2, [r7, #8]
 80012c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_I2C_Master_Transmit+0x1f8>)
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012d8:	8979      	ldrh	r1, [r7, #10]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	6a3a      	ldr	r2, [r7, #32]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fbec 	bl	8001abc <I2C_MasterRequestWrite>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e08d      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001304:	e066      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	6a39      	ldr	r1, [r7, #32]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 fdd8 	bl	8001ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00d      	beq.n	8001332 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b04      	cmp	r3, #4
 800131c:	d107      	bne.n	800132e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800132c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06b      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	3b01      	subs	r3, #1
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b04      	cmp	r3, #4
 800136e:	d11b      	bne.n	80013a8 <HAL_I2C_Master_Transmit+0x188>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	d017      	beq.n	80013a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001392:	b29b      	uxth	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	6a39      	ldr	r1, [r7, #32]
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 fdc8 	bl	8001f42 <I2C_WaitOnBTFFlagUntilTimeout>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00d      	beq.n	80013d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d107      	bne.n	80013d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e01a      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d194      	bne.n	8001306 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2220      	movs	r2, #32
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	e000      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001408:	2302      	movs	r3, #2
  }
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	00100002 	.word	0x00100002
 8001418:	ffff0000 	.word	0xffff0000

0800141c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af02      	add	r7, sp, #8
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	817b      	strh	r3, [r7, #10]
 800142c:	4613      	mov	r3, r2
 800142e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff fb4c 	bl	8000acc <HAL_GetTick>
 8001434:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b20      	cmp	r3, #32
 8001440:	f040 8213 	bne.w	800186a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2319      	movs	r3, #25
 800144a:	2201      	movs	r2, #1
 800144c:	497e      	ldr	r1, [pc, #504]	; (8001648 <HAL_I2C_Master_Receive+0x22c>)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fc60 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800145a:	2302      	movs	r3, #2
 800145c:	e206      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_I2C_Master_Receive+0x50>
 8001468:	2302      	movs	r3, #2
 800146a:	e1ff      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d007      	beq.n	8001492 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2222      	movs	r2, #34	; 0x22
 80014a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2210      	movs	r2, #16
 80014ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	893a      	ldrh	r2, [r7, #8]
 80014c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4a5e      	ldr	r2, [pc, #376]	; (800164c <HAL_I2C_Master_Receive+0x230>)
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014d4:	8979      	ldrh	r1, [r7, #10]
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 fb64 	bl	8001ba8 <I2C_MasterRequestRead>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c0      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	623b      	str	r3, [r7, #32]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e194      	b.n	8001844 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	2b01      	cmp	r3, #1
 8001520:	d11d      	bne.n	800155e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001530:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001532:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001558:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800155a:	b662      	cpsie	i
 800155c:	e172      	b.n	8001844 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	2b02      	cmp	r3, #2
 8001564:	d11d      	bne.n	80015a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001576:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800159c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800159e:	b662      	cpsie	i
 80015a0:	e150      	b.n	8001844 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80015c8:	e13c      	b.n	8001844 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	f200 80f5 	bhi.w	80017be <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d123      	bne.n	8001624 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fcef 	bl	8001fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e13d      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001622:	e10f      	b.n	8001844 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	2b02      	cmp	r3, #2
 800162a:	d150      	bne.n	80016ce <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001632:	2200      	movs	r2, #0
 8001634:	4906      	ldr	r1, [pc, #24]	; (8001650 <HAL_I2C_Master_Receive+0x234>)
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 fb6c 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e112      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
 8001646:	bf00      	nop
 8001648:	00100002 	.word	0x00100002
 800164c:	ffff0000 	.word	0xffff0000
 8001650:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001664:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168e:	b29b      	uxth	r3, r3
 8001690:	3b01      	subs	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001698:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016cc:	e0ba      	b.n	8001844 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	2200      	movs	r2, #0
 80016d6:	4967      	ldr	r1, [pc, #412]	; (8001874 <HAL_I2C_Master_Receive+0x458>)
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fb1b 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0c1      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001722:	b29b      	uxth	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	2200      	movs	r2, #0
 8001734:	494f      	ldr	r1, [pc, #316]	; (8001874 <HAL_I2C_Master_Receive+0x458>)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 faec 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e092      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001754:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001788:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017bc:	e042      	b.n	8001844 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fbfe 	bl	8001fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e04c      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b04      	cmp	r3, #4
 8001810:	d118      	bne.n	8001844 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	f47f aebe 	bne.w	80015ca <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800186a:	2302      	movs	r3, #2
  }
}
 800186c:	4618      	mov	r0, r3
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	00010004 	.word	0x00010004

08001878 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	460b      	mov	r3, r1
 8001886:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff f920 	bl	8000acc <HAL_GetTick>
 800188c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800188e:	2301      	movs	r3, #1
 8001890:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b20      	cmp	r3, #32
 800189c:	f040 8105 	bne.w	8001aaa <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2319      	movs	r3, #25
 80018a6:	2201      	movs	r2, #1
 80018a8:	4982      	ldr	r1, [pc, #520]	; (8001ab4 <HAL_I2C_IsDeviceReady+0x23c>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fa32 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80018b6:	2302      	movs	r3, #2
 80018b8:	e0f8      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_I2C_IsDeviceReady+0x50>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e0f1      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x234>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d007      	beq.n	80018ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2224      	movs	r2, #36	; 0x24
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <HAL_I2C_IsDeviceReady+0x240>)
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001920:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f9f0 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0b6      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800194c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff f8bd 	bl	8000acc <HAL_GetTick>
 8001952:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b02      	cmp	r3, #2
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001982:	e025      	b.n	80019d0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001984:	f7ff f8a2 	bl	8000acc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d302      	bcc.n	800199a <HAL_I2C_IsDeviceReady+0x122>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	22a0      	movs	r2, #160	; 0xa0
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2ba0      	cmp	r3, #160	; 0xa0
 80019da:	d005      	beq.n	80019e8 <HAL_I2C_IsDeviceReady+0x170>
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_I2C_IsDeviceReady+0x170>
 80019e2:	7dbb      	ldrb	r3, [r7, #22]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0cd      	beq.n	8001984 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d129      	bne.n	8001a52 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2319      	movs	r3, #25
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4921      	ldr	r1, [pc, #132]	; (8001ab4 <HAL_I2C_IsDeviceReady+0x23c>)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f970 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e036      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e02c      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2319      	movs	r3, #25
 8001a72:	2201      	movs	r2, #1
 8001a74:	490f      	ldr	r1, [pc, #60]	; (8001ab4 <HAL_I2C_IsDeviceReady+0x23c>)
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f94c 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e012      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f4ff af3e 	bcc.w	8001912 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	00100002 	.word	0x00100002
 8001ab8:	ffff0000 	.word	0xffff0000

08001abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d006      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ae4:	d108      	bne.n	8001af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00b      	b.n	8001b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d107      	bne.n	8001b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f8f9 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e035      	b.n	8001b98 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b34:	d108      	bne.n	8001b48 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b36:	897b      	ldrh	r3, [r7, #10]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	e01b      	b.n	8001b80 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	11db      	asrs	r3, r3, #7
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f003 0306 	and.w	r3, r3, #6
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f063 030f 	orn	r3, r3, #15
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <I2C_MasterRequestWrite+0xe4>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f92b 	bl	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e010      	b.n	8001b98 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <I2C_MasterRequestWrite+0xe8>)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f91b 	bl	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	00010008 	.word	0x00010008
 8001ba4:	00010002 	.word	0x00010002

08001ba8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d006      	beq.n	8001be2 <I2C_MasterRequestRead+0x3a>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d003      	beq.n	8001be2 <I2C_MasterRequestRead+0x3a>
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001be0:	d108      	bne.n	8001bf4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e00b      	b.n	8001c0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	2b11      	cmp	r3, #17
 8001bfa:	d107      	bne.n	8001c0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f87b 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e06d      	b.n	8001d04 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c30:	d108      	bne.n	8001c44 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c32:	897b      	ldrh	r3, [r7, #10]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	e053      	b.n	8001cec <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	11db      	asrs	r3, r3, #7
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0306 	and.w	r3, r3, #6
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f063 030f 	orn	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	492a      	ldr	r1, [pc, #168]	; (8001d0c <I2C_MasterRequestRead+0x164>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f8ad 	bl	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e048      	b.n	8001d04 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c72:	897b      	ldrh	r3, [r7, #10]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4923      	ldr	r1, [pc, #140]	; (8001d10 <I2C_MasterRequestRead+0x168>)
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f89d 	bl	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e038      	b.n	8001d04 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f825 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e017      	b.n	8001d04 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	11db      	asrs	r3, r3, #7
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 0306 	and.w	r3, r3, #6
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f063 030e 	orn	r3, r3, #14
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <I2C_MasterRequestRead+0x168>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f865 	bl	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	00010008 	.word	0x00010008
 8001d10:	00010002 	.word	0x00010002

08001d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d24:	e025      	b.n	8001d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d021      	beq.n	8001d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2e:	f7fe fecd 	bl	8000acc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d302      	bcc.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d116      	bne.n	8001d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f043 0220 	orr.w	r2, r3, #32
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e023      	b.n	8001dba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10d      	bne.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4013      	ands	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	e00c      	b.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4013      	ands	r3, r2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d0b6      	beq.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dd0:	e051      	b.n	8001e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d123      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f043 0204 	orr.w	r2, r3, #4
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e046      	b.n	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d021      	beq.n	8001e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e32:	f7fe fe4b 	bl	8000acc <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d302      	bcc.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d116      	bne.n	8001e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f043 0220 	orr.w	r2, r3, #32
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e020      	b.n	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10c      	bne.n	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	e00b      	b.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d18d      	bne.n	8001dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ecc:	e02d      	b.n	8001f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f8ce 	bl	8002070 <I2C_IsAcknowledgeFailed>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e02d      	b.n	8001f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d021      	beq.n	8001f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7fe fdf1 	bl	8000acc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d116      	bne.n	8001f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f043 0220 	orr.w	r2, r3, #32
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e007      	b.n	8001f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d1ca      	bne.n	8001ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f4e:	e02d      	b.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f88d 	bl	8002070 <I2C_IsAcknowledgeFailed>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e02d      	b.n	8001fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d021      	beq.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f68:	f7fe fdb0 	bl	8000acc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d302      	bcc.n	8001f7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e007      	b.n	8001fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d1ca      	bne.n	8001f50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fd0:	e042      	b.n	8002058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d119      	bne.n	8002014 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0210 	mvn.w	r2, #16
 8001fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e029      	b.n	8002068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002014:	f7fe fd5a 	bl	8000acc <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	d302      	bcc.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d116      	bne.n	8002058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f043 0220 	orr.w	r2, r3, #32
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e007      	b.n	8002068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d1b5      	bne.n	8001fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002086:	d11b      	bne.n	80020c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002090:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f043 0204 	orr.w	r2, r3, #4
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <HAL_RCC_GetHCLKFreq+0x10>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e4:	f7ff fff2 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08002c18 	.word	0x08002c18

08002108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800210c:	f7ff ffde 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002110:	4601      	mov	r1, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0adb      	lsrs	r3, r3, #11
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_RCC_GetPCLK2Freq+0x24>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	08002c18 	.word	0x08002c18

08002130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e01d      	b.n	800217e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fb3e 	bl	80007d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f000 f8d0 	bl	8002314 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0b4      	b.n	800230c <HAL_TIM_PWM_ConfigChannel+0x184>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	f200 809f 	bhi.w	80022f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021f5 	.word	0x080021f5
 80021c4:	080022f9 	.word	0x080022f9
 80021c8:	080022f9 	.word	0x080022f9
 80021cc:	080022f9 	.word	0x080022f9
 80021d0:	08002235 	.word	0x08002235
 80021d4:	080022f9 	.word	0x080022f9
 80021d8:	080022f9 	.word	0x080022f9
 80021dc:	080022f9 	.word	0x080022f9
 80021e0:	08002277 	.word	0x08002277
 80021e4:	080022f9 	.word	0x080022f9
 80021e8:	080022f9 	.word	0x080022f9
 80021ec:	080022f9 	.word	0x080022f9
 80021f0:	080022b7 	.word	0x080022b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f8ec 	bl	80023d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0204 	bic.w	r2, r2, #4
 800221e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	619a      	str	r2, [r3, #24]
      break;
 8002232:	e062      	b.n	80022fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f932 	bl	80024a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6999      	ldr	r1, [r3, #24]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	619a      	str	r2, [r3, #24]
      break;
 8002274:	e041      	b.n	80022fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f97b 	bl	8002578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0208 	orr.w	r2, r2, #8
 8002290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0204 	bic.w	r2, r2, #4
 80022a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69d9      	ldr	r1, [r3, #28]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	61da      	str	r2, [r3, #28]
      break;
 80022b4:	e021      	b.n	80022fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f9c5 	bl	800264c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69d9      	ldr	r1, [r3, #28]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	61da      	str	r2, [r3, #28]
      break;
 80022f6:	e000      	b.n	80022fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80022f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a29      	ldr	r2, [pc, #164]	; (80023cc <TIM_Base_SetConfig+0xb8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00b      	beq.n	8002344 <TIM_Base_SetConfig+0x30>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002332:	d007      	beq.n	8002344 <TIM_Base_SetConfig+0x30>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <TIM_Base_SetConfig+0xbc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d003      	beq.n	8002344 <TIM_Base_SetConfig+0x30>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <TIM_Base_SetConfig+0xc0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d108      	bne.n	8002356 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <TIM_Base_SetConfig+0xb8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00b      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002364:	d007      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <TIM_Base_SetConfig+0xbc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0x62>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <TIM_Base_SetConfig+0xc0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <TIM_Base_SetConfig+0xb8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d103      	bne.n	80023bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	615a      	str	r2, [r3, #20]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800

080023d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	f023 0201 	bic.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0303 	bic.w	r3, r3, #3
 800240e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f023 0302 	bic.w	r3, r3, #2
 8002420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <TIM_OC1_SetConfig+0xc8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d10c      	bne.n	800244e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f023 0308 	bic.w	r3, r3, #8
 800243a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <TIM_OC1_SetConfig+0xc8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d111      	bne.n	800247a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800245c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	621a      	str	r2, [r3, #32]
}
 8002494:	bf00      	nop
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00

080024a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f023 0210 	bic.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0320 	bic.w	r3, r3, #32
 80024ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <TIM_OC2_SetConfig+0xd0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10d      	bne.n	8002520 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800250a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800251e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a14      	ldr	r2, [pc, #80]	; (8002574 <TIM_OC2_SetConfig+0xd0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d113      	bne.n	8002550 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800252e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	621a      	str	r2, [r3, #32]
}
 800256a:	bf00      	nop
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00

08002578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <TIM_OC3_SetConfig+0xd0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10d      	bne.n	80025f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <TIM_OC3_SetConfig+0xd0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	621a      	str	r2, [r3, #32]
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00

0800264c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	031b      	lsls	r3, r3, #12
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <TIM_OC4_SetConfig+0x98>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d109      	bne.n	80026c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	40012c00 	.word	0x40012c00

080026e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e032      	b.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002738:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	4313      	orrs	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e03f      	b.n	8002802 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe f870 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f90b 	bl	80029d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b088      	sub	sp, #32
 800280e:	af02      	add	r7, sp, #8
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b20      	cmp	r3, #32
 8002828:	f040 8083 	bne.w	8002932 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_UART_Transmit+0x2e>
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e07b      	b.n	8002934 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_UART_Transmit+0x40>
 8002846:	2302      	movs	r3, #2
 8002848:	e074      	b.n	8002934 <HAL_UART_Transmit+0x12a>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	; 0x21
 800285c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002860:	f7fe f934 	bl	8000acc <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002872:	e042      	b.n	80028fa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d122      	bne.n	80028d2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f850 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e046      	b.n	8002934 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3302      	adds	r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	e017      	b.n	80028fa <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	e013      	b.n	80028fa <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f82d 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e023      	b.n	8002934 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	60ba      	str	r2, [r7, #8]
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1b7      	bne.n	8002874 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f814 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e00a      	b.n	8002934 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e000      	b.n	8002934 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e02c      	b.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d028      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 800295c:	f7fe f8b6 	bl	8000acc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	429a      	cmp	r2, r3
 800296a:	d21d      	bcs.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800297a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e00f      	b.n	80029c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0c3      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a0a:	f023 030c 	bic.w	r3, r3, #12
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <UART_SetConfig+0x1ac>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d14e      	bne.n	8002ad6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff fb66 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8002a3c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009a      	lsls	r2, r3, #2
 8002a48:	441a      	add	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	0119      	lsls	r1, r3, #4
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a74:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002a76:	fba3 0302 	umull	r0, r3, r3, r2
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2064      	movs	r0, #100	; 0x64
 8002a7e:	fb00 f303 	mul.w	r3, r0, r3
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	3332      	adds	r3, #50	; 0x32
 8002a88:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a94:	4419      	add	r1, r3
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002aae:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2064      	movs	r0, #100	; 0x64
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002ad4:	e04d      	b.n	8002b72 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ad6:	f7ff fb03 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
 8002ada:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	0119      	lsls	r1, r3, #4
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009a      	lsls	r2, r3, #2
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b14:	fba3 0302 	umull	r0, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	fb00 f303 	mul.w	r3, r0, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	3332      	adds	r3, #50	; 0x32
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b32:	4419      	add	r1, r3
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b4c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	fb00 f303 	mul.w	r3, r0, r3
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	3332      	adds	r3, #50	; 0x32
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	440a      	add	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	2500      	movs	r5, #0
 8002b88:	4e0c      	ldr	r6, [pc, #48]	; (8002bbc <__libc_init_array+0x38>)
 8002b8a:	4c0d      	ldr	r4, [pc, #52]	; (8002bc0 <__libc_init_array+0x3c>)
 8002b8c:	1ba4      	subs	r4, r4, r6
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	42a5      	cmp	r5, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	f000 f830 	bl	8002bf8 <_init>
 8002b98:	2500      	movs	r5, #0
 8002b9a:	4e0a      	ldr	r6, [pc, #40]	; (8002bc4 <__libc_init_array+0x40>)
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	; (8002bc8 <__libc_init_array+0x44>)
 8002b9e:	1ba4      	subs	r4, r4, r6
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	42a5      	cmp	r5, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bac:	4798      	blx	r3
 8002bae:	3501      	adds	r5, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bb6:	4798      	blx	r3
 8002bb8:	3501      	adds	r5, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	08002c20 	.word	0x08002c20
 8002bc0:	08002c20 	.word	0x08002c20
 8002bc4:	08002c20 	.word	0x08002c20
 8002bc8:	08002c24 	.word	0x08002c24

08002bcc <strncpy>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4604      	mov	r4, r0
 8002bd0:	3901      	subs	r1, #1
 8002bd2:	b902      	cbnz	r2, 8002bd6 <strncpy+0xa>
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8002bdc:	1e56      	subs	r6, r2, #1
 8002bde:	f803 5b01 	strb.w	r5, [r3], #1
 8002be2:	b92d      	cbnz	r5, 8002bf0 <strncpy+0x24>
 8002be4:	4414      	add	r4, r2
 8002be6:	42a3      	cmp	r3, r4
 8002be8:	d0f4      	beq.n	8002bd4 <strncpy+0x8>
 8002bea:	f803 5b01 	strb.w	r5, [r3], #1
 8002bee:	e7fa      	b.n	8002be6 <strncpy+0x1a>
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	e7ed      	b.n	8002bd2 <strncpy+0x6>
	...

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
