
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac4  08002ac4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ac4  08002ac4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ac4  08002ac4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000147c  20000010  08002adc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000148c  08002adc  0002148c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e86e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f5c  00000000  00000000  0002e8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00030808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000078c2  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7dc  00000000  00000000  00039e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9f40  00000000  00000000  00048626  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  001025e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800299c 	.word	0x0800299c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800299c 	.word	0x0800299c

0800014c <Cam_Transmit_Photo>:
{//send alert status to ground station
	MAV_Send_Msg_Named_Value_Int("FireAlert", (uint32_t) cam_alert_rx_buffer[0]);
}

void Cam_Transmit_Photo(uint32_t startIndex, uint8_t numBytes)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	466b      	mov	r3, sp
 800015a:	461d      	mov	r5, r3
	uint8_t photo_data[numBytes];
 800015c:	78f8      	ldrb	r0, [r7, #3]
 800015e:	4603      	mov	r3, r0
 8000160:	3b01      	subs	r3, #1
 8000162:	60fb      	str	r3, [r7, #12]
 8000164:	b2c1      	uxtb	r1, r0
 8000166:	f04f 0200 	mov.w	r2, #0
 800016a:	f04f 0300 	mov.w	r3, #0
 800016e:	f04f 0400 	mov.w	r4, #0
 8000172:	00d4      	lsls	r4, r2, #3
 8000174:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000178:	00cb      	lsls	r3, r1, #3
 800017a:	b2c1      	uxtb	r1, r0
 800017c:	f04f 0200 	mov.w	r2, #0
 8000180:	f04f 0300 	mov.w	r3, #0
 8000184:	f04f 0400 	mov.w	r4, #0
 8000188:	00d4      	lsls	r4, r2, #3
 800018a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800018e:	00cb      	lsls	r3, r1, #3
 8000190:	4603      	mov	r3, r0
 8000192:	3307      	adds	r3, #7
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	00db      	lsls	r3, r3, #3
 8000198:	ebad 0d03 	sub.w	sp, sp, r3
 800019c:	466b      	mov	r3, sp
 800019e:	3300      	adds	r3, #0
 80001a0:	60bb      	str	r3, [r7, #8]
	strncpy(&photo_data, &cam_photo_rx_buffer[startIndex], numBytes);
 80001a2:	68b8      	ldr	r0, [r7, #8]
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	4a08      	ldr	r2, [pc, #32]	; (80001c8 <Cam_Transmit_Photo+0x7c>)
 80001a8:	4413      	add	r3, r2
 80001aa:	78fa      	ldrb	r2, [r7, #3]
 80001ac:	4619      	mov	r1, r3
 80001ae:	f002 fbe0 	bl	8002972 <strncpy>
	//Radio_Transmit_Raw(&photo_data, numBytes);
	MAV_send_File_Transfer_Protocol(&photo_data, numBytes);
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	78fa      	ldrb	r2, [r7, #3]
 80001b6:	4611      	mov	r1, r2
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 f82b 	bl	8001214 <MAV_send_File_Transfer_Protocol>
 80001be:	46ad      	mov	sp, r5
}
 80001c0:	bf00      	nop
 80001c2:	3710      	adds	r7, #16
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bdb0      	pop	{r4, r5, r7, pc}
 80001c8:	200000e0 	.word	0x200000e0

080001cc <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 80001d2:	f001 fa31 	bl	8001638 <HAL_Init>
	MX_GPIO_Init();
 80001d6:	f000 f91d 	bl	8000414 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80001da:	f000 f8f1 	bl	80003c0 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 80001de:	f000 f873 	bl	80002c8 <MX_TIM4_Init>
	MX_I2C2_Init();
 80001e2:	f000 f843 	bl	800026c <MX_I2C2_Init>
	//    1, // System ID2 (1-255)
	//    1  // Component ID (a MAV_COMPONENT value)
	//};
	//Motor_Arm();
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]
	char tx_buffer[4] = "Hl\r\n";
 80001e6:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <main+0x8c>)
 80001e8:	61bb      	str	r3, [r7, #24]
	char rx_buffer[4] = "coef";
 80001ea:	4b1c      	ldr	r3, [pc, #112]	; (800025c <main+0x90>)
 80001ec:	617b      	str	r3, [r7, #20]
	//uint8_t payload_test[10] = {1,2,3,4,5,6,7,8,9,10};
	uint8_t payload_test[10];
	for (uint8_t i=0; i<10;i++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	77fb      	strb	r3, [r7, #31]
 80001f2:	e00b      	b.n	800020c <main+0x40>
	{
		payload_test[i] = i+1;
 80001f4:	7ffb      	ldrb	r3, [r7, #31]
 80001f6:	7ffa      	ldrb	r2, [r7, #31]
 80001f8:	3201      	adds	r2, #1
 80001fa:	b2d2      	uxtb	r2, r2
 80001fc:	f107 0120 	add.w	r1, r7, #32
 8000200:	440b      	add	r3, r1
 8000202:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (uint8_t i=0; i<10;i++)
 8000206:	7ffb      	ldrb	r3, [r7, #31]
 8000208:	3301      	adds	r3, #1
 800020a:	77fb      	strb	r3, [r7, #31]
 800020c:	7ffb      	ldrb	r3, [r7, #31]
 800020e:	2b09      	cmp	r3, #9
 8000210:	d9f0      	bls.n	80001f4 <main+0x28>
	}
	uint8_t test[5] = {0x55, 0x55, 0x55, 0x55, 0x55};
 8000212:	4a13      	ldr	r2, [pc, #76]	; (8000260 <main+0x94>)
 8000214:	463b      	mov	r3, r7
 8000216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021a:	6018      	str	r0, [r3, #0]
 800021c:	3304      	adds	r3, #4
 800021e:	7019      	strb	r1, [r3, #0]
	uint8_t baro_flag = 5;
 8000220:	2305      	movs	r3, #5
 8000222:	77bb      	strb	r3, [r7, #30]
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2108      	movs	r1, #8
 8000228:	480e      	ldr	r0, [pc, #56]	; (8000264 <main+0x98>)
 800022a:	f001 fcc7 	bl	8001bbc <HAL_GPIO_WritePin>
		//uint8_t mpu_status = Mpu_Is_Ready();
		//Radio_Transmit_Raw(&mpu_status, 1);

		//****start of FTP test code****
		//cam FTP test
		cam_photo_rx_buffer[100] = 0x44;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x9c>)
 8000230:	2244      	movs	r2, #68	; 0x44
 8000232:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		cam_photo_rx_buffer[101] = 0x55;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <main+0x9c>)
 8000238:	2255      	movs	r2, #85	; 0x55
 800023a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		cam_photo_rx_buffer[102] = 0x66;
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <main+0x9c>)
 8000240:	2266      	movs	r2, #102	; 0x66
 8000242:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		Cam_Transmit_Photo(100, 3);
 8000246:	2103      	movs	r1, #3
 8000248:	2064      	movs	r0, #100	; 0x64
 800024a:	f7ff ff7f 	bl	800014c <Cam_Transmit_Photo>
		//MAV FTP test
		//MAV_send_File_Transfer_Protocol(&payload_test, 10);
		//HAL_Delay(500);
		//Radio_Transmit_Raw(&payload_test, 10);
		HAL_Delay(1000);
 800024e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000252:	f001 fa53 	bl	80016fc <HAL_Delay>
		cam_photo_rx_buffer[100] = 0x44;
 8000256:	e7ea      	b.n	800022e <main+0x62>
 8000258:	0a0d6c48 	.word	0x0a0d6c48
 800025c:	66656f63 	.word	0x66656f63
 8000260:	080029b4 	.word	0x080029b4
 8000264:	40010c00 	.word	0x40010c00
 8000268:	200000e0 	.word	0x200000e0

0800026c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <MX_I2C2_Init+0x50>)
 8000272:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <MX_I2C2_Init+0x54>)
 8000274:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <MX_I2C2_Init+0x50>)
 8000278:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <MX_I2C2_Init+0x58>)
 800027a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <MX_I2C2_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_I2C2_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <MX_I2C2_Init+0x50>)
 800028a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800028e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <MX_I2C2_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <MX_I2C2_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <MX_I2C2_Init+0x50>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <MX_I2C2_Init+0x50>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <MX_I2C2_Init+0x50>)
 80002aa:	f001 fc9f 	bl	8001bec <HAL_I2C_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002b4:	f000 f8ec 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	40005800 	.word	0x40005800
 80002c4:	000186a0 	.word	0x000186a0

080002c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ce:	f107 0320 	add.w	r3, r7, #32
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]
 80002e6:	615a      	str	r2, [r3, #20]
 80002e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80002ea:	4b33      	ldr	r3, [pc, #204]	; (80003b8 <MX_TIM4_Init+0xf0>)
 80002ec:	4a33      	ldr	r2, [pc, #204]	; (80003bc <MX_TIM4_Init+0xf4>)
 80002ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 80002f0:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <MX_TIM4_Init+0xf0>)
 80002f2:	220a      	movs	r2, #10
 80002f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b30      	ldr	r3, [pc, #192]	; (80003b8 <MX_TIM4_Init+0xf0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 80002fc:	4b2e      	ldr	r3, [pc, #184]	; (80003b8 <MX_TIM4_Init+0xf0>)
 80002fe:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000302:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <MX_TIM4_Init+0xf0>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <MX_TIM4_Init+0xf0>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000310:	4829      	ldr	r0, [pc, #164]	; (80003b8 <MX_TIM4_Init+0xf0>)
 8000312:	f001 fdc5 	bl	8001ea0 <HAL_TIM_PWM_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800031c:	f000 f8b8 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000328:	f107 0320 	add.w	r3, r7, #32
 800032c:	4619      	mov	r1, r3
 800032e:	4822      	ldr	r0, [pc, #136]	; (80003b8 <MX_TIM4_Init+0xf0>)
 8000330:	f002 f892 	bl	8002458 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800033a:	f000 f8a9 	bl	8000490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033e:	2360      	movs	r3, #96	; 0x60
 8000340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 8000342:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	4619      	mov	r1, r3
 8000356:	4818      	ldr	r0, [pc, #96]	; (80003b8 <MX_TIM4_Init+0xf0>)
 8000358:	f001 fdce 	bl	8001ef8 <HAL_TIM_PWM_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000362:	f000 f895 	bl	8000490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2204      	movs	r2, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4812      	ldr	r0, [pc, #72]	; (80003b8 <MX_TIM4_Init+0xf0>)
 800036e:	f001 fdc3 	bl	8001ef8 <HAL_TIM_PWM_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000378:	f000 f88a 	bl	8000490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2208      	movs	r2, #8
 8000380:	4619      	mov	r1, r3
 8000382:	480d      	ldr	r0, [pc, #52]	; (80003b8 <MX_TIM4_Init+0xf0>)
 8000384:	f001 fdb8 	bl	8001ef8 <HAL_TIM_PWM_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800038e:	f000 f87f 	bl	8000490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	220c      	movs	r2, #12
 8000396:	4619      	mov	r1, r3
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <MX_TIM4_Init+0xf0>)
 800039a:	f001 fdad 	bl	8001ef8 <HAL_TIM_PWM_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80003a4:	f000 f874 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <MX_TIM4_Init+0xf0>)
 80003aa:	f001 f841 	bl	8001430 <HAL_TIM_MspPostInit>

}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	; 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20001084 	.word	0x20001084
 80003bc:	40000800 	.word	0x40000800

080003c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_USART1_UART_Init+0x50>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600*2;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f8:	f002 f872 	bl	80024e0 <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000402:	f000 f845 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200010c4 	.word	0x200010c4
 8000410:	40013800 	.word	0x40013800

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <MX_GPIO_Init+0x74>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a16      	ldr	r2, [pc, #88]	; (8000488 <MX_GPIO_Init+0x74>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_GPIO_Init+0x74>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0308 	and.w	r3, r3, #8
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <MX_GPIO_Init+0x74>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <MX_GPIO_Init+0x74>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_GPIO_Init+0x74>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2108      	movs	r1, #8
 800045c:	480b      	ldr	r0, [pc, #44]	; (800048c <MX_GPIO_Init+0x78>)
 800045e:	f001 fbad 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000462:	2308      	movs	r3, #8
 8000464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	4619      	mov	r1, r3
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_GPIO_Init+0x78>)
 800047a:	f001 fa45 	bl	8001908 <HAL_GPIO_Init>

}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40010c00 	.word	0x40010c00

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	6039      	str	r1, [r7, #0]
 80004a6:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4053      	eors	r3, r2
 80004b2:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	011b      	lsls	r3, r3, #4
 80004b8:	b25a      	sxtb	r2, r3
 80004ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004be:	4053      	eors	r3, r2
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	0a1b      	lsrs	r3, r3, #8
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	b21a      	sxth	r2, r3
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	021b      	lsls	r3, r3, #8
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	4053      	eors	r3, r2
 80004d6:	b21a      	sxth	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	b21b      	sxth	r3, r3
 80004de:	4053      	eors	r3, r2
 80004e0:	b21a      	sxth	r2, r3
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	091b      	lsrs	r3, r3, #4
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	b21b      	sxth	r3, r3
 80004ea:	4053      	eors	r3, r2
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	801a      	strh	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800050c:	801a      	strh	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000524:	f107 030e 	add.w	r3, r7, #14
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ffe8 	bl	80004fe <crc_init>
	while (length--) {
 800052e:	e009      	b.n	8000544 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	607a      	str	r2, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f107 020e 	add.w	r2, r7, #14
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ffac 	bl	800049c <crc_accumulate>
	while (length--) {
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	807a      	strh	r2, [r7, #2]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f0      	bne.n	8000530 <crc_calculate+0x18>
        }
        return crcTmp;
 800054e:	89fb      	ldrh	r3, [r7, #14]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	4613      	mov	r3, r2
 8000564:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	617b      	str	r3, [r7, #20]
	while (length--) {
 800056a:	e007      	b.n	800057c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	617a      	str	r2, [r7, #20]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	68f9      	ldr	r1, [r7, #12]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff90 	bl	800049c <crc_accumulate>
	while (length--) {
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	80fa      	strh	r2, [r7, #6]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f2      	bne.n	800056c <crc_accumulate_buffer+0x14>
        }
}
 8000586:	bf00      	nop
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <mavlink_sha256_init+0x50>)
 80005a8:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <mavlink_sha256_init+0x54>)
 80005ae:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <mavlink_sha256_init+0x58>)
 80005b4:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <mavlink_sha256_init+0x5c>)
 80005ba:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <mavlink_sha256_init+0x60>)
 80005c0:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <mavlink_sha256_init+0x64>)
 80005c6:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <mavlink_sha256_init+0x68>)
 80005cc:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <mavlink_sha256_init+0x6c>)
 80005d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	6a09e667 	.word	0x6a09e667
 80005e4:	bb67ae85 	.word	0xbb67ae85
 80005e8:	3c6ef372 	.word	0x3c6ef372
 80005ec:	a54ff53a 	.word	0xa54ff53a
 80005f0:	510e527f 	.word	0x510e527f
 80005f4:	9b05688c 	.word	0x9b05688c
 80005f8:	1f83d9ab 	.word	0x1f83d9ab
 80005fc:	5be0cd19 	.word	0x5be0cd19

08000600 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000600:	b480      	push	{r7}
 8000602:	b0cf      	sub	sp, #316	; 0x13c
 8000604:	af00      	add	r7, sp, #0
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	6018      	str	r0, [r3, #0]
 800060a:	463b      	mov	r3, r7
 800060c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000664:	e011      	b.n	800068a <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8000666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	463a      	mov	r2, r7
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4413      	add	r3, r2
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800067c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000684:	3301      	adds	r3, #1
 8000686:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800068a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800068e:	2b0f      	cmp	r3, #15
 8000690:	dde9      	ble.n	8000666 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 8000692:	2310      	movs	r3, #16
 8000694:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000698:	e057      	b.n	800074a <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800069a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800069e:	1e9a      	subs	r2, r3, #2
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80006ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006b0:	1e99      	subs	r1, r3, #2
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ba:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80006be:	405a      	eors	r2, r3
 80006c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006c4:	1e99      	subs	r1, r3, #2
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ce:	0a9b      	lsrs	r3, r3, #10
 80006d0:	405a      	eors	r2, r3
 80006d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006d6:	1fd9      	subs	r1, r3, #7
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006e0:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80006e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e6:	f1a3 010f 	sub.w	r1, r3, #15
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006f2:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80006f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006fa:	f1a3 000f 	sub.w	r0, r3, #15
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000706:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800070a:	4059      	eors	r1, r3
 800070c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000710:	f1a3 000f 	sub.w	r0, r3, #15
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800071c:	08db      	lsrs	r3, r3, #3
 800071e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000720:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000726:	f1a3 0110 	sub.w	r1, r3, #16
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000732:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800073c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000744:	3301      	adds	r3, #1
 8000746:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800074a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800074e:	2b3f      	cmp	r3, #63	; 0x3f
 8000750:	dda3      	ble.n	800069a <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000758:	e076      	b.n	8000848 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800075a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800075e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000762:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000766:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800076a:	405a      	eors	r2, r3
 800076c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000770:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000774:	405a      	eors	r2, r3
 8000776:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800077a:	441a      	add	r2, r3
 800077c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000780:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000784:	4019      	ands	r1, r3
 8000786:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800078a:	43d8      	mvns	r0, r3
 800078c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000790:	4003      	ands	r3, r0
 8000792:	404b      	eors	r3, r1
 8000794:	441a      	add	r2, r3
 8000796:	4955      	ldr	r1, [pc, #340]	; (80008ec <mavlink_sha256_calc+0x2ec>)
 8000798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800079c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a0:	441a      	add	r2, r3
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80007aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007ae:	4413      	add	r3, r2
 80007b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80007b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007b8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80007bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007c0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80007c4:	405a      	eors	r2, r3
 80007c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007ca:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80007ce:	405a      	eors	r2, r3
 80007d0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80007d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80007d8:	4059      	eors	r1, r3
 80007da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007de:	4019      	ands	r1, r3
 80007e0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80007e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80007e8:	4003      	ands	r3, r0
 80007ea:	404b      	eors	r3, r1
 80007ec:	4413      	add	r3, r2
 80007ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 80007f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 80007fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000802:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000806:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800080a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800080e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000812:	4413      	add	r3, r2
 8000814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800081c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000820:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000824:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000828:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800082c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000830:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000838:	4413      	add	r3, r2
 800083a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800083e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000842:	3301      	adds	r3, #1
 8000844:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800084c:	2b3f      	cmp	r3, #63	; 0x3f
 800084e:	dd84      	ble.n	800075a <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	689a      	ldr	r2, [r3, #8]
 8000856:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800085a:	441a      	add	r2, r3
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	609a      	str	r2, [r3, #8]
    B += BB;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68da      	ldr	r2, [r3, #12]
 8000868:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800086c:	441a      	add	r2, r3
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	60da      	str	r2, [r3, #12]
    C += CC;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	691a      	ldr	r2, [r3, #16]
 800087a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800087e:	441a      	add	r2, r3
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	611a      	str	r2, [r3, #16]
    D += DD;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000890:	441a      	add	r2, r3
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	615a      	str	r2, [r3, #20]
    E += EE;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008a2:	441a      	add	r2, r3
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	619a      	str	r2, [r3, #24]
    F += FF;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69da      	ldr	r2, [r3, #28]
 80008b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008b4:	441a      	add	r2, r3
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	61da      	str	r2, [r3, #28]
    G += GG;
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6a1a      	ldr	r2, [r3, #32]
 80008c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008c6:	441a      	add	r2, r3
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	621a      	str	r2, [r3, #32]
    H += HH;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008d8:	441a      	add	r2, r3
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008e0:	bf00      	nop
 80008e2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	080029bc 	.word	0x080029bc

080008f0 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	441a      	add	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800091a:	429a      	cmp	r2, r3
 800091c:	d904      	bls.n	8000928 <mavlink_sha256_update+0x38>
	++m->sz[1];
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800092a:	08db      	lsrs	r3, r3, #3
 800092c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000930:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000932:	e054      	b.n	80009de <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000936:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800093a:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000940:	429a      	cmp	r2, r3
 8000942:	d201      	bcs.n	8000948 <mavlink_sha256_update+0x58>
            l = len;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800094e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000950:	4413      	add	r3, r2
 8000952:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000954:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fff0 	bl	800293c <memcpy>
	offset += l;
 800095c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800095e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000960:	4413      	add	r3, r2
 8000962:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000968:	4413      	add	r3, r2
 800096a:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000976:	2b40      	cmp	r3, #64	; 0x40
 8000978:	d131      	bne.n	80009de <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3328      	adds	r3, #40	; 0x28
 800097e:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000980:	2300      	movs	r3, #0
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
 8000984:	e020      	b.n	80009c8 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800098c:	4413      	add	r3, r2
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000990:	f107 0210 	add.w	r2, r7, #16
 8000994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 800099c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800099e:	78da      	ldrb	r2, [r3, #3]
 80009a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a2:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80009a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a6:	3301      	adds	r3, #1
 80009a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009aa:	7892      	ldrb	r2, [r2, #2]
 80009ac:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80009ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009b0:	3302      	adds	r3, #2
 80009b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009b4:	7852      	ldrb	r2, [r2, #1]
 80009b6:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80009b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ba:	3303      	adds	r3, #3
 80009bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80009c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009c4:	3301      	adds	r3, #1
 80009c6:	663b      	str	r3, [r7, #96]	; 0x60
 80009c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009ca:	2b0f      	cmp	r3, #15
 80009cc:	dddb      	ble.n	8000986 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f7ff fe13 	bl	8000600 <mavlink_sha256_calc>
	    offset = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1a7      	bne.n	8000934 <mavlink_sha256_update+0x44>
	}
    }
}
 80009e4:	bf00      	nop
 80009e6:	3770      	adds	r7, #112	; 0x70
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b098      	sub	sp, #96	; 0x60
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a00:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a04:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3308      	adds	r3, #8
 8000a14:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	3301      	adds	r3, #1
 8000a20:	2247      	movs	r2, #71	; 0x47
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 ff94 	bl	8002952 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a30:	3307      	adds	r3, #7
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a38:	440b      	add	r3, r1
 8000a3a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	0a1a      	lsrs	r2, r3, #8
 8000a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a46:	3306      	adds	r3, #6
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a4e:	440b      	add	r3, r1
 8000a50:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	0c1a      	lsrs	r2, r3, #16
 8000a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a5c:	3305      	adds	r3, #5
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a64:	440b      	add	r3, r1
 8000a66:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	0e1a      	lsrs	r2, r3, #24
 8000a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a72:	3304      	adds	r3, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a86:	3303      	adds	r3, #3
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a8e:	440b      	add	r3, r1
 8000a90:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	0a1a      	lsrs	r2, r3, #8
 8000a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aa4:	440b      	add	r3, r1
 8000aa6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	0c1a      	lsrs	r2, r3, #16
 8000ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aba:	440b      	add	r3, r1
 8000abc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	0e1b      	lsrs	r3, r3, #24
 8000ac6:	b2d9      	uxtb	r1, r3
 8000ac8:	f107 020c 	add.w	r2, r7, #12
 8000acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ace:	4413      	add	r3, r2
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad6:	f103 0208 	add.w	r2, r3, #8
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4619      	mov	r1, r3
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff05 	bl	80008f0 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ae8:	78da      	ldrb	r2, [r3, #3]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000af4:	7892      	ldrb	r2, [r2, #2]
 8000af6:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	3302      	adds	r3, #2
 8000afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000afe:	7852      	ldrb	r2, [r2, #1]
 8000b00:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	3303      	adds	r3, #3
 8000b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b12:	79d2      	ldrb	r2, [r2, #7]
 8000b14:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3305      	adds	r3, #5
 8000b1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b1c:	7992      	ldrb	r2, [r2, #6]
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	3760      	adds	r7, #96	; 0x60
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <mavlink_get_channel_status+0x24>)
 8000b3e:	4413      	add	r3, r2
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000002c 	.word	0x2000002c

08000b50 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b0a1      	sub	sp, #132	; 0x84
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <mavlink_sign_packet+0x20>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <mavlink_sign_packet+0x24>
	    return 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e051      	b.n	8000c18 <mavlink_sign_packet+0xc8>
	}
	signature[0] = signing->link_id;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	785a      	ldrb	r2, [r3, #1]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f103 0408 	add.w	r4, r3, #8
 8000b82:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000b86:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	f107 0110 	add.w	r1, r7, #16
 8000b92:	2206      	movs	r2, #6
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fed1 	bl	800293c <memcpy>
	signing->timestamp++;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000ba0:	1c4b      	adds	r3, r1, #1
 8000ba2:	f142 0400 	adc.w	r4, r2, #0
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fced 	bl	8000590 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f103 0110 	add.w	r1, r3, #16
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fe94 	bl	80008f0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000bc8:	78fa      	ldrb	r2, [r7, #3]
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe8d 	bl	80008f0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000bd6:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fe84 	bl	80008f0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	2202      	movs	r2, #2
 8000bee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe7c 	bl	80008f0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe75 	bl	80008f0 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1dda      	adds	r2, r3, #7
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff feeb 	bl	80009ec <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000c16:	230d      	movs	r3, #13
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3784      	adds	r7, #132	; 0x84
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd90      	pop	{r4, r7, pc}

08000c20 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c2c:	e002      	b.n	8000c34 <_mav_trim_payload+0x14>
		length--;
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d906      	bls.n	8000c48 <_mav_trim_payload+0x28>
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0f2      	beq.n	8000c2e <_mav_trim_payload+0xe>
	}
	return length;
 8000c48:	78fb      	ldrb	r3, [r7, #3]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c56:	b08f      	sub	sp, #60	; 0x3c
 8000c58:	af04      	add	r7, sp, #16
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	72fb      	strb	r3, [r7, #11]
 8000c62:	4613      	mov	r3, r2
 8000c64:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7b1b      	ldrb	r3, [r3, #12]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bf14      	ite	ne
 8000c72:	2301      	movne	r3, #1
 8000c74:	2300      	moveq	r3, #0
 8000c76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c7e:	f083 0301 	eor.w	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00c      	beq.n	8000ca2 <mavlink_finalize_message_buffer+0x4e>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d008      	beq.n	8000ca2 <mavlink_finalize_message_buffer+0x4e>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <mavlink_finalize_message_buffer+0x4e>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <mavlink_finalize_message_buffer+0x50>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000ca8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8000cb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <mavlink_finalize_message_buffer+0x6c>
 8000cbc:	230d      	movs	r3, #13
 8000cbe:	e000      	b.n	8000cc2 <mavlink_finalize_message_buffer+0x6e>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8000ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	22fe      	movs	r2, #254	; 0xfe
 8000cd8:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ce0:	e002      	b.n	8000ce8 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	22fd      	movs	r2, #253	; 0xfd
 8000ce6:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10a      	bne.n	8000d06 <mavlink_finalize_message_buffer+0xb2>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	330c      	adds	r3, #12
 8000cf4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff90 	bl	8000c20 <_mav_trim_payload>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	e001      	b.n	8000d0a <mavlink_finalize_message_buffer+0xb6>
 8000d06:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	7afa      	ldrb	r2, [r7, #11]
 8000d12:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	7aba      	ldrb	r2, [r7, #10]
 8000d18:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8000d20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	799a      	ldrb	r2, [r3, #6]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	799b      	ldrb	r3, [r3, #6]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	789b      	ldrb	r3, [r3, #2]
 8000d54:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	78db      	ldrb	r3, [r3, #3]
 8000d5a:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8000d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d013      	beq.n	8000d8c <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	799b      	ldrb	r3, [r3, #6]
 8000d68:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	79db      	ldrb	r3, [r3, #7]
 8000d6e:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	7a1b      	ldrb	r3, [r3, #8]
 8000d74:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	7a5a      	ldrb	r2, [r3, #9]
 8000d7a:	7a99      	ldrb	r1, [r3, #10]
 8000d7c:	0209      	lsls	r1, r1, #8
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	7adb      	ldrb	r3, [r3, #11]
 8000d82:	041b      	lsls	r3, r3, #16
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	777b      	strb	r3, [r7, #29]
 8000d8a:	e030      	b.n	8000dee <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	795b      	ldrb	r3, [r3, #5]
 8000d96:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	799b      	ldrb	r3, [r3, #6]
 8000d9c:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	79db      	ldrb	r3, [r3, #7]
 8000da2:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	7a1b      	ldrb	r3, [r3, #8]
 8000da8:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	7a5a      	ldrb	r2, [r3, #9]
 8000dae:	7a99      	ldrb	r1, [r3, #10]
 8000db0:	0209      	lsls	r1, r1, #8
 8000db2:	430a      	orrs	r2, r1
 8000db4:	7adb      	ldrb	r3, [r3, #11]
 8000db6:	041b      	lsls	r3, r3, #16
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	7a5a      	ldrb	r2, [r3, #9]
 8000dc2:	7a99      	ldrb	r1, [r3, #10]
 8000dc4:	0209      	lsls	r1, r1, #8
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	7adb      	ldrb	r3, [r3, #11]
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	121b      	asrs	r3, r3, #8
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	7a5a      	ldrb	r2, [r3, #9]
 8000dda:	7a99      	ldrb	r1, [r3, #10]
 8000ddc:	0209      	lsls	r1, r1, #8
 8000dde:	430a      	orrs	r2, r1
 8000de0:	7adb      	ldrb	r3, [r3, #11]
 8000de2:	041b      	lsls	r3, r3, #16
 8000de4:	4313      	orrs	r3, r2
 8000de6:	141b      	asrs	r3, r3, #16
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	3b01      	subs	r3, #1
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fb89 	bl	8000518 <crc_calculate>
 8000e06:	4603      	mov	r3, r0
 8000e08:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f103 010c 	add.w	r1, r3, #12
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	78db      	ldrb	r3, [r3, #3]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f107 0316 	add.w	r3, r7, #22
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb9c 	bl	8000558 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8000e20:	f107 0216 	add.w	r2, r7, #22
 8000e24:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fb36 	bl	800049c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000e30:	8af9      	ldrh	r1, [r7, #22]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	330c      	adds	r3, #12
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	78d2      	ldrb	r2, [r2, #3]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2ca      	uxtb	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000e40:	8afb      	ldrh	r3, [r7, #22]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b299      	uxth	r1, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f103 020c 	add.w	r2, r3, #12
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	78db      	ldrb	r3, [r3, #3]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	b2ca      	uxtb	r2, r1
 8000e56:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8000e58:	8afa      	ldrh	r2, [r7, #22]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8000e5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d01a      	beq.n	8000e9c <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000e78:	68f9      	ldr	r1, [r7, #12]
 8000e7a:	310c      	adds	r1, #12
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8000e80:	4401      	add	r1, r0
 8000e82:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000e86:	f107 0018 	add.w	r0, r7, #24
 8000e8a:	9102      	str	r1, [sp, #8]
 8000e8c:	9201      	str	r2, [sp, #4]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4633      	mov	r3, r6
 8000e92:	4602      	mov	r2, r0
 8000e94:	4629      	mov	r1, r5
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff fe5a 	bl	8000b50 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	78db      	ldrb	r3, [r3, #3]
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	b29b      	uxth	r3, r3
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	372c      	adds	r7, #44	; 0x2c
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ec2 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b088      	sub	sp, #32
 8000ec6:	af04      	add	r7, sp, #16
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4611      	mov	r1, r2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	70fb      	strb	r3, [r7, #3]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70bb      	strb	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe22 	bl	8000b28 <mavlink_get_channel_status>
 8000ee4:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8000ee6:	78ba      	ldrb	r2, [r7, #2]
 8000ee8:	78f9      	ldrb	r1, [r7, #3]
 8000eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	7f3b      	ldrb	r3, [r7, #28]
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	7e3b      	ldrb	r3, [r7, #24]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff feaa 	bl	8000c54 <mavlink_finalize_message_buffer>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af04      	add	r7, sp, #16
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	4608      	mov	r0, r1
 8000f14:	4611      	mov	r1, r2
 8000f16:	461a      	mov	r2, r3
 8000f18:	4603      	mov	r3, r0
 8000f1a:	70fb      	strb	r3, [r7, #3]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70bb      	strb	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8000f24:	78ba      	ldrb	r2, [r7, #2]
 8000f26:	78f9      	ldrb	r1, [r7, #3]
 8000f28:	7d3b      	ldrb	r3, [r7, #20]
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	7c3b      	ldrb	r3, [r7, #16]
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	787b      	ldrb	r3, [r7, #1]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffc3 	bl	8000ec2 <mavlink_finalize_message_chan>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	78db      	ldrb	r3, [r3, #3]
 8000f54:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	2bfe      	cmp	r3, #254	; 0xfe
 8000f5c:	d13a      	bne.n	8000fd4 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000f62:	2305      	movs	r3, #5
 8000f64:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	789a      	ldrb	r2, [r3, #2]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	7992      	ldrb	r2, [r2, #6]
 8000f7e:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3303      	adds	r3, #3
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	79d2      	ldrb	r2, [r2, #7]
 8000f88:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	7a12      	ldrb	r2, [r2, #8]
 8000f92:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	7a5a      	ldrb	r2, [r3, #9]
 8000f98:	7a99      	ldrb	r1, [r3, #10]
 8000f9a:	0209      	lsls	r1, r1, #8
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	7adb      	ldrb	r3, [r3, #11]
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3305      	adds	r3, #5
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	1d98      	adds	r0, r3, #6
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f103 010c 	add.w	r1, r3, #12
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	78db      	ldrb	r3, [r3, #3]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f001 fcbd 	bl	800293c <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000fc2:	7dbb      	ldrb	r3, [r7, #22]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	78d2      	ldrb	r2, [r2, #3]
 8000fc8:	4413      	add	r3, r2
 8000fca:	3301      	adds	r3, #1
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e06c      	b.n	80010ae <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	330c      	adds	r3, #12
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fe1f 	bl	8000c20 <_mav_trim_payload>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8000fe6:	2309      	movs	r3, #9
 8000fe8:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	789a      	ldrb	r2, [r3, #2]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	7912      	ldrb	r2, [r2, #4]
 8001002:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3303      	adds	r3, #3
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	7952      	ldrb	r2, [r2, #5]
 800100c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3304      	adds	r3, #4
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	7992      	ldrb	r2, [r2, #6]
 8001016:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3305      	adds	r3, #5
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	79d2      	ldrb	r2, [r2, #7]
 8001020:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3306      	adds	r3, #6
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	7a12      	ldrb	r2, [r2, #8]
 800102a:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	7a5a      	ldrb	r2, [r3, #9]
 8001030:	7a99      	ldrb	r1, [r3, #10]
 8001032:	0209      	lsls	r1, r1, #8
 8001034:	430a      	orrs	r2, r1
 8001036:	7adb      	ldrb	r3, [r3, #11]
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	4313      	orrs	r3, r2
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3307      	adds	r3, #7
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a5a      	ldrb	r2, [r3, #9]
 800104a:	7a99      	ldrb	r1, [r3, #10]
 800104c:	0209      	lsls	r1, r1, #8
 800104e:	430a      	orrs	r2, r1
 8001050:	7adb      	ldrb	r3, [r3, #11]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	4313      	orrs	r3, r2
 8001056:	121a      	asrs	r2, r3, #8
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3308      	adds	r3, #8
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	7a5a      	ldrb	r2, [r3, #9]
 8001064:	7a99      	ldrb	r1, [r3, #10]
 8001066:	0209      	lsls	r1, r1, #8
 8001068:	430a      	orrs	r2, r1
 800106a:	7adb      	ldrb	r3, [r3, #11]
 800106c:	041b      	lsls	r3, r3, #16
 800106e:	4313      	orrs	r3, r2
 8001070:	141a      	asrs	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3309      	adds	r3, #9
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f103 000a 	add.w	r0, r3, #10
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	330c      	adds	r3, #12
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	4619      	mov	r1, r3
 8001088:	f001 fc58 	bl	800293c <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 800108c:	7dba      	ldrb	r2, [r7, #22]
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4413      	add	r3, r2
 8001092:	3301      	adds	r3, #1
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <mavlink_msg_to_send_buffer+0x164>
 80010a6:	230d      	movs	r3, #13
 80010a8:	e000      	b.n	80010ac <mavlink_msg_to_send_buffer+0x166>
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d008      	beq.n	80010e4 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1c98      	adds	r0, r3, #2
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80010dc:	7dfa      	ldrb	r2, [r7, #23]
 80010de:	4619      	mov	r1, r3
 80010e0:	f001 fc2c 	bl	800293c <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4413      	add	r3, r2
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3303      	adds	r3, #3
 80010fa:	b29b      	uxth	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	2100      	movs	r1, #0
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f001 fc19 	bl	8002952 <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 8001120:	e004      	b.n	800112c <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f001 fc08 	bl	800293c <memcpy>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <mavlink_msg_file_transfer_protocol_pack>:
 * @param payload  Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_file_transfer_protocol_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b0c5      	sub	sp, #276	; 0x114
 8001138:	af02      	add	r7, sp, #8
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4639      	mov	r1, r7
 8001140:	600a      	str	r2, [r1, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	4622      	mov	r2, r4
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	1dbb      	adds	r3, r7, #6
 800114c:	4602      	mov	r2, r0
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	1d7b      	adds	r3, r7, #5
 8001152:	460a      	mov	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
    _mav_put_uint8_t(buf, 2, target_component);
    _mav_put_uint8_t_array(buf, 3, payload, 251);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN);
#else
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	1d7a      	adds	r2, r7, #5
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	701a      	strb	r2, [r3, #0]
    packet.target_system = target_system;
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001168:	705a      	strb	r2, [r3, #1]
    packet.target_component = target_component;
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8001172:	709a      	strb	r2, [r3, #2]
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	3303      	adds	r3, #3
 800117a:	22fb      	movs	r2, #251	; 0xfb
 800117c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ffbf 	bl	8001104 <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN);
 8001186:	463b      	mov	r3, r7
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	330c      	adds	r3, #12
 800118c:	f107 0108 	add.w	r1, r7, #8
 8001190:	22fe      	movs	r2, #254	; 0xfe
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fbd2 	bl	800293c <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL;
 8001198:	463b      	mov	r3, r7
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 80011a2:	725a      	strb	r2, [r3, #9]
 80011a4:	2200      	movs	r2, #0
 80011a6:	729a      	strb	r2, [r3, #10]
 80011a8:	2200      	movs	r2, #0
 80011aa:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_MIN_LEN, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_CRC);
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	7819      	ldrb	r1, [r3, #0]
 80011b4:	4638      	mov	r0, r7
 80011b6:	2354      	movs	r3, #84	; 0x54
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	23fe      	movs	r3, #254	; 0xfe
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	23fe      	movs	r3, #254	; 0xfe
 80011c0:	6800      	ldr	r0, [r0, #0]
 80011c2:	f7ff fea2 	bl	8000f0a <mavlink_finalize_message>
 80011c6:	4603      	mov	r3, r0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}

080011d2 <mavlink_msg_file_transfer_protocol_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param file_transfer_protocol C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_file_transfer_protocol_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
 80011d2:	b5b0      	push	{r4, r5, r7, lr}
 80011d4:	b088      	sub	sp, #32
 80011d6:	af04      	add	r7, sp, #16
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	460b      	mov	r3, r1
 80011e2:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_file_transfer_protocol_pack(system_id, component_id, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	781d      	ldrb	r5, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	7892      	ldrb	r2, [r2, #2]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	3103      	adds	r1, #3
 80011f4:	7bbc      	ldrb	r4, [r7, #14]
 80011f6:	7bf8      	ldrb	r0, [r7, #15]
 80011f8:	9102      	str	r1, [sp, #8]
 80011fa:	9201      	str	r2, [sp, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	462b      	mov	r3, r5
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4621      	mov	r1, r4
 8001204:	f7ff ff96 	bl	8001134 <mavlink_msg_file_transfer_protocol_pack>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001214 <MAV_send_File_Transfer_Protocol>:
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
}

void MAV_send_File_Transfer_Protocol(uint8_t payload[], uint8_t payload_len)
{   //sends network id, target system, target component, and payload
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b0c7      	sub	sp, #284	; 0x11c
 8001218:	af00      	add	r7, sp, #0
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	6018      	str	r0, [r3, #0]
 800121e:	460a      	mov	r2, r1
 8001220:	1cfb      	adds	r3, r7, #3
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	466b      	mov	r3, sp
 8001226:	461e      	mov	r6, r3
    //**NOTE: uses payload within payload, see FTP protocol
	//define variables not used (add as arguments for increased functionality)
	uint8_t network_id = 0;//for broadcast
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	uint8_t target_system = 0;//for broadcast
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t target_component = 0;//for broadcast
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//create buffer of proper length
	int PACKET_STATIC_SIZE = 10 + 3 + payload_len + 2; //mavlink[FTP header + payload]mavlink
 800123a:	1cfb      	adds	r3, r7, #3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	330f      	adds	r3, #15
 8001240:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t buffer[PACKET_STATIC_SIZE];
 8001244:	f8d7 5110 	ldr.w	r5, [r7, #272]	; 0x110
 8001248:	1e6b      	subs	r3, r5, #1
 800124a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800124e:	462b      	mov	r3, r5
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	f04f 0400 	mov.w	r4, #0
 800125e:	00d4      	lsls	r4, r2, #3
 8001260:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001264:	00cb      	lsls	r3, r1, #3
 8001266:	462b      	mov	r3, r5
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f04f 0400 	mov.w	r4, #0
 8001276:	00d4      	lsls	r4, r2, #3
 8001278:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800127c:	00cb      	lsls	r3, r1, #3
 800127e:	462b      	mov	r3, r5
 8001280:	3307      	adds	r3, #7
 8001282:	08db      	lsrs	r3, r3, #3
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	ebad 0d03 	sub.w	sp, sp, r3
 800128a:	466b      	mov	r3, sp
 800128c:	3300      	adds	r3, #0
 800128e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//create struct and fill in data
	mavlink_file_transfer_protocol_t msgStruct;
	strcpy(msgStruct.payload,payload);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	f107 0208 	add.w	r2, r7, #8
 8001298:	3203      	adds	r2, #3
 800129a:	6819      	ldr	r1, [r3, #0]
 800129c:	4610      	mov	r0, r2
 800129e:	f001 fb60 	bl	8002962 <strcpy>
	//encode and serialize
	mavlink_msg_file_transfer_protocol_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MAV_send_File_Transfer_Protocol+0xc8>)
 80012a4:	7818      	ldrb	r0, [r3, #0]
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MAV_send_File_Transfer_Protocol+0xcc>)
 80012a8:	7819      	ldrb	r1, [r3, #0]
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <MAV_send_File_Transfer_Protocol+0xd0>)
 80012b0:	f7ff ff8f 	bl	80011d2 <mavlink_msg_file_transfer_protocol_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 80012b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012b8:	490a      	ldr	r1, [pc, #40]	; (80012e4 <MAV_send_File_Transfer_Protocol+0xd0>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe43 	bl	8000f46 <mavlink_msg_to_send_buffer>
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 80012c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012c4:	b2aa      	uxth	r2, r5
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f80d 	bl	80012e8 <Radio_Transmit_Raw>
 80012ce:	46b5      	mov	sp, r6

}
 80012d0:	bf00      	nop
 80012d2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000001 	.word	0x20000001
 80012e4:	20001104 	.word	0x20001104

080012e8 <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <Radio_Transmit_Raw+0x24>)
 80012fe:	f001 f93c 	bl	800257a <HAL_UART_Transmit>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200010c4 	.word	0x200010c4

08001310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_MspInit+0x5c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_MspInit+0x5c>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_MspInit+0x5c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_MspInit+0x60>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_MspInit+0x60>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <HAL_I2C_MspInit+0x74>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d124      	bne.n	80013de <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_I2C_MspInit+0x78>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_I2C_MspInit+0x78>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_I2C_MspInit+0x78>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_I2C_MspInit+0x7c>)
 80013c2:	f000 faa1 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_I2C_MspInit+0x78>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_I2C_MspInit+0x78>)
 80013cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_I2C_MspInit+0x78>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40005800 	.word	0x40005800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_TIM_PWM_MspInit+0x34>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10b      	bne.n	800141e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_TIM_PWM_MspInit+0x38>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_TIM_PWM_MspInit+0x38>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_TIM_PWM_MspInit+0x38>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40000800 	.word	0x40000800
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <HAL_TIM_MspPostInit+0x5c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d118      	bne.n	8001482 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_TIM_MspPostInit+0x60>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_TIM_MspPostInit+0x60>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_TIM_MspPostInit+0x60>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001468:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800146c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2302      	movs	r3, #2
 8001474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_TIM_MspPostInit+0x64>)
 800147e:	f000 fa43 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40000800 	.word	0x40000800
 8001490:	40021000 	.word	0x40021000
 8001494:	40010c00 	.word	0x40010c00

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <HAL_UART_MspInit+0x8c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d131      	bne.n	800151c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <HAL_UART_MspInit+0x94>)
 80014fe:	f000 fa03 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_MspInit+0x94>)
 8001518:	f000 f9f6 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40013800 	.word	0x40013800
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <HardFault_Handler+0x4>

08001542 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <MemManage_Handler+0x4>

08001548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <BusFault_Handler+0x4>

0800154e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <UsageFault_Handler+0x4>

08001554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f8a2 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <SystemInit+0x5c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <SystemInit+0x5c>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <SystemInit+0x5c>)
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4911      	ldr	r1, [pc, #68]	; (80015e0 <SystemInit+0x5c>)
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <SystemInit+0x60>)
 800159c:	4013      	ands	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <SystemInit+0x5c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <SystemInit+0x5c>)
 80015a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <SystemInit+0x5c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SystemInit+0x5c>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <SystemInit+0x5c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <SystemInit+0x5c>)
 80015c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SystemInit+0x5c>)
 80015ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SystemInit+0x64>)
 80015d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	f8ff0000 	.word	0xf8ff0000
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ee:	e003      	b.n	80015f8 <LoopCopyDataInit>

080015f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015f6:	3104      	adds	r1, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001600:	d3f6      	bcc.n	80015f0 <CopyDataInit>
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001604:	e002      	b.n	800160c <LoopFillZerobss>

08001606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001608:	f842 3b04 	str.w	r3, [r2], #4

0800160c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800160e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001610:	d3f9      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001612:	f7ff ffb7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f001 f96d 	bl	80028f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161a:	f7fe fdd7 	bl	80001cc <main>
  bx lr
 800161e:	4770      	bx	lr
  ldr r3, =_sidata
 8001620:	08002acc 	.word	0x08002acc
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001628:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800162c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001630:	2000148c 	.word	0x2000148c

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f929 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fe5c 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f933 	bl	80018ee <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f909 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000004 	.word	0x20000004
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x1c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x20>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_IncTick+0x20>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	20001488 	.word	0x20001488

080016e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_GetTick+0x10>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20001488 	.word	0x20001488

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff fff0 	bl	80016e8 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_Delay+0x40>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffe0 	bl	80016e8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000000c 	.word	0x2000000c

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff90 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff49 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff5e 	bl	8001788 <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff90 	bl	80017f8 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5f 	bl	80017a4 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffb0 	bl	800185c <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	; 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e127      	b.n	8001b6c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800191c:	2201      	movs	r2, #1
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8116 	bne.w	8001b66 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b12      	cmp	r3, #18
 8001940:	d034      	beq.n	80019ac <HAL_GPIO_Init+0xa4>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d80d      	bhi.n	8001962 <HAL_GPIO_Init+0x5a>
 8001946:	2b02      	cmp	r3, #2
 8001948:	d02b      	beq.n	80019a2 <HAL_GPIO_Init+0x9a>
 800194a:	2b02      	cmp	r3, #2
 800194c:	d804      	bhi.n	8001958 <HAL_GPIO_Init+0x50>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d031      	beq.n	80019b6 <HAL_GPIO_Init+0xae>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d01c      	beq.n	8001990 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001956:	e048      	b.n	80019ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001958:	2b03      	cmp	r3, #3
 800195a:	d043      	beq.n	80019e4 <HAL_GPIO_Init+0xdc>
 800195c:	2b11      	cmp	r3, #17
 800195e:	d01b      	beq.n	8001998 <HAL_GPIO_Init+0x90>
          break;
 8001960:	e043      	b.n	80019ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001962:	4a89      	ldr	r2, [pc, #548]	; (8001b88 <HAL_GPIO_Init+0x280>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d026      	beq.n	80019b6 <HAL_GPIO_Init+0xae>
 8001968:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <HAL_GPIO_Init+0x280>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d806      	bhi.n	800197c <HAL_GPIO_Init+0x74>
 800196e:	4a87      	ldr	r2, [pc, #540]	; (8001b8c <HAL_GPIO_Init+0x284>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d020      	beq.n	80019b6 <HAL_GPIO_Init+0xae>
 8001974:	4a86      	ldr	r2, [pc, #536]	; (8001b90 <HAL_GPIO_Init+0x288>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01d      	beq.n	80019b6 <HAL_GPIO_Init+0xae>
          break;
 800197a:	e036      	b.n	80019ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800197c:	4a85      	ldr	r2, [pc, #532]	; (8001b94 <HAL_GPIO_Init+0x28c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0xae>
 8001982:	4a85      	ldr	r2, [pc, #532]	; (8001b98 <HAL_GPIO_Init+0x290>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d016      	beq.n	80019b6 <HAL_GPIO_Init+0xae>
 8001988:	4a84      	ldr	r2, [pc, #528]	; (8001b9c <HAL_GPIO_Init+0x294>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xae>
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e028      	b.n	80019ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e023      	b.n	80019ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01e      	b.n	80019ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e019      	b.n	80019ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e012      	b.n	80019ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e008      	b.n	80019ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2bff      	cmp	r3, #255	; 0xff
 80019ee:	d801      	bhi.n	80019f4 <HAL_GPIO_Init+0xec>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	e001      	b.n	80019f8 <HAL_GPIO_Init+0xf0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2bff      	cmp	r3, #255	; 0xff
 80019fe:	d802      	bhi.n	8001a06 <HAL_GPIO_Init+0xfe>
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x104>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3b08      	subs	r3, #8
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	210f      	movs	r1, #15
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8096 	beq.w	8001b66 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3a:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_GPIO_Init+0x298>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_GPIO_Init+0x298>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <HAL_GPIO_Init+0x298>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a52:	4a54      	ldr	r2, [pc, #336]	; (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x19e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x2a4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x19a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x2a8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x196>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2ac>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x192>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x1a0>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x1a0>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x1a0>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x1a0>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	f002 0203 	and.w	r2, r2, #3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab8:	493a      	ldr	r1, [pc, #232]	; (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4938      	ldr	r1, [pc, #224]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
 8001ade:	e006      	b.n	8001aee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	4933      	ldr	r1, [pc, #204]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afa:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	492e      	ldr	r1, [pc, #184]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4929      	ldr	r1, [pc, #164]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	4924      	ldr	r1, [pc, #144]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	491a      	ldr	r1, [pc, #104]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60cb      	str	r3, [r1, #12]
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4915      	ldr	r1, [pc, #84]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f47f aed0 	bne.w	800191c <HAL_GPIO_Init+0x14>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	372c      	adds	r7, #44	; 0x2c
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	10210000 	.word	0x10210000
 8001b8c:	10110000 	.word	0x10110000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10320000 	.word	0x10320000
 8001b9c:	10220000 	.word	0x10220000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40011400 	.word	0x40011400
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bd8:	e003      	b.n	8001be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e10f      	b.n	8001e1e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fbae 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c30:	f000 f90e 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a7b      	ldr	r2, [pc, #492]	; (8001e28 <HAL_I2C_Init+0x23c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d807      	bhi.n	8001c50 <HAL_I2C_Init+0x64>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_I2C_Init+0x240>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	bf94      	ite	ls
 8001c48:	2301      	movls	r3, #1
 8001c4a:	2300      	movhi	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e006      	b.n	8001c5e <HAL_I2C_Init+0x72>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a77      	ldr	r2, [pc, #476]	; (8001e30 <HAL_I2C_Init+0x244>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0db      	b.n	8001e1e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a72      	ldr	r2, [pc, #456]	; (8001e34 <HAL_I2C_Init+0x248>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9b      	lsrs	r3, r3, #18
 8001c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a64      	ldr	r2, [pc, #400]	; (8001e28 <HAL_I2C_Init+0x23c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d802      	bhi.n	8001ca0 <HAL_I2C_Init+0xb4>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	e009      	b.n	8001cb4 <HAL_I2C_Init+0xc8>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_I2C_Init+0x24c>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4956      	ldr	r1, [pc, #344]	; (8001e28 <HAL_I2C_Init+0x23c>)
 8001cd0:	428b      	cmp	r3, r1
 8001cd2:	d80d      	bhi.n	8001cf0 <HAL_I2C_Init+0x104>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e59      	subs	r1, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	bf38      	it	cc
 8001cec:	2304      	movcc	r3, #4
 8001cee:	e04f      	b.n	8001d90 <HAL_I2C_Init+0x1a4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d111      	bne.n	8001d1c <HAL_I2C_Init+0x130>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e012      	b.n	8001d42 <HAL_I2C_Init+0x156>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e58      	subs	r0, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	0099      	lsls	r1, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Init+0x15e>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e022      	b.n	8001d90 <HAL_I2C_Init+0x1a4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10e      	bne.n	8001d70 <HAL_I2C_Init+0x184>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1e58      	subs	r0, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	440b      	add	r3, r1
 8001d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6e:	e00f      	b.n	8001d90 <HAL_I2C_Init+0x1a4>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e58      	subs	r0, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	0099      	lsls	r1, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d86:	3301      	adds	r3, #1
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	6809      	ldr	r1, [r1, #0]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6911      	ldr	r1, [r2, #16]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	000186a0 	.word	0x000186a0
 8001e2c:	001e847f 	.word	0x001e847f
 8001e30:	003d08ff 	.word	0x003d08ff
 8001e34:	431bde83 	.word	0x431bde83
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff2 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e58:	4601      	mov	r1, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08002abc 	.word	0x08002abc

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e80:	4601      	mov	r1, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0adb      	lsrs	r3, r3, #11
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08002abc 	.word	0x08002abc

08001ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e01d      	b.n	8001eee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fa94 	bl	80013f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 f8d0 	bl	8002084 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0b4      	b.n	800207c <HAL_TIM_PWM_ConfigChannel+0x184>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	f200 809f 	bhi.w	8002068 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001f2a:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	08001f65 	.word	0x08001f65
 8001f34:	08002069 	.word	0x08002069
 8001f38:	08002069 	.word	0x08002069
 8001f3c:	08002069 	.word	0x08002069
 8001f40:	08001fa5 	.word	0x08001fa5
 8001f44:	08002069 	.word	0x08002069
 8001f48:	08002069 	.word	0x08002069
 8001f4c:	08002069 	.word	0x08002069
 8001f50:	08001fe7 	.word	0x08001fe7
 8001f54:	08002069 	.word	0x08002069
 8001f58:	08002069 	.word	0x08002069
 8001f5c:	08002069 	.word	0x08002069
 8001f60:	08002027 	.word	0x08002027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f8ec 	bl	8002148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0208 	orr.w	r2, r2, #8
 8001f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6999      	ldr	r1, [r3, #24]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	619a      	str	r2, [r3, #24]
      break;
 8001fa2:	e062      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f932 	bl	8002214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6999      	ldr	r1, [r3, #24]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	021a      	lsls	r2, r3, #8
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	619a      	str	r2, [r3, #24]
      break;
 8001fe4:	e041      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f97b 	bl	80022e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0208 	orr.w	r2, r2, #8
 8002000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0204 	bic.w	r2, r2, #4
 8002010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69d9      	ldr	r1, [r3, #28]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	61da      	str	r2, [r3, #28]
      break;
 8002024:	e021      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f9c5 	bl	80023bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69d9      	ldr	r1, [r3, #28]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	021a      	lsls	r2, r3, #8
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	61da      	str	r2, [r3, #28]
      break;
 8002066:	e000      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002068:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a29      	ldr	r2, [pc, #164]	; (800213c <TIM_Base_SetConfig+0xb8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00b      	beq.n	80020b4 <TIM_Base_SetConfig+0x30>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d007      	beq.n	80020b4 <TIM_Base_SetConfig+0x30>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a26      	ldr	r2, [pc, #152]	; (8002140 <TIM_Base_SetConfig+0xbc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d003      	beq.n	80020b4 <TIM_Base_SetConfig+0x30>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a25      	ldr	r2, [pc, #148]	; (8002144 <TIM_Base_SetConfig+0xc0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <TIM_Base_SetConfig+0xb8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00b      	beq.n	80020e6 <TIM_Base_SetConfig+0x62>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d007      	beq.n	80020e6 <TIM_Base_SetConfig+0x62>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <TIM_Base_SetConfig+0xbc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d003      	beq.n	80020e6 <TIM_Base_SetConfig+0x62>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <TIM_Base_SetConfig+0xc0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d108      	bne.n	80020f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <TIM_Base_SetConfig+0xb8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d103      	bne.n	800212c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	615a      	str	r2, [r3, #20]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800

08002148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	f023 0201 	bic.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 0302 	bic.w	r3, r3, #2
 8002190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <TIM_OC1_SetConfig+0xc8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d10c      	bne.n	80021be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f023 0308 	bic.w	r3, r3, #8
 80021aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <TIM_OC1_SetConfig+0xc8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d111      	bne.n	80021ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	621a      	str	r2, [r3, #32]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00

08002214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	f023 0210 	bic.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0320 	bic.w	r3, r3, #32
 800225e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <TIM_OC2_SetConfig+0xd0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d10d      	bne.n	8002290 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800227a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800228e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <TIM_OC2_SetConfig+0xd0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d113      	bne.n	80022c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800229e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	40012c00 	.word	0x40012c00

080022e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <TIM_OC3_SetConfig+0xd0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10d      	bne.n	8002362 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800234c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <TIM_OC3_SetConfig+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d113      	bne.n	8002392 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	621a      	str	r2, [r3, #32]
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40012c00 	.word	0x40012c00

080023bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	031b      	lsls	r3, r3, #12
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <TIM_OC4_SetConfig+0x98>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d109      	bne.n	8002430 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	621a      	str	r2, [r3, #32]
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00

08002458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800246c:	2302      	movs	r3, #2
 800246e:	e032      	b.n	80024d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024a8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e03f      	b.n	8002572 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe ffc6 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f90b 	bl	8002740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b088      	sub	sp, #32
 800257e:	af02      	add	r7, sp, #8
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	f040 8083 	bne.w	80026a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_UART_Transmit+0x2e>
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e07b      	b.n	80026a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Transmit+0x40>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e074      	b.n	80026a4 <HAL_UART_Transmit+0x12a>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2221      	movs	r2, #33	; 0x21
 80025cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025d0:	f7ff f88a 	bl	80016e8 <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e2:	e042      	b.n	800266a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fa:	d122      	bne.n	8002642 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2200      	movs	r2, #0
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f850 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e046      	b.n	80026a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002628:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3302      	adds	r3, #2
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	e017      	b.n	800266a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3301      	adds	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	e013      	b.n	800266a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2200      	movs	r2, #0
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f82d 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e023      	b.n	80026a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	60ba      	str	r2, [r7, #8]
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1b7      	bne.n	80025e4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2200      	movs	r2, #0
 800267c:	2140      	movs	r1, #64	; 0x40
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f814 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e00a      	b.n	80026a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026bc:	e02c      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d028      	beq.n	8002718 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <UART_WaitOnFlagUntilTimeout+0x30>
 80026cc:	f7ff f80c 	bl	80016e8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d21d      	bcs.n	8002718 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e00f      	b.n	8002738 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	429a      	cmp	r2, r3
 8002734:	d0c3      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800277a:	f023 030c 	bic.w	r3, r3, #12
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	68f9      	ldr	r1, [r7, #12]
 8002784:	430b      	orrs	r3, r1
 8002786:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <UART_SetConfig+0x1ac>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d14e      	bne.n	8002846 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027a8:	f7ff fb66 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 80027ac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	4a4a      	ldr	r2, [pc, #296]	; (80028f0 <UART_SetConfig+0x1b0>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	0119      	lsls	r1, r3, #4
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009a      	lsls	r2, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <UART_SetConfig+0x1b0>)
 80027e6:	fba3 0302 	umull	r0, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2064      	movs	r0, #100	; 0x64
 80027ee:	fb00 f303 	mul.w	r3, r0, r3
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	3332      	adds	r3, #50	; 0x32
 80027f8:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <UART_SetConfig+0x1b0>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002804:	4419      	add	r1, r3
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fbb2 f2f3 	udiv	r2, r2, r3
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <UART_SetConfig+0x1b0>)
 800281e:	fba3 0302 	umull	r0, r3, r3, r2
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2064      	movs	r0, #100	; 0x64
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	3332      	adds	r3, #50	; 0x32
 8002830:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <UART_SetConfig+0x1b0>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	f003 020f 	and.w	r2, r3, #15
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	440a      	add	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002844:	e04d      	b.n	80028e2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002846:	f7ff fb03 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 800284a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009a      	lsls	r2, r3, #2
 8002856:	441a      	add	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <UART_SetConfig+0x1b0>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	0119      	lsls	r1, r3, #4
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009a      	lsls	r2, r3, #2
 8002876:	441a      	add	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <UART_SetConfig+0x1b0>)
 8002884:	fba3 0302 	umull	r0, r3, r3, r2
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	2064      	movs	r0, #100	; 0x64
 800288c:	fb00 f303 	mul.w	r3, r0, r3
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	3332      	adds	r3, #50	; 0x32
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <UART_SetConfig+0x1b0>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a2:	4419      	add	r1, r3
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	009a      	lsls	r2, r3, #2
 80028ae:	441a      	add	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <UART_SetConfig+0x1b0>)
 80028bc:	fba3 0302 	umull	r0, r3, r3, r2
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	2064      	movs	r0, #100	; 0x64
 80028c4:	fb00 f303 	mul.w	r3, r0, r3
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	3332      	adds	r3, #50	; 0x32
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <UART_SetConfig+0x1b0>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	f003 020f 	and.w	r2, r3, #15
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	440a      	add	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40013800 	.word	0x40013800
 80028f0:	51eb851f 	.word	0x51eb851f

080028f4 <__libc_init_array>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	2500      	movs	r5, #0
 80028f8:	4e0c      	ldr	r6, [pc, #48]	; (800292c <__libc_init_array+0x38>)
 80028fa:	4c0d      	ldr	r4, [pc, #52]	; (8002930 <__libc_init_array+0x3c>)
 80028fc:	1ba4      	subs	r4, r4, r6
 80028fe:	10a4      	asrs	r4, r4, #2
 8002900:	42a5      	cmp	r5, r4
 8002902:	d109      	bne.n	8002918 <__libc_init_array+0x24>
 8002904:	f000 f84a 	bl	800299c <_init>
 8002908:	2500      	movs	r5, #0
 800290a:	4e0a      	ldr	r6, [pc, #40]	; (8002934 <__libc_init_array+0x40>)
 800290c:	4c0a      	ldr	r4, [pc, #40]	; (8002938 <__libc_init_array+0x44>)
 800290e:	1ba4      	subs	r4, r4, r6
 8002910:	10a4      	asrs	r4, r4, #2
 8002912:	42a5      	cmp	r5, r4
 8002914:	d105      	bne.n	8002922 <__libc_init_array+0x2e>
 8002916:	bd70      	pop	{r4, r5, r6, pc}
 8002918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800291c:	4798      	blx	r3
 800291e:	3501      	adds	r5, #1
 8002920:	e7ee      	b.n	8002900 <__libc_init_array+0xc>
 8002922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002926:	4798      	blx	r3
 8002928:	3501      	adds	r5, #1
 800292a:	e7f2      	b.n	8002912 <__libc_init_array+0x1e>
 800292c:	08002ac4 	.word	0x08002ac4
 8002930:	08002ac4 	.word	0x08002ac4
 8002934:	08002ac4 	.word	0x08002ac4
 8002938:	08002ac8 	.word	0x08002ac8

0800293c <memcpy>:
 800293c:	b510      	push	{r4, lr}
 800293e:	1e43      	subs	r3, r0, #1
 8002940:	440a      	add	r2, r1
 8002942:	4291      	cmp	r1, r2
 8002944:	d100      	bne.n	8002948 <memcpy+0xc>
 8002946:	bd10      	pop	{r4, pc}
 8002948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800294c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002950:	e7f7      	b.n	8002942 <memcpy+0x6>

08002952 <memset>:
 8002952:	4603      	mov	r3, r0
 8002954:	4402      	add	r2, r0
 8002956:	4293      	cmp	r3, r2
 8002958:	d100      	bne.n	800295c <memset+0xa>
 800295a:	4770      	bx	lr
 800295c:	f803 1b01 	strb.w	r1, [r3], #1
 8002960:	e7f9      	b.n	8002956 <memset+0x4>

08002962 <strcpy>:
 8002962:	4603      	mov	r3, r0
 8002964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002968:	f803 2b01 	strb.w	r2, [r3], #1
 800296c:	2a00      	cmp	r2, #0
 800296e:	d1f9      	bne.n	8002964 <strcpy+0x2>
 8002970:	4770      	bx	lr

08002972 <strncpy>:
 8002972:	b570      	push	{r4, r5, r6, lr}
 8002974:	4604      	mov	r4, r0
 8002976:	3901      	subs	r1, #1
 8002978:	b902      	cbnz	r2, 800297c <strncpy+0xa>
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	4623      	mov	r3, r4
 800297e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8002982:	1e56      	subs	r6, r2, #1
 8002984:	f803 5b01 	strb.w	r5, [r3], #1
 8002988:	b92d      	cbnz	r5, 8002996 <strncpy+0x24>
 800298a:	4414      	add	r4, r2
 800298c:	42a3      	cmp	r3, r4
 800298e:	d0f4      	beq.n	800297a <strncpy+0x8>
 8002990:	f803 5b01 	strb.w	r5, [r3], #1
 8002994:	e7fa      	b.n	800298c <strncpy+0x1a>
 8002996:	461c      	mov	r4, r3
 8002998:	4632      	mov	r2, r6
 800299a:	e7ed      	b.n	8002978 <strncpy+0x6>

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
