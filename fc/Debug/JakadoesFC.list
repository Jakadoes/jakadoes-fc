
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f34  08003f34  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003f34  08003f34  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f34  08003f34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  20000014  08003f50  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  08003f50  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f161  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002119  00000000  00000000  0002f19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  000312b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  00032220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007a8a  00000000  00000000  000330b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eecc  00000000  00000000  0003ab42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba07f  00000000  00000000  00049a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  00103b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dfc 	.word	0x08003dfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003dfc 	.word	0x08003dfc

0800014c <Cam_Is_Ready>:
uint32_t handle_photo_index = 0;//defines current position in photo transfer
uint8_t  handle_photo_size  = 10;//defines length of each FTP packet data
uint8_t  handle_photo_stop  = 3072;//defines length of image array to be sent

uint8_t Cam_Is_Ready()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	//returns HAL address
	uint8_t cam_ready_status = I2c_IsDeviceReady(CAM_I2C_ADDRESS);
 8000152:	2026      	movs	r0, #38	; 0x26
 8000154:	f000 f9de 	bl	8000514 <I2c_IsDeviceReady>
 8000158:	4603      	mov	r3, r0
 800015a:	71fb      	strb	r3, [r7, #7]
	return cam_ready_status;
 800015c:	79fb      	ldrb	r3, [r7, #7]
}
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}
	...

08000168 <Cam_Set_I2C>:

void Cam_Set_I2C(uint8_t state)
{//uses GPIO pin to indicate to camera either to listen to I2C or resume its duties
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
	if(state == 1)
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	2b01      	cmp	r3, #1
 8000176:	d10a      	bne.n	800018e <Cam_Set_I2C+0x26>
	{
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2180      	movs	r1, #128	; 0x80
 800017c:	480c      	ldr	r0, [pc, #48]	; (80001b0 <Cam_Set_I2C+0x48>)
 800017e:	f001 fff7 	bl	8002170 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//green LED on
 8000182:	2200      	movs	r2, #0
 8000184:	2108      	movs	r1, #8
 8000186:	480b      	ldr	r0, [pc, #44]	; (80001b4 <Cam_Set_I2C+0x4c>)
 8000188:	f001 fff2 	bl	8002170 <HAL_GPIO_WritePin>
	else if (state == 0)
	{
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800018c:	e00c      	b.n	80001a8 <Cam_Set_I2C+0x40>
	else if (state == 0)
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d109      	bne.n	80001a8 <Cam_Set_I2C+0x40>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	2180      	movs	r1, #128	; 0x80
 8000198:	4805      	ldr	r0, [pc, #20]	; (80001b0 <Cam_Set_I2C+0x48>)
 800019a:	f001 ffe9 	bl	8002170 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2108      	movs	r1, #8
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <Cam_Set_I2C+0x4c>)
 80001a4:	f001 ffe4 	bl	8002170 <HAL_GPIO_WritePin>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <Cam_Poll_Alert>:
void Cam_Poll_Alert()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	uint8_t test = 0x22;
 80001be:	2322      	movs	r3, #34	; 0x22
 80001c0:	71fb      	strb	r3, [r7, #7]
	//send single read command
	//receive 8 bits of data
	uint8_t command = CAM_COM_POLL_ALERT;
 80001c2:	2311      	movs	r3, #17
 80001c4:	71bb      	strb	r3, [r7, #6]
	//test = 0x22;
	//Radio_Transmit_Raw(&test, 1);
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);
 80001c6:	1dbb      	adds	r3, r7, #6
 80001c8:	2201      	movs	r2, #1
 80001ca:	4619      	mov	r1, r3
 80001cc:	2026      	movs	r0, #38	; 0x26
 80001ce:	f000 f9b9 	bl	8000544 <I2c_Master_Transmit>
	//if(Cam_Is_Ready() == HAL_OK)//line needs to be not busy for error not to occur
	//{
		 //test = 0x33;
		 //HAL_Delay(600);
		 //Radio_Transmit_Raw(&test, 1);
		 I2c_Master_Receive(CAM_I2C_ADDRESS, cam_alert_rx_buffer, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	4903      	ldr	r1, [pc, #12]	; (80001e4 <Cam_Poll_Alert+0x2c>)
 80001d6:	2026      	movs	r0, #38	; 0x26
 80001d8:	f000 f9d0 	bl	800057c <I2c_Master_Receive>
		 //Radio_Transmit_Raw(&test, 1);
		 //Radio_Transmit_Raw(&cam_alert_rx_buffer, 1);
		 //transmission is getting stuck on, causing the cam to stay in receiving mode
		 //very important to send and expect to recieve the same amount of bytes, otherwise EIO and busy lock down errors
	//}
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	2000108c 	.word	0x2000108c

080001e8 <Cam_Poll_Image>:

void Cam_Poll_Image(uint32_t startIndex, uint8_t numBytes)
{//receives image buffer data starting at startIndex of length numBytes
 80001e8:	b5b0      	push	{r4, r5, r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
 80001f4:	466b      	mov	r3, sp
 80001f6:	461d      	mov	r5, r3
	uint8_t command = CAM_COM_POLL_IMAGE;
 80001f8:	2313      	movs	r3, #19
 80001fa:	74fb      	strb	r3, [r7, #19]
	uint8_t details[5];//format [startIndex [4:1] , numBytes[0]
		details[4] = (uint8_t) (startIndex >> 8*3) & 0x000F;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	0e1b      	lsrs	r3, r3, #24
 8000200:	b2db      	uxtb	r3, r3
 8000202:	f003 030f 	and.w	r3, r3, #15
 8000206:	b2db      	uxtb	r3, r3
 8000208:	743b      	strb	r3, [r7, #16]
		details[3] = (uint8_t) (startIndex >> 8*2) & 0x000F;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	0c1b      	lsrs	r3, r3, #16
 800020e:	b2db      	uxtb	r3, r3
 8000210:	f003 030f 	and.w	r3, r3, #15
 8000214:	b2db      	uxtb	r3, r3
 8000216:	73fb      	strb	r3, [r7, #15]
		details[2] = (uint8_t) (startIndex >> 8*1) & 0x000F;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	0a1b      	lsrs	r3, r3, #8
 800021c:	b2db      	uxtb	r3, r3
 800021e:	f003 030f 	and.w	r3, r3, #15
 8000222:	b2db      	uxtb	r3, r3
 8000224:	73bb      	strb	r3, [r7, #14]
		details[1] = (uint8_t) startIndex & 0x000F;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	f003 030f 	and.w	r3, r3, #15
 800022e:	b2db      	uxtb	r3, r3
 8000230:	737b      	strb	r3, [r7, #13]
		details[0] = numBytes;
 8000232:	78fb      	ldrb	r3, [r7, #3]
 8000234:	733b      	strb	r3, [r7, #12]
	uint8_t test = 0x22;
 8000236:	2322      	movs	r3, #34	; 0x22
 8000238:	72fb      	strb	r3, [r7, #11]
	Radio_Transmit_Raw(&test, 1);
 800023a:	f107 030b 	add.w	r3, r7, #11
 800023e:	2101      	movs	r1, #1
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fb2b 	bl	800189c <Radio_Transmit_Raw>
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);//transmit image command
 8000246:	f107 0313 	add.w	r3, r7, #19
 800024a:	2201      	movs	r2, #1
 800024c:	4619      	mov	r1, r3
 800024e:	2026      	movs	r0, #38	; 0x26
 8000250:	f000 f978 	bl	8000544 <I2c_Master_Transmit>
	//HAL_Delay(500);
	test = 0x33;
 8000254:	2333      	movs	r3, #51	; 0x33
 8000256:	72fb      	strb	r3, [r7, #11]
	Radio_Transmit_Raw(&test, 1);
 8000258:	f107 030b 	add.w	r3, r7, #11
 800025c:	2101      	movs	r1, #1
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fb1c 	bl	800189c <Radio_Transmit_Raw>
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &details, 5);//transmit details of requested transmission
 8000264:	f107 030c 	add.w	r3, r7, #12
 8000268:	2205      	movs	r2, #5
 800026a:	4619      	mov	r1, r3
 800026c:	2026      	movs	r0, #38	; 0x26
 800026e:	f000 f969 	bl	8000544 <I2c_Master_Transmit>
	HAL_Delay(600);//this delay may be needed
 8000272:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000276:	f001 fd1b 	bl	8001cb0 <HAL_Delay>
	test = 0x44;
 800027a:	2344      	movs	r3, #68	; 0x44
 800027c:	72fb      	strb	r3, [r7, #11]
	Radio_Transmit_Raw(&test, 1);
 800027e:	f107 030b 	add.w	r3, r7, #11
 8000282:	2101      	movs	r1, #1
 8000284:	4618      	mov	r0, r3
 8000286:	f001 fb09 	bl	800189c <Radio_Transmit_Raw>
	uint8_t temp_buffer[numBytes];//cannot index rx_buffer directly here!
 800028a:	78f8      	ldrb	r0, [r7, #3]
 800028c:	4603      	mov	r3, r0
 800028e:	3b01      	subs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
 8000292:	b2c1      	uxtb	r1, r0
 8000294:	f04f 0200 	mov.w	r2, #0
 8000298:	f04f 0300 	mov.w	r3, #0
 800029c:	f04f 0400 	mov.w	r4, #0
 80002a0:	00d4      	lsls	r4, r2, #3
 80002a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002a6:	00cb      	lsls	r3, r1, #3
 80002a8:	b2c1      	uxtb	r1, r0
 80002aa:	f04f 0200 	mov.w	r2, #0
 80002ae:	f04f 0300 	mov.w	r3, #0
 80002b2:	f04f 0400 	mov.w	r4, #0
 80002b6:	00d4      	lsls	r4, r2, #3
 80002b8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002bc:	00cb      	lsls	r3, r1, #3
 80002be:	4603      	mov	r3, r0
 80002c0:	3307      	adds	r3, #7
 80002c2:	08db      	lsrs	r3, r3, #3
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	ebad 0d03 	sub.w	sp, sp, r3
 80002ca:	466b      	mov	r3, sp
 80002cc:	3300      	adds	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]
	I2c_Master_Receive(CAM_I2C_ADDRESS, &temp_buffer, numBytes);//receive requested information
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	78fa      	ldrb	r2, [r7, #3]
 80002d4:	b292      	uxth	r2, r2
 80002d6:	4619      	mov	r1, r3
 80002d8:	2026      	movs	r0, #38	; 0x26
 80002da:	f000 f94f 	bl	800057c <I2c_Master_Receive>
	Radio_Transmit_Raw(&test, 1);
 80002de:	f107 030b 	add.w	r3, r7, #11
 80002e2:	2101      	movs	r1, #1
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 fad9 	bl	800189c <Radio_Transmit_Raw>
	///transfer temp to photo buffer
	for (uint32_t i=0; i<numBytes; i++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
 80002ee:	e00b      	b.n	8000308 <Cam_Poll_Image+0x120>
	{
		cam_photo_rx_buffer[startIndex + i] = temp_buffer[i];
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	4413      	add	r3, r2
 80002f6:	6979      	ldr	r1, [r7, #20]
 80002f8:	69fa      	ldr	r2, [r7, #28]
 80002fa:	440a      	add	r2, r1
 80002fc:	7811      	ldrb	r1, [r2, #0]
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <Cam_Poll_Image+0x13c>)
 8000300:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i=0; i<numBytes; i++)
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	3301      	adds	r3, #1
 8000306:	61fb      	str	r3, [r7, #28]
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	69fa      	ldr	r2, [r7, #28]
 800030c:	429a      	cmp	r2, r3
 800030e:	d3ef      	bcc.n	80002f0 <Cam_Poll_Image+0x108>
	}
	HAL_Delay(500);
 8000310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000314:	f001 fccc 	bl	8001cb0 <HAL_Delay>
 8000318:	46ad      	mov	sp, r5
}
 800031a:	bf00      	nop
 800031c:	3720      	adds	r7, #32
 800031e:	46bd      	mov	sp, r7
 8000320:	bdb0      	pop	{r4, r5, r7, pc}
 8000322:	bf00      	nop
 8000324:	20000030 	.word	0x20000030

08000328 <Cam_Transmit_Alert>:

void Cam_Transmit_Alert()
{//send alert status to ground station
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	MAV_Send_Msg_Named_Value_Int("FireAlert", (uint32_t) cam_alert_rx_buffer[0]);
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <Cam_Transmit_Alert+0x14>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4619      	mov	r1, r3
 8000332:	4803      	ldr	r0, [pc, #12]	; (8000340 <Cam_Transmit_Alert+0x18>)
 8000334:	f001 f9b4 	bl	80016a0 <MAV_Send_Msg_Named_Value_Int>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	2000108c 	.word	0x2000108c
 8000340:	08003e14 	.word	0x08003e14

08000344 <Cam_Transmit_Photo>:

void Cam_Transmit_Photo(uint32_t startIndex, uint8_t numBytes)
{
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	466b      	mov	r3, sp
 8000352:	461d      	mov	r5, r3
	uint8_t photo_data[numBytes];
 8000354:	78f8      	ldrb	r0, [r7, #3]
 8000356:	4603      	mov	r3, r0
 8000358:	3b01      	subs	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	b2c1      	uxtb	r1, r0
 800035e:	f04f 0200 	mov.w	r2, #0
 8000362:	f04f 0300 	mov.w	r3, #0
 8000366:	f04f 0400 	mov.w	r4, #0
 800036a:	00d4      	lsls	r4, r2, #3
 800036c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000370:	00cb      	lsls	r3, r1, #3
 8000372:	b2c1      	uxtb	r1, r0
 8000374:	f04f 0200 	mov.w	r2, #0
 8000378:	f04f 0300 	mov.w	r3, #0
 800037c:	f04f 0400 	mov.w	r4, #0
 8000380:	00d4      	lsls	r4, r2, #3
 8000382:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000386:	00cb      	lsls	r3, r1, #3
 8000388:	4603      	mov	r3, r0
 800038a:	3307      	adds	r3, #7
 800038c:	08db      	lsrs	r3, r3, #3
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	ebad 0d03 	sub.w	sp, sp, r3
 8000394:	466b      	mov	r3, sp
 8000396:	3300      	adds	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
	photo_data[0] = startIndex;//encode in first byte index
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	701a      	strb	r2, [r3, #0]
	strncpy(&photo_data[1], &cam_photo_rx_buffer[startIndex], numBytes);
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	1c58      	adds	r0, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <Cam_Transmit_Photo+0x9c>)
 80003aa:	4413      	add	r3, r2
 80003ac:	78fa      	ldrb	r2, [r7, #3]
 80003ae:	4619      	mov	r1, r3
 80003b0:	f003 fd0f 	bl	8003dd2 <strncpy>
	Radio_Transmit_Raw(&photo_data, numBytes);
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	78fa      	ldrb	r2, [r7, #3]
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fa6e 	bl	800189c <Radio_Transmit_Raw>
	HAL_Delay(500);
 80003c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c4:	f001 fc74 	bl	8001cb0 <HAL_Delay>
	MAV_send_File_Transfer_Protocol(&photo_data, numBytes+1);
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4619      	mov	r1, r3
 80003d0:	4610      	mov	r0, r2
 80003d2:	f001 f9bd 	bl	8001750 <MAV_send_File_Transfer_Protocol>
 80003d6:	46ad      	mov	sp, r5
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	20000030 	.word	0x20000030

080003e4 <Cam_Handle>:
	//Radio_Transmit_Raw(&photo_data, numBytes);
	Radio_Transmit_Raw(&photo_data, numBytes);
}

void Cam_Handle()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	//MAV_Send_Debug_Statement_Default();
	if(handle_mode == CAM_MODE_POLLING)//wait for fire detect
 80003e8:	4b44      	ldr	r3, [pc, #272]	; (80004fc <Cam_Handle+0x118>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b11      	cmp	r3, #17
 80003ee:	d125      	bne.n	800043c <Cam_Handle+0x58>
	{
		Cam_Set_I2C(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f7ff feb9 	bl	8000168 <Cam_Set_I2C>
		HAL_Delay(500);
 80003f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003fa:	f001 fc59 	bl	8001cb0 <HAL_Delay>
		if (Cam_Is_Ready() == HAL_OK)
 80003fe:	f7ff fea5 	bl	800014c <Cam_Is_Ready>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d173      	bne.n	80004f0 <Cam_Handle+0x10c>
		{
			Cam_Poll_Alert();
 8000408:	f7ff fed6 	bl	80001b8 <Cam_Poll_Alert>
			Cam_Transmit_Alert();
 800040c:	f7ff ff8c 	bl	8000328 <Cam_Transmit_Alert>
			if(cam_alert_rx_buffer[0] ==  CAM_MODE_ALERT || cam_alert_rx_buffer[0] ==  CAM_MODE_STORED )
 8000410:	4b3b      	ldr	r3, [pc, #236]	; (8000500 <Cam_Handle+0x11c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b22      	cmp	r3, #34	; 0x22
 8000416:	d003      	beq.n	8000420 <Cam_Handle+0x3c>
 8000418:	4b39      	ldr	r3, [pc, #228]	; (8000500 <Cam_Handle+0x11c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b33      	cmp	r3, #51	; 0x33
 800041e:	d105      	bne.n	800042c <Cam_Handle+0x48>
			{
				Cam_Transmit_Alert();//send alert
 8000420:	f7ff ff82 	bl	8000328 <Cam_Transmit_Alert>
				handle_mode = CAM_MODE_ALERT;
 8000424:	4b35      	ldr	r3, [pc, #212]	; (80004fc <Cam_Handle+0x118>)
 8000426:	2222      	movs	r2, #34	; 0x22
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	e061      	b.n	80004f0 <Cam_Handle+0x10c>
			}
			else
			{
				Cam_Set_I2C(0);
 800042c:	2000      	movs	r0, #0
 800042e:	f7ff fe9b 	bl	8000168 <Cam_Set_I2C>
				HAL_Delay(5000);
 8000432:	f241 3088 	movw	r0, #5000	; 0x1388
 8000436:	f001 fc3b 	bl	8001cb0 <HAL_Delay>
 800043a:	e059      	b.n	80004f0 <Cam_Handle+0x10c>
			}
		}
	}
	else if(handle_mode == CAM_MODE_ALERT)//wait for photo request and image to be stored
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <Cam_Handle+0x118>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b22      	cmp	r3, #34	; 0x22
 8000442:	d123      	bne.n	800048c <Cam_Handle+0xa8>
	{
		Cam_Set_I2C(1);
 8000444:	2001      	movs	r0, #1
 8000446:	f7ff fe8f 	bl	8000168 <Cam_Set_I2C>
		HAL_Delay(500);
 800044a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800044e:	f001 fc2f 	bl	8001cb0 <HAL_Delay>
		if (Cam_Is_Ready() == HAL_OK)
 8000452:	f7ff fe7b 	bl	800014c <Cam_Is_Ready>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d103      	bne.n	8000464 <Cam_Handle+0x80>
		{
			Cam_Poll_Alert();
 800045c:	f7ff feac 	bl	80001b8 <Cam_Poll_Alert>
			Cam_Transmit_Alert();
 8000460:	f7ff ff62 	bl	8000328 <Cam_Transmit_Alert>
		}

		if(handle_gs_request == CAM_GS_IMG_DOWNLOAD && cam_alert_rx_buffer[0] ==  CAM_MODE_STORED)//mavlink request + stored image needed
 8000464:	4b27      	ldr	r3, [pc, #156]	; (8000504 <Cam_Handle+0x120>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b11      	cmp	r3, #17
 800046a:	d107      	bne.n	800047c <Cam_Handle+0x98>
 800046c:	4b24      	ldr	r3, [pc, #144]	; (8000500 <Cam_Handle+0x11c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b33      	cmp	r3, #51	; 0x33
 8000472:	d103      	bne.n	800047c <Cam_Handle+0x98>
		{
			handle_mode = CAM_MODE_STORED;
 8000474:	4b21      	ldr	r3, [pc, #132]	; (80004fc <Cam_Handle+0x118>)
 8000476:	2233      	movs	r2, #51	; 0x33
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	e039      	b.n	80004f0 <Cam_Handle+0x10c>
		}
		else
		{
			Cam_Set_I2C(0);
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe73 	bl	8000168 <Cam_Set_I2C>
			HAL_Delay(5000);
 8000482:	f241 3088 	movw	r0, #5000	; 0x1388
 8000486:	f001 fc13 	bl	8001cb0 <HAL_Delay>
 800048a:	e031      	b.n	80004f0 <Cam_Handle+0x10c>
		}
	}
	else if(handle_mode == CAM_MODE_STORED)
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <Cam_Handle+0x118>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b33      	cmp	r3, #51	; 0x33
 8000492:	d12d      	bne.n	80004f0 <Cam_Handle+0x10c>
	{
		Cam_Set_I2C(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff fe67 	bl	8000168 <Cam_Set_I2C>
		HAL_Delay(100);
 800049a:	2064      	movs	r0, #100	; 0x64
 800049c:	f001 fc08 	bl	8001cb0 <HAL_Delay>
		if(handle_photo_index < handle_photo_stop)
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <Cam_Handle+0x124>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <Cam_Handle+0x128>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d91d      	bls.n	80004ea <Cam_Handle+0x106>
		{
			if (Cam_Is_Ready() == HAL_OK)
 80004ae:	f7ff fe4d 	bl	800014c <Cam_Is_Ready>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d11b      	bne.n	80004f0 <Cam_Handle+0x10c>
			{
				Cam_Poll_Image(handle_photo_index, handle_photo_size);
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <Cam_Handle+0x128>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <Cam_Handle+0x12c>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4610      	mov	r0, r2
 80004c4:	f7ff fe90 	bl	80001e8 <Cam_Poll_Image>
				Cam_Transmit_Photo(handle_photo_index,handle_photo_size);//send photo data
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <Cam_Handle+0x128>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <Cam_Handle+0x12c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	4610      	mov	r0, r2
 80004d4:	f7ff ff36 	bl	8000344 <Cam_Transmit_Photo>
				handle_photo_index += handle_photo_size;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <Cam_Handle+0x12c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <Cam_Handle+0x128>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <Cam_Handle+0x128>)
 80004e6:	6013      	str	r3, [r2, #0]
 80004e8:	e002      	b.n	80004f0 <Cam_Handle+0x10c>
			}
		}
		else
		{
			handle_mode = CAM_MODE_POLLING;
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <Cam_Handle+0x118>)
 80004ec:	2211      	movs	r2, #17
 80004ee:	701a      	strb	r2, [r3, #0]
		}
	}
	Cam_Set_I2C(0);
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff fe39 	bl	8000168 <Cam_Set_I2C>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000
 8000500:	2000108c 	.word	0x2000108c
 8000504:	20000001 	.word	0x20000001
 8000508:	20000fd4 	.word	0x20000fd4
 800050c:	20000fd0 	.word	0x20000fd0
 8000510:	20000002 	.word	0x20000002

08000514 <I2c_IsDeviceReady>:
I2C_HandleTypeDef hi2c2;
#define I2C_TRIALS_DEFAULT 40
#define I2C_TIMEOUT_DEFAULT 2000

uint8_t I2c_IsDeviceReady(uint8_t Address)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	b29b      	uxth	r3, r3
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	81fb      	strh	r3, [r7, #14]
	//uint16_t devAddress = 0b0000000001110111;
	uint8_t test[2];
	//test[1] = devAddress & 0xff;
	//test[0] = devAddress >>8;
	//Radio_Transmit_Raw(&test, 2);
	return HAL_I2C_IsDeviceReady(&hi2c2, devAddress, I2C_TRIALS_DEFAULT, I2C_TIMEOUT_DEFAULT);
 8000526:	89f9      	ldrh	r1, [r7, #14]
 8000528:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800052c:	2228      	movs	r2, #40	; 0x28
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <I2c_IsDeviceReady+0x2c>)
 8000530:	f002 fa8a 	bl	8002a48 <HAL_I2C_IsDeviceReady>
 8000534:	4603      	mov	r3, r0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20001038 	.word	0x20001038

08000544 <I2c_Master_Transmit>:

void I2c_Master_Transmit(uint8_t Address, uint8_t* message, uint16_t messageSize)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left once before use (check HAL documentation)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	b29b      	uxth	r3, r3
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, devAddress, message, messageSize, I2C_TIMEOUT_DEFAULT);
 800055c:	88ba      	ldrh	r2, [r7, #4]
 800055e:	89f9      	ldrh	r1, [r7, #14]
 8000560:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	4613      	mov	r3, r2
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <I2c_Master_Transmit+0x34>)
 800056c:	f001 ff40 	bl	80023f0 <HAL_I2C_Master_Transmit>
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20001038 	.word	0x20001038

0800057c <I2c_Master_Receive>:

void I2c_Master_Receive(uint8_t Address, uint8_t* messageDestination, uint16_t messageSize)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	b29b      	uxth	r3, r3
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Receive(&hi2c2, devAddress, messageDestination, messageSize, I2C_TIMEOUT_DEFAULT);
 8000594:	88ba      	ldrh	r2, [r7, #4]
 8000596:	89f9      	ldrh	r1, [r7, #14]
 8000598:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	4613      	mov	r3, r2
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <I2c_Master_Receive+0x34>)
 80005a4:	f002 f822 	bl	80025ec <HAL_I2C_Master_Receive>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20001038 	.word	0x20001038

080005b4 <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 80005ba:	f001 fb17 	bl	8001bec <HAL_Init>
	MX_USART1_UART_Init();
 80005be:	f000 f8e1 	bl	8000784 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 80005c2:	f000 f863 	bl	800068c <MX_TIM4_Init>
	MX_I2C2_Init();
 80005c6:	f000 f833 	bl	8000630 <MX_I2C2_Init>
	MX_GPIO_Init();
 80005ca:	f000 f905 	bl	80007d8 <MX_GPIO_Init>
	//    1  // Component ID (a MAV_COMPONENT value)
	//};
	//Motor_Arm();
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]

	uint8_t payload_test[10] = {1,2,3,4,5,6,7,8,9,10};
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <main+0x70>)
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d4:	c303      	stmia	r3!, {r0, r1}
 80005d6:	801a      	strh	r2, [r3, #0]
	//uint8_t payload_test[10];
	for (uint8_t i=0; i<10;i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]
 80005dc:	e00b      	b.n	80005f6 <main+0x42>
	{
		payload_test[i] = i+1;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	3201      	adds	r2, #1
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	f107 0110 	add.w	r1, r7, #16
 80005ea:	440b      	add	r3, r1
 80005ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i=0; i<10;i++)
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	3301      	adds	r3, #1
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b09      	cmp	r3, #9
 80005fa:	d9f0      	bls.n	80005de <main+0x2a>
	}
	//uint8_t test[5] = {0x55, 0x55, 0x55, 0x55, 0x55};
	//uint8_t baro_flag = 5;
	cam_photo_rx_buffer[10] = 0x44;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <main+0x74>)
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	729a      	strb	r2, [r3, #10]
	cam_photo_rx_buffer[11] = 0x55;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0x74>)
 8000604:	2255      	movs	r2, #85	; 0x55
 8000606:	72da      	strb	r2, [r3, #11]
	cam_photo_rx_buffer[12] = 0x66;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <main+0x74>)
 800060a:	2266      	movs	r2, #102	; 0x66
 800060c:	731a      	strb	r2, [r3, #12]
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2108      	movs	r1, #8
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <main+0x78>)
 8000614:	f001 fdac 	bl	8002170 <HAL_GPIO_WritePin>
		//Cam_Set_I2C(0);
		HAL_Delay(1000);
		*/
		//-- code part 3 --
		///*
		Cam_Handle();
 8000618:	f7ff fee4 	bl	80003e4 <Cam_Handle>
		HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f001 fb47 	bl	8001cb0 <HAL_Delay>
		Cam_Handle();
 8000622:	e7f9      	b.n	8000618 <main+0x64>
 8000624:	08003e20 	.word	0x08003e20
 8000628:	20000030 	.word	0x20000030
 800062c:	40010c00 	.word	0x40010c00

08000630 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C2_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C2_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C2_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C2_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C2_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C2_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C2_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C2_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C2_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C2_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C2_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C2_Init+0x50>)
 800066e:	f001 fd97 	bl	80021a0 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f900 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20001038 	.word	0x20001038
 8000684:	40005800 	.word	0x40005800
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006ae:	4b33      	ldr	r3, [pc, #204]	; (800077c <MX_TIM4_Init+0xf0>)
 80006b0:	4a33      	ldr	r2, [pc, #204]	; (8000780 <MX_TIM4_Init+0xf4>)
 80006b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <MX_TIM4_Init+0xf0>)
 80006b6:	220a      	movs	r2, #10
 80006b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_TIM4_Init+0xf0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 80006c0:	4b2e      	ldr	r3, [pc, #184]	; (800077c <MX_TIM4_Init+0xf0>)
 80006c2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80006c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <MX_TIM4_Init+0xf0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_TIM4_Init+0xf0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006d4:	4829      	ldr	r0, [pc, #164]	; (800077c <MX_TIM4_Init+0xf0>)
 80006d6:	f002 fe13 	bl	8003300 <HAL_TIM_PWM_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80006e0:	f000 f8cc 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4619      	mov	r1, r3
 80006f2:	4822      	ldr	r0, [pc, #136]	; (800077c <MX_TIM4_Init+0xf0>)
 80006f4:	f003 f8e0 	bl	80038b8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80006fe:	f000 f8bd 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000702:	2360      	movs	r3, #96	; 0x60
 8000704:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 8000706:	f44f 7348 	mov.w	r3, #800	; 0x320
 800070a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	4818      	ldr	r0, [pc, #96]	; (800077c <MX_TIM4_Init+0xf0>)
 800071c:	f002 fe1c 	bl	8003358 <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000726:	f000 f8a9 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2204      	movs	r2, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_TIM4_Init+0xf0>)
 8000732:	f002 fe11 	bl	8003358 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800073c:	f000 f89e 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2208      	movs	r2, #8
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM4_Init+0xf0>)
 8000748:	f002 fe06 	bl	8003358 <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000752:	f000 f893 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	220c      	movs	r2, #12
 800075a:	4619      	mov	r1, r3
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <MX_TIM4_Init+0xf0>)
 800075e:	f002 fdfb 	bl	8003358 <HAL_TIM_PWM_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000768:	f000 f888 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <MX_TIM4_Init+0xf0>)
 800076e:	f001 f939 	bl	80019e4 <HAL_TIM_MspPostInit>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20001090 	.word	0x20001090
 8000780:	40000800 	.word	0x40000800

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_USART1_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2*57600;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007bc:	f003 f8c0 	bl	8003940 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f859 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200010d0 	.word	0x200010d0
 80007d4:	40013800 	.word	0x40013800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_GPIO_Init+0x98>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <MX_GPIO_Init+0x98>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_GPIO_Init+0x98>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_GPIO_Init+0x98>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <MX_GPIO_Init+0x98>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_GPIO_Init+0x98>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_GPIO_Init+0x9c>)
 8000822:	f001 fca5 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	4813      	ldr	r0, [pc, #76]	; (8000878 <MX_GPIO_Init+0xa0>)
 800082c:	f001 fca0 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2302      	movs	r3, #2
 800083e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4619      	mov	r1, r3
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <MX_GPIO_Init+0x9c>)
 8000848:	f001 fb38 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800084c:	2308      	movs	r3, #8
 800084e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	4619      	mov	r1, r3
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_GPIO_Init+0xa0>)
 8000864:	f001 fb2a 	bl	8001ebc <HAL_GPIO_Init>

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800
 8000878:	40010c00 	.word	0x40010c00

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4053      	eors	r3, r2
 800089e:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	4053      	eors	r3, r2
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4053      	eors	r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4053      	eors	r3, r2
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4053      	eors	r3, r2
 80008d8:	b21b      	sxth	r3, r3
 80008da:	b29a      	uxth	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	801a      	strh	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f8:	801a      	strh	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000910:	f107 030e 	add.w	r3, r7, #14
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ffe8 	bl	80008ea <crc_init>
	while (length--) {
 800091a:	e009      	b.n	8000930 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	f107 020e 	add.w	r2, r7, #14
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ffac 	bl	8000888 <crc_accumulate>
	while (length--) {
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	807a      	strh	r2, [r7, #2]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f0      	bne.n	800091c <crc_calculate+0x18>
        }
        return crcTmp;
 800093a:	89fb      	ldrh	r3, [r7, #14]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4613      	mov	r3, r2
 8000950:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000956:	e007      	b.n	8000968 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	617a      	str	r2, [r7, #20]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	68f9      	ldr	r1, [r7, #12]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff90 	bl	8000888 <crc_accumulate>
	while (length--) {
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	80fa      	strh	r2, [r7, #6]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1f2      	bne.n	8000958 <crc_accumulate_buffer+0x14>
        }
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <mavlink_sha256_init+0x50>)
 8000994:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <mavlink_sha256_init+0x54>)
 800099a:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <mavlink_sha256_init+0x58>)
 80009a0:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <mavlink_sha256_init+0x5c>)
 80009a6:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <mavlink_sha256_init+0x60>)
 80009ac:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <mavlink_sha256_init+0x64>)
 80009b2:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <mavlink_sha256_init+0x68>)
 80009b8:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <mavlink_sha256_init+0x6c>)
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	6a09e667 	.word	0x6a09e667
 80009d0:	bb67ae85 	.word	0xbb67ae85
 80009d4:	3c6ef372 	.word	0x3c6ef372
 80009d8:	a54ff53a 	.word	0xa54ff53a
 80009dc:	510e527f 	.word	0x510e527f
 80009e0:	9b05688c 	.word	0x9b05688c
 80009e4:	1f83d9ab 	.word	0x1f83d9ab
 80009e8:	5be0cd19 	.word	0x5be0cd19

080009ec <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b0cf      	sub	sp, #316	; 0x13c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	6018      	str	r0, [r3, #0]
 80009f6:	463b      	mov	r3, r7
 80009f8:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a50:	e011      	b.n	8000a76 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8000a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	463a      	mov	r2, r7
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	6819      	ldr	r1, [r3, #0]
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a70:	3301      	adds	r3, #1
 8000a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	dde9      	ble.n	8000a52 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 8000a7e:	2310      	movs	r3, #16
 8000a80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a84:	e057      	b.n	8000b36 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a8a:	1e9a      	subs	r2, r3, #2
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a94:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a9c:	1e99      	subs	r1, r3, #2
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000aa6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000aaa:	405a      	eors	r2, r3
 8000aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ab0:	1e99      	subs	r1, r3, #2
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000aba:	0a9b      	lsrs	r3, r3, #10
 8000abc:	405a      	eors	r2, r3
 8000abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ac2:	1fd9      	subs	r1, r3, #7
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000acc:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ad2:	f1a3 010f 	sub.w	r1, r3, #15
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ade:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ae6:	f1a3 000f 	sub.w	r0, r3, #15
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000af2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000af6:	4059      	eors	r1, r3
 8000af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000afc:	f1a3 000f 	sub.w	r0, r3, #15
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000b0c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b12:	f1a3 0110 	sub.w	r1, r3, #16
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b1e:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b3c:	dda3      	ble.n	8000a86 <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000b44:	e076      	b.n	8000c34 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000b46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b4a:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000b4e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b52:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000b56:	405a      	eors	r2, r3
 8000b58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b5c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000b60:	405a      	eors	r2, r3
 8000b62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b66:	441a      	add	r2, r3
 8000b68:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000b6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b70:	4019      	ands	r1, r3
 8000b72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b76:	43d8      	mvns	r0, r3
 8000b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b7c:	4003      	ands	r3, r0
 8000b7e:	404b      	eors	r3, r1
 8000b80:	441a      	add	r2, r3
 8000b82:	4955      	ldr	r1, [pc, #340]	; (8000cd8 <mavlink_sha256_calc+0x2ec>)
 8000b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b8c:	441a      	add	r2, r3
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000b96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000ba0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ba4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000bac:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000bb0:	405a      	eors	r2, r3
 8000bb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000bb6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000bba:	405a      	eors	r2, r3
 8000bbc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000bc4:	4059      	eors	r1, r3
 8000bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000bca:	4019      	ands	r1, r3
 8000bcc:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000bd4:	4003      	ands	r3, r0
 8000bd6:	404b      	eors	r3, r1
 8000bd8:	4413      	add	r3, r2
 8000bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000be2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000bee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000bf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000bf6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000bfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bfe:	4413      	add	r3, r2
 8000c00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000c0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000c14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000c1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c24:	4413      	add	r3, r2
 8000c26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c2e:	3301      	adds	r3, #1
 8000c30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c38:	2b3f      	cmp	r3, #63	; 0x3f
 8000c3a:	dd84      	ble.n	8000b46 <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c46:	441a      	add	r2, r3
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	609a      	str	r2, [r3, #8]
    B += BB;
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c58:	441a      	add	r2, r3
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	60da      	str	r2, [r3, #12]
    C += CC;
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c6a:	441a      	add	r2, r3
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	611a      	str	r2, [r3, #16]
    D += DD;
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c7c:	441a      	add	r2, r3
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	615a      	str	r2, [r3, #20]
    E += EE;
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	699a      	ldr	r2, [r3, #24]
 8000c8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c8e:	441a      	add	r2, r3
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	619a      	str	r2, [r3, #24]
    F += FF;
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	69da      	ldr	r2, [r3, #28]
 8000c9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ca0:	441a      	add	r2, r3
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	61da      	str	r2, [r3, #28]
    G += GG;
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6a1a      	ldr	r2, [r3, #32]
 8000cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000cb2:	441a      	add	r2, r3
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	621a      	str	r2, [r3, #32]
    H += HH;
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000cc4:	441a      	add	r2, r3
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ccc:	bf00      	nop
 8000cce:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	08003e2c 	.word	0x08003e2c

08000cdc <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	441a      	add	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d904      	bls.n	8000d14 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000d1e:	e054      	b.n	8000dca <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d22:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d26:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d201      	bcs.n	8000d34 <mavlink_sha256_update+0x58>
            l = len;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d3c:	4413      	add	r3, r2
 8000d3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 f82a 	bl	8003d9c <memcpy>
	offset += l;
 8000d48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d4c:	4413      	add	r3, r2
 8000d4e:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d54:	4413      	add	r3, r2
 8000d56:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d62:	2b40      	cmp	r3, #64	; 0x40
 8000d64:	d131      	bne.n	8000dca <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3328      	adds	r3, #40	; 0x28
 8000d6a:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8000d70:	e020      	b.n	8000db4 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000d78:	4413      	add	r3, r2
 8000d7a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000d7c:	f107 0210 	add.w	r2, r7, #16
 8000d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d8a:	78da      	ldrb	r2, [r3, #3]
 8000d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d8e:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d92:	3301      	adds	r3, #1
 8000d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d96:	7892      	ldrb	r2, [r2, #2]
 8000d98:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000da0:	7852      	ldrb	r2, [r2, #1]
 8000da2:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da6:	3303      	adds	r3, #3
 8000da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000daa:	7812      	ldrb	r2, [r2, #0]
 8000dac:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db0:	3301      	adds	r3, #1
 8000db2:	663b      	str	r3, [r7, #96]	; 0x60
 8000db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	dddb      	ble.n	8000d72 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f7ff fe13 	bl	80009ec <mavlink_sha256_calc>
	    offset = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1a7      	bne.n	8000d20 <mavlink_sha256_update+0x44>
	}
    }
}
 8000dd0:	bf00      	nop
 8000dd2:	3770      	adds	r7, #112	; 0x70
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b098      	sub	sp, #96	; 0x60
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dec:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df0:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	3301      	adds	r3, #1
 8000dfa:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3308      	adds	r3, #8
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	2247      	movs	r2, #71	; 0x47
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 ffce 	bl	8003db2 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e1c:	3307      	adds	r3, #7
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e24:	440b      	add	r3, r1
 8000e26:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0a1a      	lsrs	r2, r3, #8
 8000e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e32:	3306      	adds	r3, #6
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1a      	lsrs	r2, r3, #16
 8000e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e48:	3305      	adds	r3, #5
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e50:	440b      	add	r3, r1
 8000e52:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	0e1a      	lsrs	r2, r3, #24
 8000e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e5e:	3304      	adds	r3, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e66:	440b      	add	r3, r1
 8000e68:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e72:	3303      	adds	r3, #3
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	0a1a      	lsrs	r2, r3, #8
 8000e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e88:	3302      	adds	r3, #2
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e90:	440b      	add	r3, r1
 8000e92:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	0c1a      	lsrs	r2, r3, #16
 8000e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	0e1b      	lsrs	r3, r3, #24
 8000eb2:	b2d9      	uxtb	r1, r3
 8000eb4:	f107 020c 	add.w	r2, r7, #12
 8000eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eba:	4413      	add	r3, r2
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ec2:	f103 0208 	add.w	r2, r3, #8
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff05 	bl	8000cdc <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ed4:	78da      	ldrb	r2, [r3, #3]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ee0:	7892      	ldrb	r2, [r2, #2]
 8000ee2:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eea:	7852      	ldrb	r2, [r2, #1]
 8000eec:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3303      	adds	r3, #3
 8000ef2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	3304      	adds	r3, #4
 8000efc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000efe:	79d2      	ldrb	r2, [r2, #7]
 8000f00:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3305      	adds	r3, #5
 8000f06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f08:	7992      	ldrb	r2, [r2, #6]
 8000f0a:	701a      	strb	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	3760      	adds	r7, #96	; 0x60
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <mavlink_get_channel_status+0x24>)
 8000f2a:	4413      	add	r3, r2
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000fd8 	.word	0x20000fd8

08000f3c <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b0a1      	sub	sp, #132	; 0x84
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <mavlink_sign_packet+0x20>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <mavlink_sign_packet+0x24>
	    return 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e051      	b.n	8001004 <mavlink_sign_packet+0xc8>
	}
	signature[0] = signing->link_id;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	785a      	ldrb	r2, [r3, #1]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f103 0408 	add.w	r4, r3, #8
 8000f6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f72:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f107 0110 	add.w	r1, r7, #16
 8000f7e:	2206      	movs	r2, #6
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 ff0b 	bl	8003d9c <memcpy>
	signing->timestamp++;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000f8c:	1c4b      	adds	r3, r1, #1
 8000f8e:	f142 0400 	adc.w	r4, r2, #0
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fced 	bl	800097c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f103 0110 	add.w	r1, r3, #16
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	2220      	movs	r2, #32
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fe94 	bl	8000cdc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000fb4:	78fa      	ldrb	r2, [r7, #3]
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe8d 	bl	8000cdc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000fc2:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe84 	bl	8000cdc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe7c 	bl	8000cdc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	2207      	movs	r2, #7
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fe75 	bl	8000cdc <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1dda      	adds	r2, r3, #7
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff feeb 	bl	8000dd8 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001002:	230d      	movs	r3, #13
}
 8001004:	4618      	mov	r0, r3
 8001006:	3784      	adds	r7, #132	; 0x84
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001018:	e002      	b.n	8001020 <_mav_trim_payload+0x14>
		length--;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	3b01      	subs	r3, #1
 800101e:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d906      	bls.n	8001034 <_mav_trim_payload+0x28>
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	3b01      	subs	r3, #1
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f2      	beq.n	800101a <_mav_trim_payload+0xe>
	}
	return length;
 8001034:	78fb      	ldrb	r3, [r7, #3]
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b08f      	sub	sp, #60	; 0x3c
 8001044:	af04      	add	r7, sp, #16
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	72fb      	strb	r3, [r7, #11]
 800104e:	4613      	mov	r3, r2
 8001050:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7b1b      	ldrb	r3, [r3, #12]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf14      	ite	ne
 800105e:	2301      	movne	r3, #1
 8001060:	2300      	moveq	r3, #0
 8001062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <mavlink_finalize_message_buffer+0x4e>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <mavlink_finalize_message_buffer+0x4e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <mavlink_finalize_message_buffer+0x4e>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <mavlink_finalize_message_buffer+0x50>
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001094:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80010a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <mavlink_finalize_message_buffer+0x6c>
 80010a8:	230d      	movs	r3, #13
 80010aa:	e000      	b.n	80010ae <mavlink_finalize_message_buffer+0x6e>
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80010b2:	230a      	movs	r3, #10
 80010b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 80010b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	22fe      	movs	r2, #254	; 0xfe
 80010c4:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80010c6:	2306      	movs	r3, #6
 80010c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010cc:	e002      	b.n	80010d4 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	22fd      	movs	r2, #253	; 0xfd
 80010d2:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80010d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10a      	bne.n	80010f2 <mavlink_finalize_message_buffer+0xb2>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	330c      	adds	r3, #12
 80010e0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff90 	bl	800100c <_mav_trim_payload>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	e001      	b.n	80010f6 <mavlink_finalize_message_buffer+0xb6>
 80010f2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7afa      	ldrb	r2, [r7, #11]
 80010fe:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	7aba      	ldrb	r2, [r7, #10]
 8001104:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	711a      	strb	r2, [r3, #4]
	if (signing) {
 800110c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	799a      	ldrb	r2, [r3, #6]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	799b      	ldrb	r3, [r3, #6]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	799b      	ldrb	r3, [r3, #6]
 8001154:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	79db      	ldrb	r3, [r3, #7]
 800115a:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	7a1b      	ldrb	r3, [r3, #8]
 8001160:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	7a5a      	ldrb	r2, [r3, #9]
 8001166:	7a99      	ldrb	r1, [r3, #10]
 8001168:	0209      	lsls	r1, r1, #8
 800116a:	430a      	orrs	r2, r1
 800116c:	7adb      	ldrb	r3, [r3, #11]
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	4313      	orrs	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	777b      	strb	r3, [r7, #29]
 8001176:	e030      	b.n	80011da <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	791b      	ldrb	r3, [r3, #4]
 800117c:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	795b      	ldrb	r3, [r3, #5]
 8001182:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	799b      	ldrb	r3, [r3, #6]
 8001188:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	79db      	ldrb	r3, [r3, #7]
 800118e:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	7a1b      	ldrb	r3, [r3, #8]
 8001194:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	7a5a      	ldrb	r2, [r3, #9]
 800119a:	7a99      	ldrb	r1, [r3, #10]
 800119c:	0209      	lsls	r1, r1, #8
 800119e:	430a      	orrs	r2, r1
 80011a0:	7adb      	ldrb	r3, [r3, #11]
 80011a2:	041b      	lsls	r3, r3, #16
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	7a5a      	ldrb	r2, [r3, #9]
 80011ae:	7a99      	ldrb	r1, [r3, #10]
 80011b0:	0209      	lsls	r1, r1, #8
 80011b2:	430a      	orrs	r2, r1
 80011b4:	7adb      	ldrb	r3, [r3, #11]
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	4313      	orrs	r3, r2
 80011ba:	121b      	asrs	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	7a5a      	ldrb	r2, [r3, #9]
 80011c6:	7a99      	ldrb	r1, [r3, #10]
 80011c8:	0209      	lsls	r1, r1, #8
 80011ca:	430a      	orrs	r2, r1
 80011cc:	7adb      	ldrb	r3, [r3, #11]
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	4313      	orrs	r3, r2
 80011d2:	141b      	asrs	r3, r3, #16
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 80011da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	3301      	adds	r3, #1
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fb89 	bl	8000904 <crc_calculate>
 80011f2:	4603      	mov	r3, r0
 80011f4:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f103 010c 	add.w	r1, r3, #12
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	b29a      	uxth	r2, r3
 8001202:	f107 0316 	add.w	r3, r7, #22
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fb9c 	bl	8000944 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 800120c:	f107 0216 	add.w	r2, r7, #22
 8001210:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb36 	bl	8000888 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800121c:	8af9      	ldrh	r1, [r7, #22]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	330c      	adds	r3, #12
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	78d2      	ldrb	r2, [r2, #3]
 8001226:	4413      	add	r3, r2
 8001228:	b2ca      	uxtb	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800122c:	8afb      	ldrh	r3, [r7, #22]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b299      	uxth	r1, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f103 020c 	add.w	r2, r3, #12
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	78db      	ldrb	r3, [r3, #3]
 800123c:	3301      	adds	r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	b2ca      	uxtb	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	801a      	strh	r2, [r3, #0]

	if (signing) {
 800124a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800124e:	2b00      	cmp	r3, #0
 8001250:	d01a      	beq.n	8001288 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	310c      	adds	r1, #12
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800126c:	4401      	add	r1, r0
 800126e:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001272:	f107 0018 	add.w	r0, r7, #24
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	4633      	mov	r3, r6
 800127e:	4602      	mov	r2, r0
 8001280:	4629      	mov	r1, r5
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff fe5a 	bl	8000f3c <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	b29a      	uxth	r2, r3
 800128e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800129c:	b29b      	uxth	r3, r3
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3302      	adds	r3, #2
 80012a4:	b29b      	uxth	r3, r3
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	372c      	adds	r7, #44	; 0x2c
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ae <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b088      	sub	sp, #32
 80012b2:	af04      	add	r7, sp, #16
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	4608      	mov	r0, r1
 80012b8:	4611      	mov	r1, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	4603      	mov	r3, r0
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70bb      	strb	r3, [r7, #2]
 80012c4:	4613      	mov	r3, r2
 80012c6:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe22 	bl	8000f14 <mavlink_get_channel_status>
 80012d0:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80012d2:	78ba      	ldrb	r2, [r7, #2]
 80012d4:	78f9      	ldrb	r1, [r7, #3]
 80012d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	7f3b      	ldrb	r3, [r7, #28]
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	7e3b      	ldrb	r3, [r7, #24]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff feaa 	bl	8001040 <mavlink_finalize_message_buffer>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af04      	add	r7, sp, #16
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	4608      	mov	r0, r1
 8001300:	4611      	mov	r1, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4603      	mov	r3, r0
 8001306:	70fb      	strb	r3, [r7, #3]
 8001308:	460b      	mov	r3, r1
 800130a:	70bb      	strb	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001310:	78ba      	ldrb	r2, [r7, #2]
 8001312:	78f9      	ldrb	r1, [r7, #3]
 8001314:	7d3b      	ldrb	r3, [r7, #20]
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	7c3b      	ldrb	r3, [r7, #16]
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffc3 	bl	80012ae <mavlink_finalize_message_chan>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	78db      	ldrb	r3, [r3, #3]
 8001340:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	2bfe      	cmp	r3, #254	; 0xfe
 8001348:	d13a      	bne.n	80013c0 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800134e:	2305      	movs	r3, #5
 8001350:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	789a      	ldrb	r2, [r3, #2]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3302      	adds	r3, #2
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	7992      	ldrb	r2, [r2, #6]
 800136a:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3303      	adds	r3, #3
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	79d2      	ldrb	r2, [r2, #7]
 8001374:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3304      	adds	r3, #4
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	7a12      	ldrb	r2, [r2, #8]
 800137e:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	7a5a      	ldrb	r2, [r3, #9]
 8001384:	7a99      	ldrb	r1, [r3, #10]
 8001386:	0209      	lsls	r1, r1, #8
 8001388:	430a      	orrs	r2, r1
 800138a:	7adb      	ldrb	r3, [r3, #11]
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	4313      	orrs	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3305      	adds	r3, #5
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	1d98      	adds	r0, r3, #6
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f103 010c 	add.w	r1, r3, #12
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	78db      	ldrb	r3, [r3, #3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	f002 fcf7 	bl	8003d9c <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	78d2      	ldrb	r2, [r2, #3]
 80013b4:	4413      	add	r3, r2
 80013b6:	3301      	adds	r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	e06c      	b.n	800149a <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	330c      	adds	r3, #12
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe1f 	bl	800100c <_mav_trim_payload>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80013d2:	2309      	movs	r3, #9
 80013d4:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	789a      	ldrb	r2, [r3, #2]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3301      	adds	r3, #1
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3302      	adds	r3, #2
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	7912      	ldrb	r2, [r2, #4]
 80013ee:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3303      	adds	r3, #3
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	7952      	ldrb	r2, [r2, #5]
 80013f8:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3304      	adds	r3, #4
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	7992      	ldrb	r2, [r2, #6]
 8001402:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3305      	adds	r3, #5
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	79d2      	ldrb	r2, [r2, #7]
 800140c:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3306      	adds	r3, #6
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	7a12      	ldrb	r2, [r2, #8]
 8001416:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	7a5a      	ldrb	r2, [r3, #9]
 800141c:	7a99      	ldrb	r1, [r3, #10]
 800141e:	0209      	lsls	r1, r1, #8
 8001420:	430a      	orrs	r2, r1
 8001422:	7adb      	ldrb	r3, [r3, #11]
 8001424:	041b      	lsls	r3, r3, #16
 8001426:	4313      	orrs	r3, r2
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3307      	adds	r3, #7
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	7a5a      	ldrb	r2, [r3, #9]
 8001436:	7a99      	ldrb	r1, [r3, #10]
 8001438:	0209      	lsls	r1, r1, #8
 800143a:	430a      	orrs	r2, r1
 800143c:	7adb      	ldrb	r3, [r3, #11]
 800143e:	041b      	lsls	r3, r3, #16
 8001440:	4313      	orrs	r3, r2
 8001442:	121a      	asrs	r2, r3, #8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3308      	adds	r3, #8
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	7a5a      	ldrb	r2, [r3, #9]
 8001450:	7a99      	ldrb	r1, [r3, #10]
 8001452:	0209      	lsls	r1, r1, #8
 8001454:	430a      	orrs	r2, r1
 8001456:	7adb      	ldrb	r3, [r3, #11]
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	4313      	orrs	r3, r2
 800145c:	141a      	asrs	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3309      	adds	r3, #9
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f103 000a 	add.w	r0, r3, #10
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	330c      	adds	r3, #12
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	4619      	mov	r1, r3
 8001474:	f002 fc92 	bl	8003d9c <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001478:	7dba      	ldrb	r2, [r7, #22]
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	4413      	add	r3, r2
 800147e:	3301      	adds	r3, #1
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <mavlink_msg_to_send_buffer+0x164>
 8001492:	230d      	movs	r3, #13
 8001494:	e000      	b.n	8001498 <mavlink_msg_to_send_buffer+0x166>
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1c98      	adds	r0, r3, #2
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80014c8:	7dfa      	ldrb	r2, [r7, #23]
 80014ca:	4619      	mov	r1, r3
 80014cc:	f002 fc66 	bl	8003d9c <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80014d0:	7dbb      	ldrb	r3, [r7, #22]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4413      	add	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3303      	adds	r3, #3
 80014e6:	b29b      	uxth	r3, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d105      	bne.n	800150e <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	2100      	movs	r1, #0
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f002 fc53 	bl	8003db2 <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 800150c:	e004      	b.n	8001518 <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f002 fc42 	bl	8003d9c <memcpy>
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <mavlink_msg_file_transfer_protocol_pack>:
 * @param payload  Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_file_transfer_protocol_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b0c5      	sub	sp, #276	; 0x114
 8001524:	af02      	add	r7, sp, #8
 8001526:	4604      	mov	r4, r0
 8001528:	4608      	mov	r0, r1
 800152a:	4639      	mov	r1, r7
 800152c:	600a      	str	r2, [r1, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	4622      	mov	r2, r4
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	1dbb      	adds	r3, r7, #6
 8001538:	4602      	mov	r2, r0
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	460a      	mov	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
    _mav_put_uint8_t(buf, 2, target_component);
    _mav_put_uint8_t_array(buf, 3, payload, 251);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN);
#else
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	1d7a      	adds	r2, r7, #5
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	701a      	strb	r2, [r3, #0]
    packet.target_system = target_system;
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001554:	705a      	strb	r2, [r3, #1]
    packet.target_component = target_component;
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 800155e:	709a      	strb	r2, [r3, #2]
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	3303      	adds	r3, #3
 8001566:	22fb      	movs	r2, #251	; 0xfb
 8001568:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffbf 	bl	80014f0 <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN);
 8001572:	463b      	mov	r3, r7
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	330c      	adds	r3, #12
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	22fe      	movs	r2, #254	; 0xfe
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fc0c 	bl	8003d9c <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL;
 8001584:	463b      	mov	r3, r7
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800158e:	725a      	strb	r2, [r3, #9]
 8001590:	2200      	movs	r2, #0
 8001592:	729a      	strb	r2, [r3, #10]
 8001594:	2200      	movs	r2, #0
 8001596:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_MIN_LEN, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_CRC);
 8001598:	1dbb      	adds	r3, r7, #6
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	4638      	mov	r0, r7
 80015a2:	2354      	movs	r3, #84	; 0x54
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	23fe      	movs	r3, #254	; 0xfe
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	23fe      	movs	r3, #254	; 0xfe
 80015ac:	6800      	ldr	r0, [r0, #0]
 80015ae:	f7ff fea2 	bl	80012f6 <mavlink_finalize_message>
 80015b2:	4603      	mov	r3, r0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}

080015be <mavlink_msg_file_transfer_protocol_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param file_transfer_protocol C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_file_transfer_protocol_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
 80015be:	b5b0      	push	{r4, r5, r7, lr}
 80015c0:	b088      	sub	sp, #32
 80015c2:	af04      	add	r7, sp, #16
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	460b      	mov	r3, r1
 80015ce:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_file_transfer_protocol_pack(system_id, component_id, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781d      	ldrb	r5, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	7892      	ldrb	r2, [r2, #2]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	3103      	adds	r1, #3
 80015e0:	7bbc      	ldrb	r4, [r7, #14]
 80015e2:	7bf8      	ldrb	r0, [r7, #15]
 80015e4:	9102      	str	r1, [sp, #8]
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	462b      	mov	r3, r5
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	4621      	mov	r1, r4
 80015f0:	f7ff ff96 	bl	8001520 <mavlink_msg_file_transfer_protocol_pack>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}

080015fe <mavlink_msg_named_value_int_pack>:
 * @param value  Signed integer value
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, int32_t value)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b08c      	sub	sp, #48	; 0x30
 8001602:	af02      	add	r7, sp, #8
 8001604:	60ba      	str	r2, [r7, #8]
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	460b      	mov	r3, r1
 800160e:	73bb      	strb	r3, [r7, #14]
    _mav_put_int32_t(buf, 4, value);
    _mav_put_char_array(buf, 8, name, 10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#else
    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	617b      	str	r3, [r7, #20]
    packet.value = value;
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	61bb      	str	r3, [r7, #24]
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	3308      	adds	r3, #8
 800161e:	220a      	movs	r2, #10
 8001620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff64 	bl	80014f0 <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	330c      	adds	r3, #12
 800162c:	f107 0114 	add.w	r1, r7, #20
 8001630:	2212      	movs	r2, #18
 8001632:	4618      	mov	r0, r3
 8001634:	f002 fbb2 	bl	8003d9c <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_NAMED_VALUE_INT;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2200      	movs	r2, #0
 800163c:	f062 0203 	orn	r2, r2, #3
 8001640:	725a      	strb	r2, [r3, #9]
 8001642:	2200      	movs	r2, #0
 8001644:	729a      	strb	r2, [r3, #10]
 8001646:	2200      	movs	r2, #0
 8001648:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_NAMED_VALUE_INT_MIN_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
 800164a:	7bba      	ldrb	r2, [r7, #14]
 800164c:	7bf9      	ldrb	r1, [r7, #15]
 800164e:	232c      	movs	r3, #44	; 0x2c
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2312      	movs	r3, #18
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2312      	movs	r3, #18
 8001658:	68b8      	ldr	r0, [r7, #8]
 800165a:	f7ff fe4c 	bl	80012f6 <mavlink_finalize_message>
 800165e:	4603      	mov	r3, r0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <mavlink_msg_named_value_int_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param named_value_int C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b087      	sub	sp, #28
 800166c:	af02      	add	r7, sp, #8
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	460b      	mov	r3, r1
 8001678:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681c      	ldr	r4, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3308      	adds	r3, #8
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6852      	ldr	r2, [r2, #4]
 8001686:	7bb9      	ldrb	r1, [r7, #14]
 8001688:	7bf8      	ldrb	r0, [r7, #15]
 800168a:	9201      	str	r2, [sp, #4]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4623      	mov	r3, r4
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	f7ff ffb4 	bl	80015fe <mavlink_msg_named_value_int_pack>
 8001696:	4603      	mov	r3, r0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <MAV_Send_Msg_Named_Value_Int>:
	     }//end if
	}//end for
}

void MAV_Send_Msg_Named_Value_Int(char message[], uint32_t value)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b08b      	sub	sp, #44	; 0x2c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	466b      	mov	r3, sp
 80016ac:	461e      	mov	r6, r3
	//create buffer of static proper length (static for this mavlink message)
	int PACKET_STATIC_SIZE = 30; //used to determine buffer size, and reduce bad 00's being sent
 80016ae:	231e      	movs	r3, #30
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
	char buffer[PACKET_STATIC_SIZE];
 80016b2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80016b4:	1e6b      	subs	r3, r5, #1
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	462b      	mov	r3, r5
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	f04f 0400 	mov.w	r4, #0
 80016c8:	00d4      	lsls	r4, r2, #3
 80016ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016ce:	00cb      	lsls	r3, r1, #3
 80016d0:	462b      	mov	r3, r5
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	f04f 0400 	mov.w	r4, #0
 80016e0:	00d4      	lsls	r4, r2, #3
 80016e2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016e6:	00cb      	lsls	r3, r1, #3
 80016e8:	462b      	mov	r3, r5
 80016ea:	3307      	adds	r3, #7
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	ebad 0d03 	sub.w	sp, sp, r3
 80016f4:	466b      	mov	r3, sp
 80016f6:	3300      	adds	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]

	//create struct and fill in data
	mavlink_named_value_int_t msgStruct;
	strcpy(msgStruct.name,message);
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	3308      	adds	r3, #8
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fb5d 	bl	8003dc2 <strcpy>
	msgStruct.time_boot_ms = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	60bb      	str	r3, [r7, #8]
	msgStruct.value = value;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	60fb      	str	r3, [r7, #12]
	//encode and serialize
	mavlink_msg_named_value_int_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MAV_Send_Msg_Named_Value_Int+0xa4>)
 8001712:	7818      	ldrb	r0, [r3, #0]
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MAV_Send_Msg_Named_Value_Int+0xa8>)
 8001716:	7819      	ldrb	r1, [r3, #0]
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <MAV_Send_Msg_Named_Value_Int+0xac>)
 800171e:	f7ff ffa3 	bl	8001668 <mavlink_msg_named_value_int_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4909      	ldr	r1, [pc, #36]	; (800174c <MAV_Send_Msg_Named_Value_Int+0xac>)
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fe03 	bl	8001332 <mavlink_msg_to_send_buffer>
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	b2aa      	uxth	r2, r5
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f8b2 	bl	800189c <Radio_Transmit_Raw>
 8001738:	46b5      	mov	sp, r6
}
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001742:	bf00      	nop
 8001744:	20000003 	.word	0x20000003
 8001748:	20000004 	.word	0x20000004
 800174c:	20001110 	.word	0x20001110

08001750 <MAV_send_File_Transfer_Protocol>:

void MAV_send_File_Transfer_Protocol(uint8_t payload[], uint8_t payload_len)
{   //sends network id, target system, target component, and payload
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8001756:	af00      	add	r7, sp, #0
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	6018      	str	r0, [r3, #0]
 800175c:	460a      	mov	r2, r1
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	701a      	strb	r2, [r3, #0]
    //**NOTE: uses payload within payload, see FTP protocol

	//define variables not used (add as arguments for increased functionality)
	uint8_t network_id = 0;//for broadcast
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	uint8_t target_system = 0;//for broadcast
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	uint8_t target_component = 0;//for broadcast
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
	uint8_t payload_new[251];//copy payload to new array for fixed size of 251
	payload_new[0] = payload_len; //encode first byte as amount of space used in payload
 8001774:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001778:	1cfa      	adds	r2, r7, #3
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=1;i<251;i++)
 800177e:	2301      	movs	r3, #1
 8001780:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8001784:	e01e      	b.n	80017c4 <MAV_send_File_Transfer_Protocol+0x74>
	{	if(i <payload_len+1)
 8001786:	f897 2215 	ldrb.w	r2, [r7, #533]	; 0x215
 800178a:	1cfb      	adds	r3, r7, #3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	429a      	cmp	r2, r3
 8001792:	da0c      	bge.n	80017ae <MAV_send_File_Transfer_Protocol+0x5e>
		{
			payload_new[i] = payload[i-1];
 8001794:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001798:	3b01      	subs	r3, #1
 800179a:	1d3a      	adds	r2, r7, #4
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	441a      	add	r2, r3
 80017a0:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80017a4:	7811      	ldrb	r1, [r2, #0]
 80017a6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80017aa:	54d1      	strb	r1, [r2, r3]
 80017ac:	e005      	b.n	80017ba <MAV_send_File_Transfer_Protocol+0x6a>
		}
		else
		{
			payload_new[i] = 0xFF;//fill dead space
 80017ae:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80017b2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80017b6:	21ff      	movs	r1, #255	; 0xff
 80017b8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=1;i<251;i++)
 80017ba:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80017be:	3301      	adds	r3, #1
 80017c0:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 80017c4:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80017c8:	2bfa      	cmp	r3, #250	; 0xfa
 80017ca:	d9dc      	bls.n	8001786 <MAV_send_File_Transfer_Protocol+0x36>
	}
	//strcpy(payload_new,payload);

	//create buffer of proper length
	//int PACKET_STATIC_SIZE = 10 + 3 + payload_len + 2; //mavlink[FTP header + payload]mavlink
	int PACKET_STATIC_SIZE = 10 + 3 + 251 + 2; //mavlink[FTP header + payload]mavlink
 80017cc:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80017d0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	uint8_t buffer[PACKET_STATIC_SIZE];
 80017d4:	f8d7 5210 	ldr.w	r5, [r7, #528]	; 0x210
 80017d8:	466b      	mov	r3, sp
 80017da:	461e      	mov	r6, r3
 80017dc:	1e6b      	subs	r3, r5, #1
 80017de:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80017e2:	462b      	mov	r3, r5
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	f04f 0400 	mov.w	r4, #0
 80017f2:	00d4      	lsls	r4, r2, #3
 80017f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80017f8:	00cb      	lsls	r3, r1, #3
 80017fa:	462b      	mov	r3, r5
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	00d4      	lsls	r4, r2, #3
 800180c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001810:	00cb      	lsls	r3, r1, #3
 8001812:	462b      	mov	r3, r5
 8001814:	3307      	adds	r3, #7
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	ebad 0d03 	sub.w	sp, sp, r3
 800181e:	466b      	mov	r3, sp
 8001820:	3300      	adds	r3, #0
 8001822:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	//create struct and fill in data
	mavlink_file_transfer_protocol_t msgStruct;
	msgStruct.target_network = network_id;
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	f897 2216 	ldrb.w	r2, [r7, #534]	; 0x216
 800182e:	701a      	strb	r2, [r3, #0]
	msgStruct.target_system = target_system;
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 8001838:	705a      	strb	r2, [r3, #1]
	msgStruct.target_component = target_component;
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	f897 2214 	ldrb.w	r2, [r7, #532]	; 0x214
 8001842:	709a      	strb	r2, [r3, #2]
	strcpy(msgStruct.payload,payload_new);
 8001844:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	3303      	adds	r3, #3
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fab6 	bl	8003dc2 <strcpy>

	//encode and serialize
	mavlink_msg_file_transfer_protocol_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MAV_send_File_Transfer_Protocol+0x140>)
 8001858:	7818      	ldrb	r0, [r3, #0]
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MAV_send_File_Transfer_Protocol+0x144>)
 800185c:	7819      	ldrb	r1, [r3, #0]
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <MAV_send_File_Transfer_Protocol+0x148>)
 8001864:	f7ff feab 	bl	80015be <mavlink_msg_file_transfer_protocol_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 8001868:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800186c:	490a      	ldr	r1, [pc, #40]	; (8001898 <MAV_send_File_Transfer_Protocol+0x148>)
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd5f 	bl	8001332 <mavlink_msg_to_send_buffer>

	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 8001874:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001878:	b2aa      	uxth	r2, r5
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f80d 	bl	800189c <Radio_Transmit_Raw>
 8001882:	46b5      	mov	sp, r6

}
 8001884:	bf00      	nop
 8001886:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800188a:	46bd      	mov	sp, r7
 800188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800188e:	bf00      	nop
 8001890:	20000003 	.word	0x20000003
 8001894:	20000004 	.word	0x20000004
 8001898:	20001110 	.word	0x20001110

0800189c <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <Radio_Transmit_Raw+0x24>)
 80018b2:	f002 f892 	bl	80039da <HAL_UART_Transmit>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200010d0 	.word	0x200010d0

080018c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_MspInit+0x5c>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_MspInit+0x5c>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6193      	str	r3, [r2, #24]
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_MspInit+0x5c>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_MspInit+0x5c>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_MspInit+0x5c>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_MspInit+0x5c>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_MspInit+0x60>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_MspInit+0x60>)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000
 8001924:	40010000 	.word	0x40010000

08001928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <HAL_I2C_MspInit+0x74>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d124      	bne.n	8001992 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_I2C_MspInit+0x78>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_I2C_MspInit+0x78>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_I2C_MspInit+0x78>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001960:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001966:	2312      	movs	r3, #18
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <HAL_I2C_MspInit+0x7c>)
 8001976:	f000 faa1 	bl	8001ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_I2C_MspInit+0x78>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_I2C_MspInit+0x78>)
 8001980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_I2C_MspInit+0x78>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40005800 	.word	0x40005800
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010c00 	.word	0x40010c00

080019a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_TIM_PWM_MspInit+0x34>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10b      	bne.n	80019d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_TIM_PWM_MspInit+0x38>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_TIM_PWM_MspInit+0x38>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_TIM_PWM_MspInit+0x38>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40000800 	.word	0x40000800
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0x5c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d118      	bne.n	8001a36 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_TIM_MspPostInit+0x60>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_TIM_MspPostInit+0x60>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_MspPostInit+0x60>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a1c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_TIM_MspPostInit+0x64>)
 8001a32:	f000 fa43 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40000800 	.word	0x40000800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010c00 	.word	0x40010c00

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_UART_MspInit+0x8c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d131      	bne.n	8001ad0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <HAL_UART_MspInit+0x94>)
 8001ab2:	f000 fa03 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_UART_MspInit+0x94>)
 8001acc:	f000 f9f6 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010800 	.word	0x40010800

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <HardFault_Handler+0x4>

08001af6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <MemManage_Handler+0x4>

08001afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <BusFault_Handler+0x4>

08001b02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <UsageFault_Handler+0x4>

08001b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f8a2 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <SystemInit+0x5c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <SystemInit+0x5c>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <SystemInit+0x5c>)
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4911      	ldr	r1, [pc, #68]	; (8001b94 <SystemInit+0x5c>)
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <SystemInit+0x60>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <SystemInit+0x5c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <SystemInit+0x5c>)
 8001b5a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <SystemInit+0x5c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SystemInit+0x5c>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <SystemInit+0x5c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <SystemInit+0x5c>)
 8001b76:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b7a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SystemInit+0x5c>)
 8001b7e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b82:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SystemInit+0x64>)
 8001b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	f8ff0000 	.word	0xf8ff0000
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ba0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ba2:	e003      	b.n	8001bac <LoopCopyDataInit>

08001ba4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ba6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ba8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001baa:	3104      	adds	r1, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bac:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bb4:	d3f6      	bcc.n	8001ba4 <CopyDataInit>
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bb8:	e002      	b.n	8001bc0 <LoopFillZerobss>

08001bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bbc:	f842 3b04 	str.w	r3, [r2], #4

08001bc0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bc2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bc4:	d3f9      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc6:	f7ff ffb7 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f002 f8c3 	bl	8003d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bce:	f7fe fcf1 	bl	80005b4 <main>
  bx lr
 8001bd2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bd4:	08003f3c 	.word	0x08003f3c
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bdc:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001be0:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001be4:	20001498 	.word	0x20001498

08001be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_Init+0x28>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_Init+0x28>)
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f929 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fe5c 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f933 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 f909 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000010 	.word	0x20000010
 8001c74:	2000000c 	.word	0x2000000c

08001c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x1c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x20>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_IncTick+0x20>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000010 	.word	0x20000010
 8001c98:	20001494 	.word	0x20001494

08001c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_GetTick+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20001494 	.word	0x20001494

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff fff0 	bl	8001c9c <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_Delay+0x40>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffe0 	bl	8001c9c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000010 	.word	0x20000010

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff49 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff5e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffb0 	bl	8001e10 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b08b      	sub	sp, #44	; 0x2c
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e127      	b.n	8002120 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 8116 	bne.w	800211a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d034      	beq.n	8001f60 <HAL_GPIO_Init+0xa4>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d80d      	bhi.n	8001f16 <HAL_GPIO_Init+0x5a>
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_Init+0x9a>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d804      	bhi.n	8001f0c <HAL_GPIO_Init+0x50>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d031      	beq.n	8001f6a <HAL_GPIO_Init+0xae>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d01c      	beq.n	8001f44 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0a:	e048      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d043      	beq.n	8001f98 <HAL_GPIO_Init+0xdc>
 8001f10:	2b11      	cmp	r3, #17
 8001f12:	d01b      	beq.n	8001f4c <HAL_GPIO_Init+0x90>
          break;
 8001f14:	e043      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f16:	4a89      	ldr	r2, [pc, #548]	; (800213c <HAL_GPIO_Init+0x280>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d026      	beq.n	8001f6a <HAL_GPIO_Init+0xae>
 8001f1c:	4a87      	ldr	r2, [pc, #540]	; (800213c <HAL_GPIO_Init+0x280>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d806      	bhi.n	8001f30 <HAL_GPIO_Init+0x74>
 8001f22:	4a87      	ldr	r2, [pc, #540]	; (8002140 <HAL_GPIO_Init+0x284>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d020      	beq.n	8001f6a <HAL_GPIO_Init+0xae>
 8001f28:	4a86      	ldr	r2, [pc, #536]	; (8002144 <HAL_GPIO_Init+0x288>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01d      	beq.n	8001f6a <HAL_GPIO_Init+0xae>
          break;
 8001f2e:	e036      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f30:	4a85      	ldr	r2, [pc, #532]	; (8002148 <HAL_GPIO_Init+0x28c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0xae>
 8001f36:	4a85      	ldr	r2, [pc, #532]	; (800214c <HAL_GPIO_Init+0x290>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d016      	beq.n	8001f6a <HAL_GPIO_Init+0xae>
 8001f3c:	4a84      	ldr	r2, [pc, #528]	; (8002150 <HAL_GPIO_Init+0x294>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0xae>
          break;
 8001f42:	e02c      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	623b      	str	r3, [r7, #32]
          break;
 8001f4a:	e028      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	3304      	adds	r3, #4
 8001f52:	623b      	str	r3, [r7, #32]
          break;
 8001f54:	e023      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e01e      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	330c      	adds	r3, #12
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e019      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f72:	2304      	movs	r3, #4
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e012      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f80:	2308      	movs	r3, #8
 8001f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	611a      	str	r2, [r3, #16]
          break;
 8001f8a:	e008      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	615a      	str	r2, [r3, #20]
          break;
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2bff      	cmp	r3, #255	; 0xff
 8001fa2:	d801      	bhi.n	8001fa8 <HAL_GPIO_Init+0xec>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	e001      	b.n	8001fac <HAL_GPIO_Init+0xf0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2bff      	cmp	r3, #255	; 0xff
 8001fb2:	d802      	bhi.n	8001fba <HAL_GPIO_Init+0xfe>
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x104>
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	3b08      	subs	r3, #8
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	6a39      	ldr	r1, [r7, #32]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8096 	beq.w	800211a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fee:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_GPIO_Init+0x298>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_GPIO_Init+0x298>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_GPIO_Init+0x298>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002006:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_GPIO_Init+0x29c>)
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_GPIO_Init+0x2a0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x19e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_GPIO_Init+0x2a4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x19a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a49      	ldr	r2, [pc, #292]	; (8002164 <HAL_GPIO_Init+0x2a8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x196>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_GPIO_Init+0x2ac>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x192>
 800204a:	2303      	movs	r3, #3
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x1a0>
 800204e:	2304      	movs	r3, #4
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x1a0>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x1a0>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x1a0>
 800205a:	2300      	movs	r3, #0
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206c:	493a      	ldr	r1, [pc, #232]	; (8002158 <HAL_GPIO_Init+0x29c>)
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002086:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_GPIO_Init+0x2b0>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4938      	ldr	r1, [pc, #224]	; (800216c <HAL_GPIO_Init+0x2b0>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_GPIO_Init+0x2b0>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	43db      	mvns	r3, r3
 800209c:	4933      	ldr	r1, [pc, #204]	; (800216c <HAL_GPIO_Init+0x2b0>)
 800209e:	4013      	ands	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	492e      	ldr	r1, [pc, #184]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
 80020ba:	e006      	b.n	80020ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4929      	ldr	r1, [pc, #164]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d6:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4924      	ldr	r1, [pc, #144]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	491f      	ldr	r1, [pc, #124]	; (800216c <HAL_GPIO_Init+0x2b0>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_GPIO_Init+0x2b0>)
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	491a      	ldr	r1, [pc, #104]	; (800216c <HAL_GPIO_Init+0x2b0>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	60cb      	str	r3, [r1, #12]
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_GPIO_Init+0x2b0>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	43db      	mvns	r3, r3
 8002114:	4915      	ldr	r1, [pc, #84]	; (800216c <HAL_GPIO_Init+0x2b0>)
 8002116:	4013      	ands	r3, r2
 8002118:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	3301      	adds	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f aed0 	bne.w	8001ed0 <HAL_GPIO_Init+0x14>
  }
}
 8002130:	bf00      	nop
 8002132:	372c      	adds	r7, #44	; 0x2c
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	10210000 	.word	0x10210000
 8002140:	10110000 	.word	0x10110000
 8002144:	10120000 	.word	0x10120000
 8002148:	10310000 	.word	0x10310000
 800214c:	10320000 	.word	0x10320000
 8002150:	10220000 	.word	0x10220000
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00
 8002164:	40011000 	.word	0x40011000
 8002168:	40011400 	.word	0x40011400
 800216c:	40010400 	.word	0x40010400

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e10f      	b.n	80023d2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff fbae 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2224      	movs	r2, #36	; 0x24
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e4:	f001 f864 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a7b      	ldr	r2, [pc, #492]	; (80023dc <HAL_I2C_Init+0x23c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d807      	bhi.n	8002204 <HAL_I2C_Init+0x64>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a7a      	ldr	r2, [pc, #488]	; (80023e0 <HAL_I2C_Init+0x240>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e006      	b.n	8002212 <HAL_I2C_Init+0x72>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a77      	ldr	r2, [pc, #476]	; (80023e4 <HAL_I2C_Init+0x244>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0db      	b.n	80023d2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a72      	ldr	r2, [pc, #456]	; (80023e8 <HAL_I2C_Init+0x248>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a64      	ldr	r2, [pc, #400]	; (80023dc <HAL_I2C_Init+0x23c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d802      	bhi.n	8002254 <HAL_I2C_Init+0xb4>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3301      	adds	r3, #1
 8002252:	e009      	b.n	8002268 <HAL_I2C_Init+0xc8>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_I2C_Init+0x24c>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	3301      	adds	r3, #1
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800227a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4956      	ldr	r1, [pc, #344]	; (80023dc <HAL_I2C_Init+0x23c>)
 8002284:	428b      	cmp	r3, r1
 8002286:	d80d      	bhi.n	80022a4 <HAL_I2C_Init+0x104>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e59      	subs	r1, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fbb1 f3f3 	udiv	r3, r1, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	bf38      	it	cc
 80022a0:	2304      	movcc	r3, #4
 80022a2:	e04f      	b.n	8002344 <HAL_I2C_Init+0x1a4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d111      	bne.n	80022d0 <HAL_I2C_Init+0x130>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e58      	subs	r0, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e012      	b.n	80022f6 <HAL_I2C_Init+0x156>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e58      	subs	r0, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	0099      	lsls	r1, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Init+0x15e>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e022      	b.n	8002344 <HAL_I2C_Init+0x1a4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10e      	bne.n	8002324 <HAL_I2C_Init+0x184>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e58      	subs	r0, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	440b      	add	r3, r1
 8002314:	fbb0 f3f3 	udiv	r3, r0, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002322:	e00f      	b.n	8002344 <HAL_I2C_Init+0x1a4>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	6809      	ldr	r1, [r1, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6911      	ldr	r1, [r2, #16]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68d2      	ldr	r2, [r2, #12]
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	000186a0 	.word	0x000186a0
 80023e0:	001e847f 	.word	0x001e847f
 80023e4:	003d08ff 	.word	0x003d08ff
 80023e8:	431bde83 	.word	0x431bde83
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	461a      	mov	r2, r3
 80023fc:	460b      	mov	r3, r1
 80023fe:	817b      	strh	r3, [r7, #10]
 8002400:	4613      	mov	r3, r2
 8002402:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff fc4a 	bl	8001c9c <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b20      	cmp	r3, #32
 8002414:	f040 80e0 	bne.w	80025d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2319      	movs	r3, #25
 800241e:	2201      	movs	r2, #1
 8002420:	4970      	ldr	r1, [pc, #448]	; (80025e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fd5e 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	e0d3      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_I2C_Master_Transmit+0x50>
 800243c:	2302      	movs	r3, #2
 800243e:	e0cc      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d007      	beq.n	8002466 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002474:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2221      	movs	r2, #33	; 0x21
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2210      	movs	r2, #16
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a50      	ldr	r2, [pc, #320]	; (80025e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	6a3a      	ldr	r2, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fbec 	bl	8002c8c <I2C_MasterRequestWrite>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e08d      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d4:	e066      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	6a39      	ldr	r1, [r7, #32]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fdd8 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d107      	bne.n	80024fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d11b      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x188>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d017      	beq.n	8002578 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6a39      	ldr	r1, [r7, #32]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fdc8 	bl	8003112 <I2C_WaitOnBTFFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b04      	cmp	r3, #4
 800258e:	d107      	bne.n	80025a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e01a      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d194      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	00100002 	.word	0x00100002
 80025e8:	ffff0000 	.word	0xffff0000

080025ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	460b      	mov	r3, r1
 80025fa:	817b      	strh	r3, [r7, #10]
 80025fc:	4613      	mov	r3, r2
 80025fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff fb4c 	bl	8001c9c <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	f040 8213 	bne.w	8002a3a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2319      	movs	r3, #25
 800261a:	2201      	movs	r2, #1
 800261c:	497e      	ldr	r1, [pc, #504]	; (8002818 <HAL_I2C_Master_Receive+0x22c>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fc60 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	e206      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2C_Master_Receive+0x50>
 8002638:	2302      	movs	r3, #2
 800263a:	e1ff      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d007      	beq.n	8002662 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2222      	movs	r2, #34	; 0x22
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2210      	movs	r2, #16
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a5e      	ldr	r2, [pc, #376]	; (800281c <HAL_I2C_Master_Receive+0x230>)
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fb64 	bl	8002d78 <I2C_MasterRequestRead>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c0      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d113      	bne.n	80026ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	623b      	str	r3, [r7, #32]
 80026d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e194      	b.n	8002a14 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d11d      	bne.n	800272e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002702:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002728:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800272a:	b662      	cpsie	i
 800272c:	e172      	b.n	8002a14 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	2b02      	cmp	r3, #2
 8002734:	d11d      	bne.n	8002772 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002744:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002746:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800276e:	b662      	cpsie	i
 8002770:	e150      	b.n	8002a14 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002798:	e13c      	b.n	8002a14 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	2b03      	cmp	r3, #3
 80027a0:	f200 80f5 	bhi.w	800298e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d123      	bne.n	80027f4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fcef 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e13d      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027f2:	e10f      	b.n	8002a14 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d150      	bne.n	800289e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	2200      	movs	r2, #0
 8002804:	4906      	ldr	r1, [pc, #24]	; (8002820 <HAL_I2C_Master_Receive+0x234>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fb6c 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e112      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
 8002816:	bf00      	nop
 8002818:	00100002 	.word	0x00100002
 800281c:	ffff0000 	.word	0xffff0000
 8002820:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002868:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800289c:	e0ba      	b.n	8002a14 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	2200      	movs	r2, #0
 80028a6:	4967      	ldr	r1, [pc, #412]	; (8002a44 <HAL_I2C_Master_Receive+0x458>)
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fb1b 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0c1      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	2200      	movs	r2, #0
 8002904:	494f      	ldr	r1, [pc, #316]	; (8002a44 <HAL_I2C_Master_Receive+0x458>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 faec 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e092      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002924:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002958:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298c:	e042      	b.n	8002a14 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fbfe 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e04c      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d118      	bne.n	8002a14 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f aebe 	bne.w	800279a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	00010004 	.word	0x00010004

08002a48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	460b      	mov	r3, r1
 8002a56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff f920 	bl	8001c9c <HAL_GetTick>
 8002a5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	f040 8105 	bne.w	8002c7a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2319      	movs	r3, #25
 8002a76:	2201      	movs	r2, #1
 8002a78:	4982      	ldr	r1, [pc, #520]	; (8002c84 <HAL_I2C_IsDeviceReady+0x23c>)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa32 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0f8      	b.n	8002c7c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2C_IsDeviceReady+0x50>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0f1      	b.n	8002c7c <HAL_I2C_IsDeviceReady+0x234>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d007      	beq.n	8002abe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002acc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2224      	movs	r2, #36	; 0x24
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_I2C_IsDeviceReady+0x240>)
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f9f0 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0b6      	b.n	8002c7c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0e:	897b      	ldrh	r3, [r7, #10]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7ff f8bd 	bl	8001c9c <HAL_GetTick>
 8002b22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b52:	e025      	b.n	8002ba0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b54:	f7ff f8a2 	bl	8001c9c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d302      	bcc.n	8002b6a <HAL_I2C_IsDeviceReady+0x122>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22a0      	movs	r2, #160	; 0xa0
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2ba0      	cmp	r3, #160	; 0xa0
 8002baa:	d005      	beq.n	8002bb8 <HAL_I2C_IsDeviceReady+0x170>
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_I2C_IsDeviceReady+0x170>
 8002bb2:	7dbb      	ldrb	r3, [r7, #22]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0cd      	beq.n	8002b54 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d129      	bne.n	8002c22 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2319      	movs	r3, #25
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4921      	ldr	r1, [pc, #132]	; (8002c84 <HAL_I2C_IsDeviceReady+0x23c>)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f970 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e036      	b.n	8002c7c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e02c      	b.n	8002c7c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2319      	movs	r3, #25
 8002c42:	2201      	movs	r2, #1
 8002c44:	490f      	ldr	r1, [pc, #60]	; (8002c84 <HAL_I2C_IsDeviceReady+0x23c>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f94c 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e012      	b.n	8002c7c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	f4ff af3e 	bcc.w	8002ae2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	00100002 	.word	0x00100002
 8002c88:	ffff0000 	.word	0xffff0000

08002c8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d006      	beq.n	8002cb6 <I2C_MasterRequestWrite+0x2a>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d003      	beq.n	8002cb6 <I2C_MasterRequestWrite+0x2a>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00b      	b.n	8002ce0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	2b12      	cmp	r3, #18
 8002cce:	d107      	bne.n	8002ce0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f8f9 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e035      	b.n	8002d68 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d04:	d108      	bne.n	8002d18 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d06:	897b      	ldrh	r3, [r7, #10]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d14:	611a      	str	r2, [r3, #16]
 8002d16:	e01b      	b.n	8002d50 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d18:	897b      	ldrh	r3, [r7, #10]
 8002d1a:	11db      	asrs	r3, r3, #7
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 0306 	and.w	r3, r3, #6
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f063 030f 	orn	r3, r3, #15
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	490e      	ldr	r1, [pc, #56]	; (8002d70 <I2C_MasterRequestWrite+0xe4>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f92b 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e010      	b.n	8002d68 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4907      	ldr	r1, [pc, #28]	; (8002d74 <I2C_MasterRequestWrite+0xe8>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f91b 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	00010008 	.word	0x00010008
 8002d74:	00010002 	.word	0x00010002

08002d78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	460b      	mov	r3, r1
 8002d86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d006      	beq.n	8002db2 <I2C_MasterRequestRead+0x3a>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d003      	beq.n	8002db2 <I2C_MasterRequestRead+0x3a>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002db0:	d108      	bne.n	8002dc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e00b      	b.n	8002ddc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	2b11      	cmp	r3, #17
 8002dca:	d107      	bne.n	8002ddc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f87b 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e06d      	b.n	8002ed4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e00:	d108      	bne.n	8002e14 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]
 8002e12:	e053      	b.n	8002ebc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e14:	897b      	ldrh	r3, [r7, #10]
 8002e16:	11db      	asrs	r3, r3, #7
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 0306 	and.w	r3, r3, #6
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f063 030f 	orn	r3, r3, #15
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	492a      	ldr	r1, [pc, #168]	; (8002edc <I2C_MasterRequestRead+0x164>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f8ad 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e048      	b.n	8002ed4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e42:	897b      	ldrh	r3, [r7, #10]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4923      	ldr	r1, [pc, #140]	; (8002ee0 <I2C_MasterRequestRead+0x168>)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f89d 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e038      	b.n	8002ed4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f825 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e017      	b.n	8002ed4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ea4:	897b      	ldrh	r3, [r7, #10]
 8002ea6:	11db      	asrs	r3, r3, #7
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0306 	and.w	r3, r3, #6
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f063 030e 	orn	r3, r3, #14
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4907      	ldr	r1, [pc, #28]	; (8002ee0 <I2C_MasterRequestRead+0x168>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f865 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	00010008 	.word	0x00010008
 8002ee0:	00010002 	.word	0x00010002

08002ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	e025      	b.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d021      	beq.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe fecd 	bl	8001c9c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e023      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10d      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	e00c      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d0b6      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa0:	e051      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb0:	d123      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e046      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d021      	beq.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fe fe4b 	bl	8001c9c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e020      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e00b      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d18d      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309c:	e02d      	b.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8ce 	bl	8003240 <I2C_IsAcknowledgeFailed>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e02d      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d021      	beq.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe fdf1 	bl	8001c9c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e007      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d1ca      	bne.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800311e:	e02d      	b.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f88d 	bl	8003240 <I2C_IsAcknowledgeFailed>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e02d      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d021      	beq.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fe fdb0 	bl	8001c9c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d1ca      	bne.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a0:	e042      	b.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d119      	bne.n	80031e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0210 	mvn.w	r2, #16
 80031b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e029      	b.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fd5a 	bl	8001c9c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e007      	b.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d1b5      	bne.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	d11b      	bne.n	8003290 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003260:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <HAL_RCC_GetHCLKFreq+0x10>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	20000008 	.word	0x20000008

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff2 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032b8:	4601      	mov	r1, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4a03      	ldr	r2, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08003f2c 	.word	0x08003f2c

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffde 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e0:	4601      	mov	r1, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4a03      	ldr	r2, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08003f2c 	.word	0x08003f2c

08003300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e01d      	b.n	800334e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe fb3e 	bl	80019a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 f8d0 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800336e:	2302      	movs	r3, #2
 8003370:	e0b4      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	f200 809f 	bhi.w	80034c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800338a:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033c5 	.word	0x080033c5
 8003394:	080034c9 	.word	0x080034c9
 8003398:	080034c9 	.word	0x080034c9
 800339c:	080034c9 	.word	0x080034c9
 80033a0:	08003405 	.word	0x08003405
 80033a4:	080034c9 	.word	0x080034c9
 80033a8:	080034c9 	.word	0x080034c9
 80033ac:	080034c9 	.word	0x080034c9
 80033b0:	08003447 	.word	0x08003447
 80033b4:	080034c9 	.word	0x080034c9
 80033b8:	080034c9 	.word	0x080034c9
 80033bc:	080034c9 	.word	0x080034c9
 80033c0:	08003487 	.word	0x08003487
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f8ec 	bl	80035a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0208 	orr.w	r2, r2, #8
 80033de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0204 	bic.w	r2, r2, #4
 80033ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6999      	ldr	r1, [r3, #24]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	619a      	str	r2, [r3, #24]
      break;
 8003402:	e062      	b.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f932 	bl	8003674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6999      	ldr	r1, [r3, #24]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	619a      	str	r2, [r3, #24]
      break;
 8003444:	e041      	b.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f97b 	bl	8003748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0208 	orr.w	r2, r2, #8
 8003460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0204 	bic.w	r2, r2, #4
 8003470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69d9      	ldr	r1, [r3, #28]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	61da      	str	r2, [r3, #28]
      break;
 8003484:	e021      	b.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f9c5 	bl	800381c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69d9      	ldr	r1, [r3, #28]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	021a      	lsls	r2, r3, #8
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	61da      	str	r2, [r3, #28]
      break;
 80034c6:	e000      	b.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80034c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a29      	ldr	r2, [pc, #164]	; (800359c <TIM_Base_SetConfig+0xb8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_Base_SetConfig+0x30>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d007      	beq.n	8003514 <TIM_Base_SetConfig+0x30>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <TIM_Base_SetConfig+0xbc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0x30>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <TIM_Base_SetConfig+0xc0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <TIM_Base_SetConfig+0xb8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <TIM_Base_SetConfig+0xbc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <TIM_Base_SetConfig+0xc0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a07      	ldr	r2, [pc, #28]	; (800359c <TIM_Base_SetConfig+0xb8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	615a      	str	r2, [r3, #20]
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800

080035a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0201 	bic.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 0302 	bic.w	r3, r3, #2
 80035f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <TIM_OC1_SetConfig+0xc8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d10c      	bne.n	800361e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0308 	bic.w	r3, r3, #8
 800360a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <TIM_OC1_SetConfig+0xc8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d111      	bne.n	800364a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800362c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00

08003674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0210 	bic.w	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0320 	bic.w	r3, r3, #32
 80036be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <TIM_OC2_SetConfig+0xd0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d10d      	bne.n	80036f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a14      	ldr	r2, [pc, #80]	; (8003744 <TIM_OC2_SetConfig+0xd0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d113      	bne.n	8003720 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00

08003748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <TIM_OC3_SetConfig+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10d      	bne.n	80037c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <TIM_OC3_SetConfig+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d113      	bne.n	80037f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00

0800381c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	031b      	lsls	r3, r3, #12
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <TIM_OC4_SetConfig+0x98>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d109      	bne.n	8003890 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40012c00 	.word	0x40012c00

080038b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e032      	b.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003908:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4313      	orrs	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e03f      	b.n	80039d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe f870 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f90b 	bl	8003ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b088      	sub	sp, #32
 80039de:	af02      	add	r7, sp, #8
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	f040 8083 	bne.w	8003b02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_UART_Transmit+0x2e>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e07b      	b.n	8003b04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Transmit+0x40>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e074      	b.n	8003b04 <HAL_UART_Transmit+0x12a>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2221      	movs	r2, #33	; 0x21
 8003a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a30:	f7fe f934 	bl	8001c9c <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a42:	e042      	b.n	8003aca <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5a:	d122      	bne.n	8003aa2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f850 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e046      	b.n	8003b04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a88:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3302      	adds	r3, #2
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	e017      	b.n	8003aca <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	e013      	b.n	8003aca <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f82d 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e023      	b.n	8003b04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	60ba      	str	r2, [r7, #8]
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1b7      	bne.n	8003a44 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f814 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e00a      	b.n	8003b04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	e02c      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d028      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b2c:	f7fe f8b6 	bl	8001c9c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d21d      	bcs.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e00f      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d0c3      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bda:	f023 030c 	bic.w	r3, r3, #12
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <UART_SetConfig+0x1ac>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d14e      	bne.n	8003ca6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7ff fb66 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003c0c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	4a4a      	ldr	r2, [pc, #296]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	0119      	lsls	r1, r3, #4
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003c46:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2064      	movs	r0, #100	; 0x64
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	3332      	adds	r3, #50	; 0x32
 8003c58:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	4419      	add	r1, r3
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	4b34      	ldr	r3, [pc, #208]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2064      	movs	r0, #100	; 0x64
 8003c86:	fb00 f303 	mul.w	r3, r0, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003ca4:	e04d      	b.n	8003d42 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ca6:	f7ff fb03 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8003caa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009a      	lsls	r2, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	0119      	lsls	r1, r3, #4
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009a      	lsls	r2, r3, #2
 8003cd6:	441a      	add	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003ce4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	2064      	movs	r0, #100	; 0x64
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	3332      	adds	r3, #50	; 0x32
 8003cf6:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d02:	4419      	add	r1, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003d1c:	fba3 0302 	umull	r0, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	2064      	movs	r0, #100	; 0x64
 8003d24:	fb00 f303 	mul.w	r3, r0, r3
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	3332      	adds	r3, #50	; 0x32
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <UART_SetConfig+0x1b0>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	440a      	add	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	51eb851f 	.word	0x51eb851f

08003d54 <__libc_init_array>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	2500      	movs	r5, #0
 8003d58:	4e0c      	ldr	r6, [pc, #48]	; (8003d8c <__libc_init_array+0x38>)
 8003d5a:	4c0d      	ldr	r4, [pc, #52]	; (8003d90 <__libc_init_array+0x3c>)
 8003d5c:	1ba4      	subs	r4, r4, r6
 8003d5e:	10a4      	asrs	r4, r4, #2
 8003d60:	42a5      	cmp	r5, r4
 8003d62:	d109      	bne.n	8003d78 <__libc_init_array+0x24>
 8003d64:	f000 f84a 	bl	8003dfc <_init>
 8003d68:	2500      	movs	r5, #0
 8003d6a:	4e0a      	ldr	r6, [pc, #40]	; (8003d94 <__libc_init_array+0x40>)
 8003d6c:	4c0a      	ldr	r4, [pc, #40]	; (8003d98 <__libc_init_array+0x44>)
 8003d6e:	1ba4      	subs	r4, r4, r6
 8003d70:	10a4      	asrs	r4, r4, #2
 8003d72:	42a5      	cmp	r5, r4
 8003d74:	d105      	bne.n	8003d82 <__libc_init_array+0x2e>
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
 8003d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d7c:	4798      	blx	r3
 8003d7e:	3501      	adds	r5, #1
 8003d80:	e7ee      	b.n	8003d60 <__libc_init_array+0xc>
 8003d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d86:	4798      	blx	r3
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7f2      	b.n	8003d72 <__libc_init_array+0x1e>
 8003d8c:	08003f34 	.word	0x08003f34
 8003d90:	08003f34 	.word	0x08003f34
 8003d94:	08003f34 	.word	0x08003f34
 8003d98:	08003f38 	.word	0x08003f38

08003d9c <memcpy>:
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	1e43      	subs	r3, r0, #1
 8003da0:	440a      	add	r2, r1
 8003da2:	4291      	cmp	r1, r2
 8003da4:	d100      	bne.n	8003da8 <memcpy+0xc>
 8003da6:	bd10      	pop	{r4, pc}
 8003da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003db0:	e7f7      	b.n	8003da2 <memcpy+0x6>

08003db2 <memset>:
 8003db2:	4603      	mov	r3, r0
 8003db4:	4402      	add	r2, r0
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d100      	bne.n	8003dbc <memset+0xa>
 8003dba:	4770      	bx	lr
 8003dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc0:	e7f9      	b.n	8003db6 <memset+0x4>

08003dc2 <strcpy>:
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dc8:	f803 2b01 	strb.w	r2, [r3], #1
 8003dcc:	2a00      	cmp	r2, #0
 8003dce:	d1f9      	bne.n	8003dc4 <strcpy+0x2>
 8003dd0:	4770      	bx	lr

08003dd2 <strncpy>:
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	3901      	subs	r1, #1
 8003dd8:	b902      	cbnz	r2, 8003ddc <strncpy+0xa>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003de2:	1e56      	subs	r6, r2, #1
 8003de4:	f803 5b01 	strb.w	r5, [r3], #1
 8003de8:	b92d      	cbnz	r5, 8003df6 <strncpy+0x24>
 8003dea:	4414      	add	r4, r2
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d0f4      	beq.n	8003dda <strncpy+0x8>
 8003df0:	f803 5b01 	strb.w	r5, [r3], #1
 8003df4:	e7fa      	b.n	8003dec <strncpy+0x1a>
 8003df6:	461c      	mov	r4, r3
 8003df8:	4632      	mov	r2, r6
 8003dfa:	e7ed      	b.n	8003dd8 <strncpy+0x6>

08003dfc <_init>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr

08003e08 <_fini>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr
