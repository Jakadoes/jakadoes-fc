
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000225c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002378  08002378  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002378  08002378  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002378  08002378  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  0800238c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  0800238c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf4d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b5f  00000000  00000000  0002bf82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  0002e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000018b0  00000000  00000000  0002f620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bfd  00000000  00000000  00030ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007004f  00000000  00000000  0003aacd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aab1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad8  00000000  00000000  000aab98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002350 	.word	0x08002350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002350 	.word	0x08002350

0800014c <Cam_Is_Ready>:
#include "cam.h"
#include "stdint.h"
#include "i2c.h"

uint8_t Cam_Is_Ready()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	//returns HAL address
	uint8_t cam_ready_status = I2c_IsDeviceReady(CAM_I2C_ADDRESS);
 8000152:	2026      	movs	r0, #38	; 0x26
 8000154:	f000 f816 	bl	8000184 <I2c_IsDeviceReady>
 8000158:	4603      	mov	r3, r0
 800015a:	71fb      	strb	r3, [r7, #7]
	return cam_ready_status;
 800015c:	79fb      	ldrb	r3, [r7, #7]
}
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <Cam_Poll_Alert>:

void Cam_Poll_Alert()
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
	//send single read command
	//receive 8 bits of data
	uint8_t command = CAM_COM_POLL_ALERT; //coefficient is shifted one to left (check data sheet)
 800016c:	2311      	movs	r3, #17
 800016e:	71fb      	strb	r3, [r7, #7]
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);
 8000170:	1dfb      	adds	r3, r7, #7
 8000172:	2201      	movs	r2, #1
 8000174:	4619      	mov	r1, r3
 8000176:	2026      	movs	r0, #38	; 0x26
 8000178:	f000 f81c 	bl	80001b4 <I2c_Master_Transmit>
	//I2c_Master_Receive(BARO_I2C_ADDRESS, baro_prom_rx_buffer, 2);
}
 800017c:	bf00      	nop
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <I2c_IsDeviceReady>:
I2C_HandleTypeDef hi2c2;
#define I2C_TRIALS_DEFAULT 40
#define I2C_TIMEOUT_DEFAULT 400

uint8_t I2c_IsDeviceReady(uint8_t Address)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	b29b      	uxth	r3, r3
 8000192:	005b      	lsls	r3, r3, #1
 8000194:	81fb      	strh	r3, [r7, #14]
	//uint16_t devAddress = 0b0000000001110111;
	uint8_t test[2];
	//test[1] = devAddress & 0xff;
	//test[0] = devAddress >>8;
	//Radio_Transmit_Raw(&test, 2);
	return HAL_I2C_IsDeviceReady(&hi2c2, devAddress, I2C_TRIALS_DEFAULT, I2C_TIMEOUT_DEFAULT);
 8000196:	89f9      	ldrh	r1, [r7, #14]
 8000198:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800019c:	2228      	movs	r2, #40	; 0x28
 800019e:	4804      	ldr	r0, [pc, #16]	; (80001b0 <I2c_IsDeviceReady+0x2c>)
 80001a0:	f001 f82c 	bl	80011fc <HAL_I2C_IsDeviceReady>
 80001a4:	4603      	mov	r3, r0
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000028 	.word	0x20000028

080001b4 <I2c_Master_Transmit>:

void I2c_Master_Transmit(uint8_t Address, uint8_t* message, uint16_t messageSize)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	4603      	mov	r3, r0
 80001bc:	6039      	str	r1, [r7, #0]
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left once before use (check HAL documentation)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	005b      	lsls	r3, r3, #1
 80001ca:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, devAddress, message, messageSize, I2C_TIMEOUT_DEFAULT);
 80001cc:	88ba      	ldrh	r2, [r7, #4]
 80001ce:	89f9      	ldrh	r1, [r7, #14]
 80001d0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	4613      	mov	r3, r2
 80001d8:	683a      	ldr	r2, [r7, #0]
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <I2c_Master_Transmit+0x34>)
 80001dc:	f000 ff10 	bl	8001000 <HAL_I2C_Master_Transmit>
}
 80001e0:	bf00      	nop
 80001e2:	3710      	adds	r7, #16
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000028 	.word	0x20000028

080001ec <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 80001f2:	f000 fb03 	bl	80007fc <HAL_Init>
	MX_GPIO_Init();
 80001f6:	f000 f915 	bl	8000424 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80001fa:	f000 f8e9 	bl	80003d0 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 80001fe:	f000 f86b 	bl	80002d8 <MX_TIM4_Init>
	MX_I2C2_Init();
 8000202:	f000 f83b 	bl	800027c <MX_I2C2_Init>
	//    1, // System ID2 (1-255)
	//    1  // Component ID (a MAV_COMPONENT value)
	//};
	//Motor_Arm();
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]
	char tx_buffer[4] = "Hl\r\n";
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <main+0x7c>)
 8000208:	613b      	str	r3, [r7, #16]
	char rx_buffer[4] = "coef";
 800020a:	4b18      	ldr	r3, [pc, #96]	; (800026c <main+0x80>)
 800020c:	60fb      	str	r3, [r7, #12]
	uint8_t test[5] = {0x55, 0x55, 0x55, 0x55, 0x55};
 800020e:	4a18      	ldr	r2, [pc, #96]	; (8000270 <main+0x84>)
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000216:	6018      	str	r0, [r3, #0]
 8000218:	3304      	adds	r3, #4
 800021a:	7019      	strb	r1, [r3, #0]
	uint8_t baro_flag = 5;
 800021c:	2305      	movs	r3, #5
 800021e:	75fb      	strb	r3, [r7, #23]
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2108      	movs	r1, #8
 8000224:	4813      	ldr	r0, [pc, #76]	; (8000274 <main+0x88>)
 8000226:	f000 fdab 	bl	8000d80 <HAL_GPIO_WritePin>
		//MAV_Parse_Data();
		//****start of mpu test code****
		//uint8_t mpu_status = Mpu_Is_Ready();
		//Radio_Transmit_Raw(&mpu_status, 1);
		//****start of cam test code****
		uint8_t cam_status = Cam_Is_Ready();
 800022a:	f7ff ff8f 	bl	800014c <Cam_Is_Ready>
 800022e:	4603      	mov	r3, r0
 8000230:	b2db      	uxtb	r3, r3
 8000232:	70fb      	strb	r3, [r7, #3]
		Radio_Transmit_Raw(&cam_status, 1);
 8000234:	1cfb      	adds	r3, r7, #3
 8000236:	2101      	movs	r1, #1
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f937 	bl	80004ac <Radio_Transmit_Raw>
		HAL_Delay(50);
 800023e:	2032      	movs	r0, #50	; 0x32
 8000240:	f000 fb3e 	bl	80008c0 <HAL_Delay>
		uint16_t error = HAL_I2C_GetError (&hi2c2);
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <main+0x8c>)
 8000246:	f001 f8fb 	bl	8001440 <HAL_I2C_GetError>
 800024a:	4603      	mov	r3, r0
 800024c:	b29b      	uxth	r3, r3
 800024e:	803b      	strh	r3, [r7, #0]
		Radio_Transmit_Raw(&error, 2);
 8000250:	463b      	mov	r3, r7
 8000252:	2102      	movs	r1, #2
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f929 	bl	80004ac <Radio_Transmit_Raw>
		Cam_Poll_Alert();
 800025a:	f7ff ff84 	bl	8000166 <Cam_Poll_Alert>
		HAL_Delay(100);
 800025e:	2064      	movs	r0, #100	; 0x64
 8000260:	f000 fb2e 	bl	80008c0 <HAL_Delay>
	while(1){
 8000264:	e7e1      	b.n	800022a <main+0x3e>
 8000266:	bf00      	nop
 8000268:	0a0d6c48 	.word	0x0a0d6c48
 800026c:	66656f63 	.word	0x66656f63
 8000270:	08002368 	.word	0x08002368
 8000274:	40010c00 	.word	0x40010c00
 8000278:	20000028 	.word	0x20000028

0800027c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <MX_I2C2_Init+0x50>)
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <MX_I2C2_Init+0x54>)
 8000284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_I2C2_Init+0x50>)
 8000288:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <MX_I2C2_Init+0x58>)
 800028a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_I2C2_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_I2C2_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <MX_I2C2_Init+0x50>)
 800029a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800029e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <MX_I2C2_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <MX_I2C2_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <MX_I2C2_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <MX_I2C2_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <MX_I2C2_Init+0x50>)
 80002ba:	f000 fd79 	bl	8000db0 <HAL_I2C_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f8ec 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000028 	.word	0x20000028
 80002d0:	40005800 	.word	0x40005800
 80002d4:	000186a0 	.word	0x000186a0

080002d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]
 80002f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <MX_TIM4_Init+0xf0>)
 80002fc:	4a33      	ldr	r2, [pc, #204]	; (80003cc <MX_TIM4_Init+0xf4>)
 80002fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000300:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <MX_TIM4_Init+0xf0>)
 8000302:	220a      	movs	r2, #10
 8000304:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <MX_TIM4_Init+0xf0>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 800030c:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <MX_TIM4_Init+0xf0>)
 800030e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000312:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000314:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MX_TIM4_Init+0xf0>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <MX_TIM4_Init+0xf0>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000320:	4829      	ldr	r0, [pc, #164]	; (80003c8 <MX_TIM4_Init+0xf0>)
 8000322:	f001 fac7 	bl	80018b4 <HAL_TIM_PWM_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800032c:	f000 f8b8 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000338:	f107 0320 	add.w	r3, r7, #32
 800033c:	4619      	mov	r1, r3
 800033e:	4822      	ldr	r0, [pc, #136]	; (80003c8 <MX_TIM4_Init+0xf0>)
 8000340:	f001 fd94 	bl	8001e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800034a:	f000 f8a9 	bl	80004a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800034e:	2360      	movs	r3, #96	; 0x60
 8000350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 8000352:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000356:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	4619      	mov	r1, r3
 8000366:	4818      	ldr	r0, [pc, #96]	; (80003c8 <MX_TIM4_Init+0xf0>)
 8000368:	f001 fad0 	bl	800190c <HAL_TIM_PWM_ConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000372:	f000 f895 	bl	80004a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2204      	movs	r2, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4812      	ldr	r0, [pc, #72]	; (80003c8 <MX_TIM4_Init+0xf0>)
 800037e:	f001 fac5 	bl	800190c <HAL_TIM_PWM_ConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000388:	f000 f88a 	bl	80004a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2208      	movs	r2, #8
 8000390:	4619      	mov	r1, r3
 8000392:	480d      	ldr	r0, [pc, #52]	; (80003c8 <MX_TIM4_Init+0xf0>)
 8000394:	f001 faba 	bl	800190c <HAL_TIM_PWM_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800039e:	f000 f87f 	bl	80004a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	220c      	movs	r2, #12
 80003a6:	4619      	mov	r1, r3
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <MX_TIM4_Init+0xf0>)
 80003aa:	f001 faaf 	bl	800190c <HAL_TIM_PWM_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80003b4:	f000 f874 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <MX_TIM4_Init+0xf0>)
 80003ba:	f000 f91b 	bl	80005f4 <HAL_TIM_MspPostInit>

}
 80003be:	bf00      	nop
 80003c0:	3728      	adds	r7, #40	; 0x28
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000007c 	.word	0x2000007c
 80003cc:	40000800 	.word	0x40000800

080003d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <MX_USART1_UART_Init+0x50>)
 80003d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600*2;
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003f6:	220c      	movs	r2, #12
 80003f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART1_UART_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_USART1_UART_Init+0x4c>)
 8000408:	f001 fd74 	bl	8001ef4 <HAL_UART_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000412:	f000 f845 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000bc 	.word	0x200000bc
 8000420:	40013800 	.word	0x40013800

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_GPIO_Init+0x74>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a16      	ldr	r2, [pc, #88]	; (8000498 <MX_GPIO_Init+0x74>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_GPIO_Init+0x74>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0308 	and.w	r3, r3, #8
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_GPIO_Init+0x74>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a10      	ldr	r2, [pc, #64]	; (8000498 <MX_GPIO_Init+0x74>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_GPIO_Init+0x74>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <MX_GPIO_Init+0x78>)
 800046e:	f000 fc87 	bl	8000d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000472:	2308      	movs	r3, #8
 8000474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_GPIO_Init+0x78>)
 800048a:	f000 fb1f 	bl	8000acc <HAL_GPIO_Init>

}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40010c00 	.word	0x40010c00

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 80004b8:	887a      	ldrh	r2, [r7, #2]
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	4803      	ldr	r0, [pc, #12]	; (80004d0 <Radio_Transmit_Raw+0x24>)
 80004c2:	f001 fd64 	bl	8001f8e <HAL_UART_Transmit>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000bc 	.word	0x200000bc

080004d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_MspInit+0x5c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_MspInit+0x5c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <HAL_MspInit+0x5c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_MspInit+0x5c>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_MspInit+0x60>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_MspInit+0x60>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <HAL_I2C_MspInit+0x74>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d124      	bne.n	80005a2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_I2C_MspInit+0x78>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <HAL_I2C_MspInit+0x78>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_I2C_MspInit+0x78>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000570:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000576:	2312      	movs	r3, #18
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <HAL_I2C_MspInit+0x7c>)
 8000586:	f000 faa1 	bl	8000acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_I2C_MspInit+0x78>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_I2C_MspInit+0x78>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_I2C_MspInit+0x78>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40005800 	.word	0x40005800
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010c00 	.word	0x40010c00

080005b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <HAL_TIM_PWM_MspInit+0x34>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10b      	bne.n	80005e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_TIM_PWM_MspInit+0x38>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <HAL_TIM_PWM_MspInit+0x38>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_TIM_PWM_MspInit+0x38>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	40000800 	.word	0x40000800
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <HAL_TIM_MspPostInit+0x5c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d118      	bne.n	8000646 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_TIM_MspPostInit+0x60>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_TIM_MspPostInit+0x60>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_TIM_MspPostInit+0x60>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800062c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_TIM_MspPostInit+0x64>)
 8000642:	f000 fa43 	bl	8000acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40000800 	.word	0x40000800
 8000654:	40021000 	.word	0x40021000
 8000658:	40010c00 	.word	0x40010c00

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d131      	bne.n	80006e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_UART_MspInit+0x90>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <HAL_UART_MspInit+0x90>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_UART_MspInit+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_UART_MspInit+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_UART_MspInit+0x90>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_UART_MspInit+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <HAL_UART_MspInit+0x94>)
 80006c2:	f000 fa03 	bl	8000acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <HAL_UART_MspInit+0x94>)
 80006dc:	f000 f9f6 	bl	8000acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40013800 	.word	0x40013800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <HardFault_Handler+0x4>

08000706 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <MemManage_Handler+0x4>

0800070c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <BusFault_Handler+0x4>

08000712 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <UsageFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f8a2 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <SystemInit+0x5c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <SystemInit+0x5c>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <SystemInit+0x5c>)
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	4911      	ldr	r1, [pc, #68]	; (80007a4 <SystemInit+0x5c>)
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <SystemInit+0x60>)
 8000760:	4013      	ands	r3, r2
 8000762:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x5c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <SystemInit+0x5c>)
 800076a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800076e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SystemInit+0x5c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SystemInit+0x5c>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <SystemInit+0x5c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <SystemInit+0x5c>)
 8000786:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800078a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SystemInit+0x5c>)
 800078e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000792:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SystemInit+0x64>)
 8000796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079a:	609a      	str	r2, [r3, #8]
#endif 
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	f8ff0000 	.word	0xf8ff0000
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007b2:	e003      	b.n	80007bc <LoopCopyDataInit>

080007b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ba:	3104      	adds	r1, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007c4:	d3f6      	bcc.n	80007b4 <CopyDataInit>
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007c8:	e002      	b.n	80007d0 <LoopFillZerobss>

080007ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007cc:	f842 3b04 	str.w	r3, [r2], #4

080007d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007d4:	d3f9      	bcc.n	80007ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d6:	f7ff ffb7 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007da:	f001 fd95 	bl	8002308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fd05 	bl	80001ec <main>
  bx lr
 80007e2:	4770      	bx	lr
  ldr r3, =_sidata
 80007e4:	08002380 	.word	0x08002380
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007f0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007f4:	20000100 	.word	0x20000100

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f929 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fe5c 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f933 	bl	8000ab2 <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f909 	bl	8000a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <HAL_IncTick+0x20>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	20000008 	.word	0x20000008
 80008a8:	200000fc 	.word	0x200000fc

080008ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	200000fc 	.word	0x200000fc

080008c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff fff0 	bl	80008ac <HAL_GetTick>
 80008cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d005      	beq.n	80008e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_Delay+0x40>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e6:	bf00      	nop
 80008e8:	f7ff ffe0 	bl	80008ac <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d8f7      	bhi.n	80008e8 <HAL_Delay+0x28>
  {
  }
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000008 	.word	0x20000008

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a30:	d301      	bcc.n	8000a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00f      	b.n	8000a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <SysTick_Config+0x40>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3e:	210f      	movs	r1, #15
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f7ff ff90 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SysTick_Config+0x40>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SysTick_Config+0x40>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff49 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff5e 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff90 	bl	80009bc <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff5f 	bl	8000968 <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffb0 	bl	8000a20 <SysTick_Config>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b08b      	sub	sp, #44	; 0x2c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e127      	b.n	8000d30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f040 8116 	bne.w	8000d2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d034      	beq.n	8000b70 <HAL_GPIO_Init+0xa4>
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d80d      	bhi.n	8000b26 <HAL_GPIO_Init+0x5a>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d02b      	beq.n	8000b66 <HAL_GPIO_Init+0x9a>
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d804      	bhi.n	8000b1c <HAL_GPIO_Init+0x50>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d031      	beq.n	8000b7a <HAL_GPIO_Init+0xae>
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d01c      	beq.n	8000b54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b1a:	e048      	b.n	8000bae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d043      	beq.n	8000ba8 <HAL_GPIO_Init+0xdc>
 8000b20:	2b11      	cmp	r3, #17
 8000b22:	d01b      	beq.n	8000b5c <HAL_GPIO_Init+0x90>
          break;
 8000b24:	e043      	b.n	8000bae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b26:	4a89      	ldr	r2, [pc, #548]	; (8000d4c <HAL_GPIO_Init+0x280>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d026      	beq.n	8000b7a <HAL_GPIO_Init+0xae>
 8000b2c:	4a87      	ldr	r2, [pc, #540]	; (8000d4c <HAL_GPIO_Init+0x280>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d806      	bhi.n	8000b40 <HAL_GPIO_Init+0x74>
 8000b32:	4a87      	ldr	r2, [pc, #540]	; (8000d50 <HAL_GPIO_Init+0x284>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d020      	beq.n	8000b7a <HAL_GPIO_Init+0xae>
 8000b38:	4a86      	ldr	r2, [pc, #536]	; (8000d54 <HAL_GPIO_Init+0x288>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d01d      	beq.n	8000b7a <HAL_GPIO_Init+0xae>
          break;
 8000b3e:	e036      	b.n	8000bae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b40:	4a85      	ldr	r2, [pc, #532]	; (8000d58 <HAL_GPIO_Init+0x28c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d019      	beq.n	8000b7a <HAL_GPIO_Init+0xae>
 8000b46:	4a85      	ldr	r2, [pc, #532]	; (8000d5c <HAL_GPIO_Init+0x290>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d016      	beq.n	8000b7a <HAL_GPIO_Init+0xae>
 8000b4c:	4a84      	ldr	r2, [pc, #528]	; (8000d60 <HAL_GPIO_Init+0x294>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d013      	beq.n	8000b7a <HAL_GPIO_Init+0xae>
          break;
 8000b52:	e02c      	b.n	8000bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	623b      	str	r3, [r7, #32]
          break;
 8000b5a:	e028      	b.n	8000bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	3304      	adds	r3, #4
 8000b62:	623b      	str	r3, [r7, #32]
          break;
 8000b64:	e023      	b.n	8000bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	623b      	str	r3, [r7, #32]
          break;
 8000b6e:	e01e      	b.n	8000bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	330c      	adds	r3, #12
 8000b76:	623b      	str	r3, [r7, #32]
          break;
 8000b78:	e019      	b.n	8000bae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b82:	2304      	movs	r3, #4
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e012      	b.n	8000bae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b90:	2308      	movs	r3, #8
 8000b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	611a      	str	r2, [r3, #16]
          break;
 8000b9a:	e008      	b.n	8000bae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	615a      	str	r2, [r3, #20]
          break;
 8000ba6:	e002      	b.n	8000bae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d801      	bhi.n	8000bb8 <HAL_GPIO_Init+0xec>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	e001      	b.n	8000bbc <HAL_GPIO_Init+0xf0>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	2bff      	cmp	r3, #255	; 0xff
 8000bc2:	d802      	bhi.n	8000bca <HAL_GPIO_Init+0xfe>
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	e002      	b.n	8000bd0 <HAL_GPIO_Init+0x104>
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	3b08      	subs	r3, #8
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	401a      	ands	r2, r3
 8000be2:	6a39      	ldr	r1, [r7, #32]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	431a      	orrs	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8096 	beq.w	8000d2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b59      	ldr	r3, [pc, #356]	; (8000d64 <HAL_GPIO_Init+0x298>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a58      	ldr	r2, [pc, #352]	; (8000d64 <HAL_GPIO_Init+0x298>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b56      	ldr	r3, [pc, #344]	; (8000d64 <HAL_GPIO_Init+0x298>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c16:	4a54      	ldr	r2, [pc, #336]	; (8000d68 <HAL_GPIO_Init+0x29c>)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	220f      	movs	r2, #15
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4013      	ands	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4b      	ldr	r2, [pc, #300]	; (8000d6c <HAL_GPIO_Init+0x2a0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0x19e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <HAL_GPIO_Init+0x2a4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d00d      	beq.n	8000c66 <HAL_GPIO_Init+0x19a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a49      	ldr	r2, [pc, #292]	; (8000d74 <HAL_GPIO_Init+0x2a8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d007      	beq.n	8000c62 <HAL_GPIO_Init+0x196>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a48      	ldr	r2, [pc, #288]	; (8000d78 <HAL_GPIO_Init+0x2ac>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d101      	bne.n	8000c5e <HAL_GPIO_Init+0x192>
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e006      	b.n	8000c6c <HAL_GPIO_Init+0x1a0>
 8000c5e:	2304      	movs	r3, #4
 8000c60:	e004      	b.n	8000c6c <HAL_GPIO_Init+0x1a0>
 8000c62:	2302      	movs	r3, #2
 8000c64:	e002      	b.n	8000c6c <HAL_GPIO_Init+0x1a0>
 8000c66:	2301      	movs	r3, #1
 8000c68:	e000      	b.n	8000c6c <HAL_GPIO_Init+0x1a0>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6e:	f002 0203 	and.w	r2, r2, #3
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	4093      	lsls	r3, r2
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c7c:	493a      	ldr	r1, [pc, #232]	; (8000d68 <HAL_GPIO_Init+0x29c>)
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c96:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4938      	ldr	r1, [pc, #224]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
 8000ca2:	e006      	b.n	8000cb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca4:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4933      	ldr	r1, [pc, #204]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	492e      	ldr	r1, [pc, #184]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	604b      	str	r3, [r1, #4]
 8000cca:	e006      	b.n	8000cda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4929      	ldr	r1, [pc, #164]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	4924      	ldr	r1, [pc, #144]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	608b      	str	r3, [r1, #8]
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	491f      	ldr	r1, [pc, #124]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	491a      	ldr	r1, [pc, #104]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60cb      	str	r3, [r1, #12]
 8000d1a:	e006      	b.n	8000d2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	4915      	ldr	r1, [pc, #84]	; (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f47f aed0 	bne.w	8000ae0 <HAL_GPIO_Init+0x14>
  }
}
 8000d40:	bf00      	nop
 8000d42:	372c      	adds	r7, #44	; 0x2c
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	10110000 	.word	0x10110000
 8000d54:	10120000 	.word	0x10120000
 8000d58:	10310000 	.word	0x10310000
 8000d5c:	10320000 	.word	0x10320000
 8000d60:	10220000 	.word	0x10220000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	40011000 	.word	0x40011000
 8000d78:	40011400 	.word	0x40011400
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d90:	787b      	ldrb	r3, [r7, #1]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d9c:	e003      	b.n	8000da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	041a      	lsls	r2, r3, #16
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	611a      	str	r2, [r3, #16]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e10f      	b.n	8000fe2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fbae 	bl	8000538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2224      	movs	r2, #36	; 0x24
 8000de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000df4:	f000 fd36 	bl	8001864 <HAL_RCC_GetPCLK1Freq>
 8000df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a7b      	ldr	r2, [pc, #492]	; (8000fec <HAL_I2C_Init+0x23c>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d807      	bhi.n	8000e14 <HAL_I2C_Init+0x64>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4a7a      	ldr	r2, [pc, #488]	; (8000ff0 <HAL_I2C_Init+0x240>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	bf94      	ite	ls
 8000e0c:	2301      	movls	r3, #1
 8000e0e:	2300      	movhi	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	e006      	b.n	8000e22 <HAL_I2C_Init+0x72>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4a77      	ldr	r2, [pc, #476]	; (8000ff4 <HAL_I2C_Init+0x244>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	bf94      	ite	ls
 8000e1c:	2301      	movls	r3, #1
 8000e1e:	2300      	movhi	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e0db      	b.n	8000fe2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4a72      	ldr	r2, [pc, #456]	; (8000ff8 <HAL_I2C_Init+0x248>)
 8000e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e32:	0c9b      	lsrs	r3, r3, #18
 8000e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4a64      	ldr	r2, [pc, #400]	; (8000fec <HAL_I2C_Init+0x23c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d802      	bhi.n	8000e64 <HAL_I2C_Init+0xb4>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	e009      	b.n	8000e78 <HAL_I2C_Init+0xc8>
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e6a:	fb02 f303 	mul.w	r3, r2, r3
 8000e6e:	4a63      	ldr	r2, [pc, #396]	; (8000ffc <HAL_I2C_Init+0x24c>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	099b      	lsrs	r3, r3, #6
 8000e76:	3301      	adds	r3, #1
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	4956      	ldr	r1, [pc, #344]	; (8000fec <HAL_I2C_Init+0x23c>)
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d80d      	bhi.n	8000eb4 <HAL_I2C_Init+0x104>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	1e59      	subs	r1, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	bf38      	it	cc
 8000eb0:	2304      	movcc	r3, #4
 8000eb2:	e04f      	b.n	8000f54 <HAL_I2C_Init+0x1a4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_I2C_Init+0x130>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	1e58      	subs	r0, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6859      	ldr	r1, [r3, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	440b      	add	r3, r1
 8000eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf0c      	ite	eq
 8000ed8:	2301      	moveq	r3, #1
 8000eda:	2300      	movne	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	e012      	b.n	8000f06 <HAL_I2C_Init+0x156>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1e58      	subs	r0, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6859      	ldr	r1, [r3, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	0099      	lsls	r1, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_I2C_Init+0x15e>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e022      	b.n	8000f54 <HAL_I2C_Init+0x1a4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10e      	bne.n	8000f34 <HAL_I2C_Init+0x184>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1e58      	subs	r0, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6859      	ldr	r1, [r3, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	440b      	add	r3, r1
 8000f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f32:	e00f      	b.n	8000f54 <HAL_I2C_Init+0x1a4>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6859      	ldr	r1, [r3, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	0099      	lsls	r1, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	6809      	ldr	r1, [r1, #0]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6911      	ldr	r1, [r2, #16]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68d2      	ldr	r2, [r2, #12]
 8000f8e:	4311      	orrs	r1, r2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695a      	ldr	r2, [r3, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	000186a0 	.word	0x000186a0
 8000ff0:	001e847f 	.word	0x001e847f
 8000ff4:	003d08ff 	.word	0x003d08ff
 8000ff8:	431bde83 	.word	0x431bde83
 8000ffc:	10624dd3 	.word	0x10624dd3

08001000 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	461a      	mov	r2, r3
 800100c:	460b      	mov	r3, r1
 800100e:	817b      	strh	r3, [r7, #10]
 8001010:	4613      	mov	r3, r2
 8001012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff fc4a 	bl	80008ac <HAL_GetTick>
 8001018:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b20      	cmp	r3, #32
 8001024:	f040 80e0 	bne.w	80011e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2319      	movs	r3, #25
 800102e:	2201      	movs	r2, #1
 8001030:	4970      	ldr	r1, [pc, #448]	; (80011f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 fa86 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800103e:	2302      	movs	r3, #2
 8001040:	e0d3      	b.n	80011ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_I2C_Master_Transmit+0x50>
 800104c:	2302      	movs	r3, #2
 800104e:	e0cc      	b.n	80011ea <HAL_I2C_Master_Transmit+0x1ea>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d007      	beq.n	8001076 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2221      	movs	r2, #33	; 0x21
 800108a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2210      	movs	r2, #16
 8001092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	893a      	ldrh	r2, [r7, #8]
 80010a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4a50      	ldr	r2, [pc, #320]	; (80011f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010b8:	8979      	ldrh	r1, [r7, #10]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	6a3a      	ldr	r2, [r7, #32]
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 f9ca 	bl	8001458 <I2C_MasterRequestWrite>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e08d      	b.n	80011ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80010e4:	e066      	b.n	80011b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	6a39      	ldr	r1, [r7, #32]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 fb00 	bl	80016f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00d      	beq.n	8001112 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d107      	bne.n	800110e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800110c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e06b      	b.n	80011ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112c:	b29b      	uxth	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113a:	3b01      	subs	r3, #1
 800113c:	b29a      	uxth	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b04      	cmp	r3, #4
 800114e:	d11b      	bne.n	8001188 <HAL_I2C_Master_Transmit+0x188>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001154:	2b00      	cmp	r3, #0
 8001156:	d017      	beq.n	8001188 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001172:	b29b      	uxth	r3, r3
 8001174:	3b01      	subs	r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001180:	3b01      	subs	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	6a39      	ldr	r1, [r7, #32]
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 faf0 	bl	8001772 <I2C_WaitOnBTFFlagUntilTimeout>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00d      	beq.n	80011b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2b04      	cmp	r3, #4
 800119e:	d107      	bne.n	80011b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e01a      	b.n	80011ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d194      	bne.n	80010e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2220      	movs	r2, #32
 80011d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e000      	b.n	80011ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80011e8:	2302      	movs	r3, #2
  }
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	00100002 	.word	0x00100002
 80011f8:	ffff0000 	.word	0xffff0000

080011fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	460b      	mov	r3, r1
 800120a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fb4e 	bl	80008ac <HAL_GetTick>
 8001210:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b20      	cmp	r3, #32
 8001220:	f040 8105 	bne.w	800142e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2319      	movs	r3, #25
 800122a:	2201      	movs	r2, #1
 800122c:	4982      	ldr	r1, [pc, #520]	; (8001438 <HAL_I2C_IsDeviceReady+0x23c>)
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 f988 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800123a:	2302      	movs	r3, #2
 800123c:	e0f8      	b.n	8001430 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_I2C_IsDeviceReady+0x50>
 8001248:	2302      	movs	r3, #2
 800124a:	e0f1      	b.n	8001430 <HAL_I2C_IsDeviceReady+0x234>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b01      	cmp	r3, #1
 8001260:	d007      	beq.n	8001272 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2224      	movs	r2, #36	; 0x24
 8001286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a6a      	ldr	r2, [pc, #424]	; (800143c <HAL_I2C_IsDeviceReady+0x240>)
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f946 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0b6      	b.n	8001430 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012c2:	897b      	ldrh	r3, [r7, #10]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80012d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff faeb 	bl	80008ac <HAL_GetTick>
 80012d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fc:	bf0c      	ite	eq
 80012fe:	2301      	moveq	r3, #1
 8001300:	2300      	movne	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001306:	e025      	b.n	8001354 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001308:	f7ff fad0 	bl	80008ac <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d302      	bcc.n	800131e <HAL_I2C_IsDeviceReady+0x122>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	22a0      	movs	r2, #160	; 0xa0
 8001322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b02      	cmp	r3, #2
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134a:	bf0c      	ite	eq
 800134c:	2301      	moveq	r3, #1
 800134e:	2300      	movne	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2ba0      	cmp	r3, #160	; 0xa0
 800135e:	d005      	beq.n	800136c <HAL_I2C_IsDeviceReady+0x170>
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <HAL_I2C_IsDeviceReady+0x170>
 8001366:	7dbb      	ldrb	r3, [r7, #22]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0cd      	beq.n	8001308 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2220      	movs	r2, #32
 8001370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b02      	cmp	r3, #2
 8001380:	d129      	bne.n	80013d6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001390:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2319      	movs	r3, #25
 80013ae:	2201      	movs	r2, #1
 80013b0:	4921      	ldr	r1, [pc, #132]	; (8001438 <HAL_I2C_IsDeviceReady+0x23c>)
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f8c6 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e036      	b.n	8001430 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2220      	movs	r2, #32
 80013c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e02c      	b.n	8001430 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2319      	movs	r3, #25
 80013f6:	2201      	movs	r2, #1
 80013f8:	490f      	ldr	r1, [pc, #60]	; (8001438 <HAL_I2C_IsDeviceReady+0x23c>)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f8a2 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e012      	b.n	8001430 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	f4ff af3e 	bcc.w	8001296 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800142e:	2302      	movs	r3, #2
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	00100002 	.word	0x00100002
 800143c:	ffff0000 	.word	0xffff0000

08001440 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
	...

08001458 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	460b      	mov	r3, r1
 8001466:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d006      	beq.n	8001482 <I2C_MasterRequestWrite+0x2a>
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d003      	beq.n	8001482 <I2C_MasterRequestWrite+0x2a>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001480:	d108      	bne.n	8001494 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e00b      	b.n	80014ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	2b12      	cmp	r3, #18
 800149a:	d107      	bne.n	80014ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f843 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e035      	b.n	8001534 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014d0:	d108      	bne.n	80014e4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014d2:	897b      	ldrh	r3, [r7, #10]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	e01b      	b.n	800151c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014e4:	897b      	ldrh	r3, [r7, #10]
 80014e6:	11db      	asrs	r3, r3, #7
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 0306 	and.w	r3, r3, #6
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f063 030f 	orn	r3, r3, #15
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <I2C_MasterRequestWrite+0xe4>)
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f875 	bl	80015f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e010      	b.n	8001534 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <I2C_MasterRequestWrite+0xe8>)
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 f865 	bl	80015f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	00010008 	.word	0x00010008
 8001540:	00010002 	.word	0x00010002

08001544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001554:	e025      	b.n	80015a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d021      	beq.n	80015a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800155e:	f7ff f9a5 	bl	80008ac <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d302      	bcc.n	8001574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d116      	bne.n	80015a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2220      	movs	r2, #32
 800157e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e023      	b.n	80015ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10d      	bne.n	80015c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4013      	ands	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	e00c      	b.n	80015e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4013      	ands	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d0b6      	beq.n	8001556 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001600:	e051      	b.n	80016a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001610:	d123      	bne.n	800165a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001620:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800162a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2220      	movs	r2, #32
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f043 0204 	orr.w	r2, r3, #4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e046      	b.n	80016e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d021      	beq.n	80016a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001662:	f7ff f923 	bl	80008ac <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d302      	bcc.n	8001678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d116      	bne.n	80016a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f043 0220 	orr.w	r2, r3, #32
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e020      	b.n	80016e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	0c1b      	lsrs	r3, r3, #16
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10c      	bne.n	80016ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4013      	ands	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	e00b      	b.n	80016e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	43da      	mvns	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	4013      	ands	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d18d      	bne.n	8001602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016fc:	e02d      	b.n	800175a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f878 	bl	80017f4 <I2C_IsAcknowledgeFailed>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e02d      	b.n	800176a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d021      	beq.n	800175a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001716:	f7ff f8c9 	bl	80008ac <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	d302      	bcc.n	800172c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d116      	bne.n	800175a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2220      	movs	r2, #32
 8001736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f043 0220 	orr.w	r2, r3, #32
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e007      	b.n	800176a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001764:	2b80      	cmp	r3, #128	; 0x80
 8001766:	d1ca      	bne.n	80016fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800177e:	e02d      	b.n	80017dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f837 	bl	80017f4 <I2C_IsAcknowledgeFailed>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e02d      	b.n	80017ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001796:	d021      	beq.n	80017dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001798:	f7ff f888 	bl	80008ac <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d302      	bcc.n	80017ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e007      	b.n	80017ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d1ca      	bne.n	8001780 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180a:	d11b      	bne.n	8001844 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001814:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f043 0204 	orr.w	r2, r3, #4
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_RCC_GetHCLKFreq+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	20000000 	.word	0x20000000

08001864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001868:	f7ff fff2 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 800186c:	4601      	mov	r1, r0
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	08002370 	.word	0x08002370

0800188c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001890:	f7ff ffde 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001894:	4601      	mov	r1, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0adb      	lsrs	r3, r3, #11
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08002370 	.word	0x08002370

080018b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e01d      	b.n	8001902 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe fe6c 	bl	80005b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 f8d0 	bl	8001a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001922:	2302      	movs	r3, #2
 8001924:	e0b4      	b.n	8001a90 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2202      	movs	r2, #2
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	f200 809f 	bhi.w	8001a7c <HAL_TIM_PWM_ConfigChannel+0x170>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001979 	.word	0x08001979
 8001948:	08001a7d 	.word	0x08001a7d
 800194c:	08001a7d 	.word	0x08001a7d
 8001950:	08001a7d 	.word	0x08001a7d
 8001954:	080019b9 	.word	0x080019b9
 8001958:	08001a7d 	.word	0x08001a7d
 800195c:	08001a7d 	.word	0x08001a7d
 8001960:	08001a7d 	.word	0x08001a7d
 8001964:	080019fb 	.word	0x080019fb
 8001968:	08001a7d 	.word	0x08001a7d
 800196c:	08001a7d 	.word	0x08001a7d
 8001970:	08001a7d 	.word	0x08001a7d
 8001974:	08001a3b 	.word	0x08001a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f8ec 	bl	8001b5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0204 	bic.w	r2, r2, #4
 80019a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6999      	ldr	r1, [r3, #24]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	619a      	str	r2, [r3, #24]
      break;
 80019b6:	e062      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f932 	bl	8001c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6999      	ldr	r1, [r3, #24]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	021a      	lsls	r2, r3, #8
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	619a      	str	r2, [r3, #24]
      break;
 80019f8:	e041      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f97b 	bl	8001cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0208 	orr.w	r2, r2, #8
 8001a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0204 	bic.w	r2, r2, #4
 8001a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69d9      	ldr	r1, [r3, #28]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
      break;
 8001a38:	e021      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f9c5 	bl	8001dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69d9      	ldr	r1, [r3, #28]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	021a      	lsls	r2, r3, #8
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	61da      	str	r2, [r3, #28]
      break;
 8001a7a:	e000      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001a7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a29      	ldr	r2, [pc, #164]	; (8001b50 <TIM_Base_SetConfig+0xb8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00b      	beq.n	8001ac8 <TIM_Base_SetConfig+0x30>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab6:	d007      	beq.n	8001ac8 <TIM_Base_SetConfig+0x30>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <TIM_Base_SetConfig+0xbc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <TIM_Base_SetConfig+0x30>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <TIM_Base_SetConfig+0xc0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d108      	bne.n	8001ada <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <TIM_Base_SetConfig+0xb8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00b      	beq.n	8001afa <TIM_Base_SetConfig+0x62>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae8:	d007      	beq.n	8001afa <TIM_Base_SetConfig+0x62>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <TIM_Base_SetConfig+0xbc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d003      	beq.n	8001afa <TIM_Base_SetConfig+0x62>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <TIM_Base_SetConfig+0xc0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d108      	bne.n	8001b0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <TIM_Base_SetConfig+0xb8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d103      	bne.n	8001b40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	615a      	str	r2, [r3, #20]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000800 	.word	0x40000800

08001b5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	f023 0201 	bic.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f023 0302 	bic.w	r3, r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <TIM_OC1_SetConfig+0xc8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d10c      	bne.n	8001bd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f023 0308 	bic.w	r3, r3, #8
 8001bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <TIM_OC1_SetConfig+0xc8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d111      	bne.n	8001bfe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	621a      	str	r2, [r3, #32]
}
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	f023 0210 	bic.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f023 0320 	bic.w	r3, r3, #32
 8001c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <TIM_OC2_SetConfig+0xd0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10d      	bne.n	8001ca4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <TIM_OC2_SetConfig+0xd0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d113      	bne.n	8001cd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	621a      	str	r2, [r3, #32]
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40012c00 	.word	0x40012c00

08001cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <TIM_OC3_SetConfig+0xd0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10d      	bne.n	8001d76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <TIM_OC3_SetConfig+0xd0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d113      	bne.n	8001da6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	621a      	str	r2, [r3, #32]
}
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40012c00 	.word	0x40012c00

08001dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	031b      	lsls	r3, r3, #12
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <TIM_OC4_SetConfig+0x98>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d109      	bne.n	8001e44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	019b      	lsls	r3, r3, #6
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	621a      	str	r2, [r3, #32]
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40012c00 	.word	0x40012c00

08001e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e032      	b.n	8001eea <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e03f      	b.n	8001f86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fb9e 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	; 0x24
 8001f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f90b 	bl	8002154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af02      	add	r7, sp, #8
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	f040 8083 	bne.w	80020b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_UART_Transmit+0x2e>
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e07b      	b.n	80020b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Transmit+0x40>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e074      	b.n	80020b8 <HAL_UART_Transmit+0x12a>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2221      	movs	r2, #33	; 0x21
 8001fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fc62 	bl	80008ac <HAL_GetTick>
 8001fe8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ff6:	e042      	b.n	800207e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200e:	d122      	bne.n	8002056 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f850 	bl	80020c0 <UART_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e046      	b.n	80020b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800203c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3302      	adds	r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	e017      	b.n	800207e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3301      	adds	r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	e013      	b.n	800207e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f82d 	bl	80020c0 <UART_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e023      	b.n	80020b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	60ba      	str	r2, [r7, #8]
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1b7      	bne.n	8001ff8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2200      	movs	r2, #0
 8002090:	2140      	movs	r1, #64	; 0x40
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f814 	bl	80020c0 <UART_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e00a      	b.n	80020b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d0:	e02c      	b.n	800212c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d028      	beq.n	800212c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80020e0:	f7fe fbe4 	bl	80008ac <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d21d      	bcs.n	800212c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e00f      	b.n	800214c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	429a      	cmp	r2, r3
 8002148:	d0c3      	beq.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800218e:	f023 030c 	bic.w	r3, r3, #12
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	430b      	orrs	r3, r1
 800219a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a52      	ldr	r2, [pc, #328]	; (8002300 <UART_SetConfig+0x1ac>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d14e      	bne.n	800225a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021bc:	f7ff fb66 	bl	800188c <HAL_RCC_GetPCLK2Freq>
 80021c0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009a      	lsls	r2, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <UART_SetConfig+0x1b0>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	0119      	lsls	r1, r3, #4
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	441a      	add	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f8:	4b42      	ldr	r3, [pc, #264]	; (8002304 <UART_SetConfig+0x1b0>)
 80021fa:	fba3 0302 	umull	r0, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	3332      	adds	r3, #50	; 0x32
 800220c:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <UART_SetConfig+0x1b0>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002218:	4419      	add	r1, r3
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <UART_SetConfig+0x1b0>)
 8002232:	fba3 0302 	umull	r0, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <UART_SetConfig+0x1b0>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 020f 	and.w	r2, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	440a      	add	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002258:	e04d      	b.n	80022f6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800225a:	f7ff fb03 	bl	8001864 <HAL_RCC_GetPCLK1Freq>
 800225e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009a      	lsls	r2, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4a23      	ldr	r2, [pc, #140]	; (8002304 <UART_SetConfig+0x1b0>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	0119      	lsls	r1, r3, #4
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009a      	lsls	r2, r3, #2
 800228a:	441a      	add	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	fbb2 f2f3 	udiv	r2, r2, r3
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <UART_SetConfig+0x1b0>)
 8002298:	fba3 0302 	umull	r0, r3, r3, r2
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	2064      	movs	r0, #100	; 0x64
 80022a0:	fb00 f303 	mul.w	r3, r0, r3
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	3332      	adds	r3, #50	; 0x32
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <UART_SetConfig+0x1b0>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b6:	4419      	add	r1, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	009a      	lsls	r2, r3, #2
 80022c2:	441a      	add	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <UART_SetConfig+0x1b0>)
 80022d0:	fba3 0302 	umull	r0, r3, r3, r2
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2064      	movs	r0, #100	; 0x64
 80022d8:	fb00 f303 	mul.w	r3, r0, r3
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <UART_SetConfig+0x1b0>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	f003 020f 	and.w	r2, r3, #15
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	440a      	add	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40013800 	.word	0x40013800
 8002304:	51eb851f 	.word	0x51eb851f

08002308 <__libc_init_array>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	2500      	movs	r5, #0
 800230c:	4e0c      	ldr	r6, [pc, #48]	; (8002340 <__libc_init_array+0x38>)
 800230e:	4c0d      	ldr	r4, [pc, #52]	; (8002344 <__libc_init_array+0x3c>)
 8002310:	1ba4      	subs	r4, r4, r6
 8002312:	10a4      	asrs	r4, r4, #2
 8002314:	42a5      	cmp	r5, r4
 8002316:	d109      	bne.n	800232c <__libc_init_array+0x24>
 8002318:	f000 f81a 	bl	8002350 <_init>
 800231c:	2500      	movs	r5, #0
 800231e:	4e0a      	ldr	r6, [pc, #40]	; (8002348 <__libc_init_array+0x40>)
 8002320:	4c0a      	ldr	r4, [pc, #40]	; (800234c <__libc_init_array+0x44>)
 8002322:	1ba4      	subs	r4, r4, r6
 8002324:	10a4      	asrs	r4, r4, #2
 8002326:	42a5      	cmp	r5, r4
 8002328:	d105      	bne.n	8002336 <__libc_init_array+0x2e>
 800232a:	bd70      	pop	{r4, r5, r6, pc}
 800232c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002330:	4798      	blx	r3
 8002332:	3501      	adds	r5, #1
 8002334:	e7ee      	b.n	8002314 <__libc_init_array+0xc>
 8002336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800233a:	4798      	blx	r3
 800233c:	3501      	adds	r5, #1
 800233e:	e7f2      	b.n	8002326 <__libc_init_array+0x1e>
 8002340:	08002378 	.word	0x08002378
 8002344:	08002378 	.word	0x08002378
 8002348:	08002378 	.word	0x08002378
 800234c:	0800237c 	.word	0x0800237c

08002350 <_init>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	bf00      	nop
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr

0800235c <_fini>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr
