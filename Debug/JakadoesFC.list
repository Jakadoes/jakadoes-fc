
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b9c  08001b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b9c  08001b9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b9c  08001b9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ba0  08001ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08001bb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08001bb0  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bed  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001568  00000000  00000000  00028c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae8  00000000  00000000  0002a190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002ac78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001376f  00000000  00000000  0002b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007150  00000000  00000000  0003ee17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f203  00000000  00000000  00045f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b516a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d60  00000000  00000000  000b51e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b78 	.word	0x08001b78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b78 	.word	0x08001b78

0800014c <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
	//initialize modules

	HAL_Init();
 8000152:	f000 fbbb 	bl	80008cc <HAL_Init>
	MX_GPIO_Init();
 8000156:	f000 fa21 	bl	800059c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800015a:	f000 f9f5 	bl	8000548 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 800015e:	f000 f979 	bl	8000454 <MX_TIM4_Init>


	//ARM PWM Signals
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000162:	2100      	movs	r1, #0
 8000164:	48a1      	ldr	r0, [pc, #644]	; (80003ec <main+0x2a0>)
 8000166:	f000 fee9 	bl	8000f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800016a:	2104      	movs	r1, #4
 800016c:	489f      	ldr	r0, [pc, #636]	; (80003ec <main+0x2a0>)
 800016e:	f000 fee5 	bl	8000f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000172:	2108      	movs	r1, #8
 8000174:	489d      	ldr	r0, [pc, #628]	; (80003ec <main+0x2a0>)
 8000176:	f000 fee1 	bl	8000f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800017a:	210c      	movs	r1, #12
 800017c:	489b      	ldr	r0, [pc, #620]	; (80003ec <main+0x2a0>)
 800017e:	f000 fedd 	bl	8000f3c <HAL_TIM_PWM_Start>

	uint16_t pulse_width = 7;
 8000182:	2307      	movs	r3, #7
 8000184:	82fb      	strh	r3, [r7, #22]
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]
	char tx_buffer[4] = "Hl\r\n";
 8000186:	4b9a      	ldr	r3, [pc, #616]	; (80003f0 <main+0x2a4>)
 8000188:	60fb      	str	r3, [r7, #12]
	char rx_buffer[4] = "0000";
 800018a:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 800018e:	60bb      	str	r3, [r7, #8]
	//HAL_Delay(3000);//wait for ESC's to arm
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2108      	movs	r1, #8
 8000194:	4897      	ldr	r0, [pc, #604]	; (80003f4 <main+0x2a8>)
 8000196:	f000 fe5b 	bl	8000e50 <HAL_GPIO_WritePin>
	uint8_t timChannels[] = {TIM_CHANNEL_1,TIM_CHANNEL_2,TIM_CHANNEL_3,TIM_CHANNEL_4};
 800019a:	4b97      	ldr	r3, [pc, #604]	; (80003f8 <main+0x2ac>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	607b      	str	r3, [r7, #4]
	while(1){
		HAL_UART_Transmit(&huart1,(uint8_t*)&rx_buffer, sizeof(rx_buffer),HAL_MAX_DELAY);
 80001a0:	f107 0108 	add.w	r1, r7, #8
 80001a4:	f04f 33ff 	mov.w	r3, #4294967295
 80001a8:	2204      	movs	r2, #4
 80001aa:	4894      	ldr	r0, [pc, #592]	; (80003fc <main+0x2b0>)
 80001ac:	f001 fa5d 	bl	800166a <HAL_UART_Transmit>
		HAL_UART_Receive (&huart1,(uint8_t*)&rx_buffer, sizeof(rx_buffer),100);
 80001b0:	f107 0108 	add.w	r1, r7, #8
 80001b4:	2364      	movs	r3, #100	; 0x64
 80001b6:	2204      	movs	r2, #4
 80001b8:	4890      	ldr	r0, [pc, #576]	; (80003fc <main+0x2b0>)
 80001ba:	f001 faef 	bl	800179c <HAL_UART_Receive>
		HAL_Delay(1);
 80001be:	2001      	movs	r0, #1
 80001c0:	f000 fbe6 	bl	8000990 <HAL_Delay>
		for(int i=0;i<4;i++)
 80001c4:	2300      	movs	r3, #0
 80001c6:	613b      	str	r3, [r7, #16]
 80001c8:	e137      	b.n	800043a <main+0x2ee>
		{

			if(rx_buffer[i] == '0')
 80001ca:	f107 0208 	add.w	r2, r7, #8
 80001ce:	693b      	ldr	r3, [r7, #16]
 80001d0:	4413      	add	r3, r2
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b30      	cmp	r3, #48	; 0x30
 80001d6:	d12a      	bne.n	800022e <main+0xe2>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2108      	movs	r1, #8
 80001dc:	4885      	ldr	r0, [pc, #532]	; (80003f4 <main+0x2a8>)
 80001de:	f000 fe37 	bl	8000e50 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, timChannels[i], 7);
 80001e2:	1d3a      	adds	r2, r7, #4
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	4413      	add	r3, r2
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d104      	bne.n	80001f8 <main+0xac>
 80001ee:	4b7f      	ldr	r3, [pc, #508]	; (80003ec <main+0x2a0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2207      	movs	r2, #7
 80001f4:	635a      	str	r2, [r3, #52]	; 0x34
 80001f6:	e11d      	b.n	8000434 <main+0x2e8>
 80001f8:	1d3a      	adds	r2, r7, #4
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	4413      	add	r3, r2
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b04      	cmp	r3, #4
 8000202:	d104      	bne.n	800020e <main+0xc2>
 8000204:	4b79      	ldr	r3, [pc, #484]	; (80003ec <main+0x2a0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2207      	movs	r2, #7
 800020a:	639a      	str	r2, [r3, #56]	; 0x38
 800020c:	e112      	b.n	8000434 <main+0x2e8>
 800020e:	1d3a      	adds	r2, r7, #4
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	4413      	add	r3, r2
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b08      	cmp	r3, #8
 8000218:	d104      	bne.n	8000224 <main+0xd8>
 800021a:	4b74      	ldr	r3, [pc, #464]	; (80003ec <main+0x2a0>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2207      	movs	r2, #7
 8000220:	63da      	str	r2, [r3, #60]	; 0x3c
 8000222:	e107      	b.n	8000434 <main+0x2e8>
 8000224:	4b71      	ldr	r3, [pc, #452]	; (80003ec <main+0x2a0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2207      	movs	r2, #7
 800022a:	641a      	str	r2, [r3, #64]	; 0x40
 800022c:	e102      	b.n	8000434 <main+0x2e8>
			}
			else if(rx_buffer[i] == '1')
 800022e:	f107 0208 	add.w	r2, r7, #8
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b31      	cmp	r3, #49	; 0x31
 800023a:	d12a      	bne.n	8000292 <main+0x146>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2108      	movs	r1, #8
 8000240:	486c      	ldr	r0, [pc, #432]	; (80003f4 <main+0x2a8>)
 8000242:	f000 fe05 	bl	8000e50 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, timChannels[i], 9);
 8000246:	1d3a      	adds	r2, r7, #4
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	4413      	add	r3, r2
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d104      	bne.n	800025c <main+0x110>
 8000252:	4b66      	ldr	r3, [pc, #408]	; (80003ec <main+0x2a0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2209      	movs	r2, #9
 8000258:	635a      	str	r2, [r3, #52]	; 0x34
 800025a:	e0eb      	b.n	8000434 <main+0x2e8>
 800025c:	1d3a      	adds	r2, r7, #4
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	4413      	add	r3, r2
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b04      	cmp	r3, #4
 8000266:	d104      	bne.n	8000272 <main+0x126>
 8000268:	4b60      	ldr	r3, [pc, #384]	; (80003ec <main+0x2a0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2209      	movs	r2, #9
 800026e:	639a      	str	r2, [r3, #56]	; 0x38
 8000270:	e0e0      	b.n	8000434 <main+0x2e8>
 8000272:	1d3a      	adds	r2, r7, #4
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b08      	cmp	r3, #8
 800027c:	d104      	bne.n	8000288 <main+0x13c>
 800027e:	4b5b      	ldr	r3, [pc, #364]	; (80003ec <main+0x2a0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2209      	movs	r2, #9
 8000284:	63da      	str	r2, [r3, #60]	; 0x3c
 8000286:	e0d5      	b.n	8000434 <main+0x2e8>
 8000288:	4b58      	ldr	r3, [pc, #352]	; (80003ec <main+0x2a0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2209      	movs	r2, #9
 800028e:	641a      	str	r2, [r3, #64]	; 0x40
 8000290:	e0d0      	b.n	8000434 <main+0x2e8>
			}
			else if(rx_buffer[i] == '5')
 8000292:	f107 0208 	add.w	r2, r7, #8
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	4413      	add	r3, r2
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b35      	cmp	r3, #53	; 0x35
 800029e:	d12a      	bne.n	80002f6 <main+0x1aa>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2108      	movs	r1, #8
 80002a4:	4853      	ldr	r0, [pc, #332]	; (80003f4 <main+0x2a8>)
 80002a6:	f000 fdd3 	bl	8000e50 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, timChannels[i], 12);
 80002aa:	1d3a      	adds	r2, r7, #4
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <main+0x174>
 80002b6:	4b4d      	ldr	r3, [pc, #308]	; (80003ec <main+0x2a0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	220c      	movs	r2, #12
 80002bc:	635a      	str	r2, [r3, #52]	; 0x34
 80002be:	e0b9      	b.n	8000434 <main+0x2e8>
 80002c0:	1d3a      	adds	r2, r7, #4
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	4413      	add	r3, r2
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	d104      	bne.n	80002d6 <main+0x18a>
 80002cc:	4b47      	ldr	r3, [pc, #284]	; (80003ec <main+0x2a0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	220c      	movs	r2, #12
 80002d2:	639a      	str	r2, [r3, #56]	; 0x38
 80002d4:	e0ae      	b.n	8000434 <main+0x2e8>
 80002d6:	1d3a      	adds	r2, r7, #4
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4413      	add	r3, r2
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b08      	cmp	r3, #8
 80002e0:	d104      	bne.n	80002ec <main+0x1a0>
 80002e2:	4b42      	ldr	r3, [pc, #264]	; (80003ec <main+0x2a0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	220c      	movs	r2, #12
 80002e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80002ea:	e0a3      	b.n	8000434 <main+0x2e8>
 80002ec:	4b3f      	ldr	r3, [pc, #252]	; (80003ec <main+0x2a0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	220c      	movs	r2, #12
 80002f2:	641a      	str	r2, [r3, #64]	; 0x40
 80002f4:	e09e      	b.n	8000434 <main+0x2e8>
			}
			else if(rx_buffer[i] == '6')
 80002f6:	f107 0208 	add.w	r2, r7, #8
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	4413      	add	r3, r2
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b36      	cmp	r3, #54	; 0x36
 8000302:	d12a      	bne.n	800035a <main+0x20e>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2108      	movs	r1, #8
 8000308:	483a      	ldr	r0, [pc, #232]	; (80003f4 <main+0x2a8>)
 800030a:	f000 fda1 	bl	8000e50 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, timChannels[i], 13);
 800030e:	1d3a      	adds	r2, r7, #4
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d104      	bne.n	8000324 <main+0x1d8>
 800031a:	4b34      	ldr	r3, [pc, #208]	; (80003ec <main+0x2a0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	220d      	movs	r2, #13
 8000320:	635a      	str	r2, [r3, #52]	; 0x34
 8000322:	e087      	b.n	8000434 <main+0x2e8>
 8000324:	1d3a      	adds	r2, r7, #4
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b04      	cmp	r3, #4
 800032e:	d104      	bne.n	800033a <main+0x1ee>
 8000330:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <main+0x2a0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	220d      	movs	r2, #13
 8000336:	639a      	str	r2, [r3, #56]	; 0x38
 8000338:	e07c      	b.n	8000434 <main+0x2e8>
 800033a:	1d3a      	adds	r2, r7, #4
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b08      	cmp	r3, #8
 8000344:	d104      	bne.n	8000350 <main+0x204>
 8000346:	4b29      	ldr	r3, [pc, #164]	; (80003ec <main+0x2a0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	220d      	movs	r2, #13
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
 800034e:	e071      	b.n	8000434 <main+0x2e8>
 8000350:	4b26      	ldr	r3, [pc, #152]	; (80003ec <main+0x2a0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	220d      	movs	r2, #13
 8000356:	641a      	str	r2, [r3, #64]	; 0x40
 8000358:	e06c      	b.n	8000434 <main+0x2e8>
			}
			else if(rx_buffer[i] == '7')
 800035a:	f107 0208 	add.w	r2, r7, #8
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	4413      	add	r3, r2
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b37      	cmp	r3, #55	; 0x37
 8000366:	d12a      	bne.n	80003be <main+0x272>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2108      	movs	r1, #8
 800036c:	4821      	ldr	r0, [pc, #132]	; (80003f4 <main+0x2a8>)
 800036e:	f000 fd6f 	bl	8000e50 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, timChannels[i], 14);
 8000372:	1d3a      	adds	r2, r7, #4
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d104      	bne.n	8000388 <main+0x23c>
 800037e:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <main+0x2a0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	220e      	movs	r2, #14
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
 8000386:	e055      	b.n	8000434 <main+0x2e8>
 8000388:	1d3a      	adds	r2, r7, #4
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	4413      	add	r3, r2
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b04      	cmp	r3, #4
 8000392:	d104      	bne.n	800039e <main+0x252>
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <main+0x2a0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	220e      	movs	r2, #14
 800039a:	639a      	str	r2, [r3, #56]	; 0x38
 800039c:	e04a      	b.n	8000434 <main+0x2e8>
 800039e:	1d3a      	adds	r2, r7, #4
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	4413      	add	r3, r2
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b08      	cmp	r3, #8
 80003a8:	d104      	bne.n	80003b4 <main+0x268>
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <main+0x2a0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	220e      	movs	r2, #14
 80003b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80003b2:	e03f      	b.n	8000434 <main+0x2e8>
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <main+0x2a0>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	220e      	movs	r2, #14
 80003ba:	641a      	str	r2, [r3, #64]	; 0x40
 80003bc:	e03a      	b.n	8000434 <main+0x2e8>
			}
			else if(rx_buffer[i] == '9')
 80003be:	f107 0208 	add.w	r2, r7, #8
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	4413      	add	r3, r2
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b39      	cmp	r3, #57	; 0x39
 80003ca:	d133      	bne.n	8000434 <main+0x2e8>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2108      	movs	r1, #8
 80003d0:	4808      	ldr	r0, [pc, #32]	; (80003f4 <main+0x2a8>)
 80003d2:	f000 fd3d 	bl	8000e50 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, timChannels[i], 15);
 80003d6:	1d3a      	adds	r2, r7, #4
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	4413      	add	r3, r2
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d10e      	bne.n	8000400 <main+0x2b4>
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <main+0x2a0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	220f      	movs	r2, #15
 80003e8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ea:	e023      	b.n	8000434 <main+0x2e8>
 80003ec:	20000028 	.word	0x20000028
 80003f0:	0a0d6c48 	.word	0x0a0d6c48
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	08001b90 	.word	0x08001b90
 80003fc:	200000bc 	.word	0x200000bc
 8000400:	1d3a      	adds	r2, r7, #4
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	4413      	add	r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b04      	cmp	r3, #4
 800040a:	d104      	bne.n	8000416 <main+0x2ca>
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <main+0x304>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	220f      	movs	r2, #15
 8000412:	639a      	str	r2, [r3, #56]	; 0x38
 8000414:	e00e      	b.n	8000434 <main+0x2e8>
 8000416:	1d3a      	adds	r2, r7, #4
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b08      	cmp	r3, #8
 8000420:	d104      	bne.n	800042c <main+0x2e0>
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <main+0x304>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	220f      	movs	r2, #15
 8000428:	63da      	str	r2, [r3, #60]	; 0x3c
 800042a:	e003      	b.n	8000434 <main+0x2e8>
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <main+0x304>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	220f      	movs	r2, #15
 8000432:	641a      	str	r2, [r3, #64]	; 0x40
		for(int i=0;i<4;i++)
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	3301      	adds	r3, #1
 8000438:	613b      	str	r3, [r7, #16]
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	2b03      	cmp	r3, #3
 800043e:	f77f aec4 	ble.w	80001ca <main+0x7e>
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse_width);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse_width);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pulse_width);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pulse_width);
		//pulse_width +=1;
		if(pulse_width>10){
 8000442:	8afb      	ldrh	r3, [r7, #22]
 8000444:	2b0a      	cmp	r3, #10
 8000446:	f67f aeab 	bls.w	80001a0 <main+0x54>
			pulse_width = 8;
 800044a:	2308      	movs	r3, #8
 800044c:	82fb      	strh	r3, [r7, #22]
		HAL_UART_Transmit(&huart1,(uint8_t*)&rx_buffer, sizeof(rx_buffer),HAL_MAX_DELAY);
 800044e:	e6a7      	b.n	80001a0 <main+0x54>
 8000450:	20000028 	.word	0x20000028

08000454 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045a:	f107 0320 	add.w	r3, r7, #32
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000476:	4b32      	ldr	r3, [pc, #200]	; (8000540 <MX_TIM4_Init+0xec>)
 8000478:	4a32      	ldr	r2, [pc, #200]	; (8000544 <MX_TIM4_Init+0xf0>)
 800047a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 800047c:	4b30      	ldr	r3, [pc, #192]	; (8000540 <MX_TIM4_Init+0xec>)
 800047e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000482:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <MX_TIM4_Init+0xec>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 160;
 800048a:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <MX_TIM4_Init+0xec>)
 800048c:	22a0      	movs	r2, #160	; 0xa0
 800048e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000490:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <MX_TIM4_Init+0xec>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <MX_TIM4_Init+0xec>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800049c:	4828      	ldr	r0, [pc, #160]	; (8000540 <MX_TIM4_Init+0xec>)
 800049e:	f000 fd21 	bl	8000ee4 <HAL_TIM_PWM_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80004a8:	f000 f8b6 	bl	8000618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004b4:	f107 0320 	add.w	r3, r7, #32
 80004b8:	4619      	mov	r1, r3
 80004ba:	4821      	ldr	r0, [pc, #132]	; (8000540 <MX_TIM4_Init+0xec>)
 80004bc:	f001 f844 	bl	8001548 <HAL_TIMEx_MasterConfigSynchronization>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80004c6:	f000 f8a7 	bl	8000618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ca:	2360      	movs	r3, #96	; 0x60
 80004cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7;
 80004ce:	2307      	movs	r3, #7
 80004d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	4817      	ldr	r0, [pc, #92]	; (8000540 <MX_TIM4_Init+0xec>)
 80004e2:	f000 fd5d 	bl	8000fa0 <HAL_TIM_PWM_ConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80004ec:	f000 f894 	bl	8000618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2204      	movs	r2, #4
 80004f4:	4619      	mov	r1, r3
 80004f6:	4812      	ldr	r0, [pc, #72]	; (8000540 <MX_TIM4_Init+0xec>)
 80004f8:	f000 fd52 	bl	8000fa0 <HAL_TIM_PWM_ConfigChannel>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000502:	f000 f889 	bl	8000618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2208      	movs	r2, #8
 800050a:	4619      	mov	r1, r3
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <MX_TIM4_Init+0xec>)
 800050e:	f000 fd47 	bl	8000fa0 <HAL_TIM_PWM_ConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000518:	f000 f87e 	bl	8000618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	220c      	movs	r2, #12
 8000520:	4619      	mov	r1, r3
 8000522:	4807      	ldr	r0, [pc, #28]	; (8000540 <MX_TIM4_Init+0xec>)
 8000524:	f000 fd3c 	bl	8000fa0 <HAL_TIM_PWM_ConfigChannel>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800052e:	f000 f873 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <MX_TIM4_Init+0xec>)
 8000534:	f000 f8c6 	bl	80006c4 <HAL_TIM_MspPostInit>

}
 8000538:	bf00      	nop
 800053a:	3728      	adds	r7, #40	; 0x28
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000028 	.word	0x20000028
 8000544:	40000800 	.word	0x40000800

08000548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <MX_USART1_UART_Init+0x50>)
 8000550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600*2;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 8000554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 8000568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800056c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 8000570:	220c      	movs	r2, #12
 8000572:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_USART1_UART_Init+0x4c>)
 8000582:	f001 f825 	bl	80015d0 <HAL_UART_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800058c:	f000 f844 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling
  /* USER CODE END USART1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000bc 	.word	0x200000bc
 8000598:	40013800 	.word	0x40013800

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_GPIO_Init+0x74>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a16      	ldr	r2, [pc, #88]	; (8000610 <MX_GPIO_Init+0x74>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_GPIO_Init+0x74>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0308 	and.w	r3, r3, #8
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_GPIO_Init+0x74>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <MX_GPIO_Init+0x74>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_GPIO_Init+0x74>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2108      	movs	r1, #8
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <MX_GPIO_Init+0x78>)
 80005e6:	f000 fc33 	bl	8000e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005ea:	2308      	movs	r3, #8
 80005ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_GPIO_Init+0x78>)
 8000602:	f000 facb 	bl	8000b9c <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	40010c00 	.word	0x40010c00

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <HAL_MspInit+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_MspInit+0x5c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_MspInit+0x5c>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_MspInit+0x5c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_MspInit+0x60>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_MspInit+0x60>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000
 8000684:	40010000 	.word	0x40010000

08000688 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <HAL_TIM_PWM_MspInit+0x34>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d10b      	bne.n	80006b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40000800 	.word	0x40000800
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <HAL_TIM_MspPostInit+0x5c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d118      	bne.n	8000716 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_TIM_MspPostInit+0x60>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_TIM_MspPostInit+0x60>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_TIM_MspPostInit+0x60>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80006fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_TIM_MspPostInit+0x64>)
 8000712:	f000 fa43 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40000800 	.word	0x40000800
 8000724:	40021000 	.word	0x40021000
 8000728:	40010c00 	.word	0x40010c00

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d131      	bne.n	80007b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <HAL_UART_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_UART_MspInit+0x90>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_UART_MspInit+0x90>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <HAL_UART_MspInit+0x94>)
 8000792:	f000 fa03 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <HAL_UART_MspInit+0x94>)
 80007ac:	f000 f9f6 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010800 	.word	0x40010800

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <HardFault_Handler+0x4>

080007d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <BusFault_Handler+0x4>

080007e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f8a2 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
RCC->CR |= 0x00000001U;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <SystemInit+0x5c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <SystemInit+0x5c>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <SystemInit+0x5c>)
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	4911      	ldr	r1, [pc, #68]	; (8000874 <SystemInit+0x5c>)
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <SystemInit+0x60>)
 8000830:	4013      	ands	r3, r2
 8000832:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <SystemInit+0x5c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <SystemInit+0x5c>)
 800083a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800083e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000842:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <SystemInit+0x5c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <SystemInit+0x5c>)
 800084a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800084e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <SystemInit+0x5c>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <SystemInit+0x5c>)
 8000856:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800085a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SystemInit+0x5c>)
 800085e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000862:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SystemInit+0x64>)
 8000866:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086a:	609a      	str	r2, [r3, #8]
#endif 
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40021000 	.word	0x40021000
 8000878:	f8ff0000 	.word	0xf8ff0000
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000882:	e003      	b.n	800088c <LoopCopyDataInit>

08000884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800088a:	3104      	adds	r1, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000894:	d3f6      	bcc.n	8000884 <CopyDataInit>
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000898:	e002      	b.n	80008a0 <LoopFillZerobss>

0800089a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800089c:	f842 3b04 	str.w	r3, [r2], #4

080008a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008a4:	d3f9      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a6:	f7ff ffb7 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f001 f941 	bl	8001b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fc4d 	bl	800014c <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r3, =_sidata
 80008b4:	08001ba4 	.word	0x08001ba4
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008c0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008c4:	20000100 	.word	0x20000100

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f929 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fe9c 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f933 	bl	8000b82 <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f909 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <HAL_IncTick+0x20>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000008 	.word	0x20000008
 8000978:	200000fc 	.word	0x200000fc

0800097c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <HAL_GetTick+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	200000fc 	.word	0x200000fc

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff fff0 	bl	800097c <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_Delay+0x40>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffe0 	bl	800097c <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff90 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff49 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff5e 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffb0 	bl	8000af0 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	e127      	b.n	8000e00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f040 8116 	bne.w	8000dfa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d034      	beq.n	8000c40 <HAL_GPIO_Init+0xa4>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d80d      	bhi.n	8000bf6 <HAL_GPIO_Init+0x5a>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d02b      	beq.n	8000c36 <HAL_GPIO_Init+0x9a>
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d804      	bhi.n	8000bec <HAL_GPIO_Init+0x50>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d031      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d01c      	beq.n	8000c24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bea:	e048      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d043      	beq.n	8000c78 <HAL_GPIO_Init+0xdc>
 8000bf0:	2b11      	cmp	r3, #17
 8000bf2:	d01b      	beq.n	8000c2c <HAL_GPIO_Init+0x90>
          break;
 8000bf4:	e043      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bf6:	4a89      	ldr	r2, [pc, #548]	; (8000e1c <HAL_GPIO_Init+0x280>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d026      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000bfc:	4a87      	ldr	r2, [pc, #540]	; (8000e1c <HAL_GPIO_Init+0x280>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d806      	bhi.n	8000c10 <HAL_GPIO_Init+0x74>
 8000c02:	4a87      	ldr	r2, [pc, #540]	; (8000e20 <HAL_GPIO_Init+0x284>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d020      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000c08:	4a86      	ldr	r2, [pc, #536]	; (8000e24 <HAL_GPIO_Init+0x288>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d01d      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
          break;
 8000c0e:	e036      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c10:	4a85      	ldr	r2, [pc, #532]	; (8000e28 <HAL_GPIO_Init+0x28c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d019      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000c16:	4a85      	ldr	r2, [pc, #532]	; (8000e2c <HAL_GPIO_Init+0x290>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d016      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000c1c:	4a84      	ldr	r2, [pc, #528]	; (8000e30 <HAL_GPIO_Init+0x294>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
          break;
 8000c22:	e02c      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e028      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	3304      	adds	r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e023      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e01e      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	330c      	adds	r3, #12
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e019      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c52:	2304      	movs	r3, #4
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e012      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	611a      	str	r2, [r3, #16]
          break;
 8000c6a:	e008      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	615a      	str	r2, [r3, #20]
          break;
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	2bff      	cmp	r3, #255	; 0xff
 8000c82:	d801      	bhi.n	8000c88 <HAL_GPIO_Init+0xec>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	e001      	b.n	8000c8c <HAL_GPIO_Init+0xf0>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2bff      	cmp	r3, #255	; 0xff
 8000c92:	d802      	bhi.n	8000c9a <HAL_GPIO_Init+0xfe>
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	e002      	b.n	8000ca0 <HAL_GPIO_Init+0x104>
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	6a39      	ldr	r1, [r7, #32]
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 8096 	beq.w	8000dfa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cce:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <HAL_GPIO_Init+0x298>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a58      	ldr	r2, [pc, #352]	; (8000e34 <HAL_GPIO_Init+0x298>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <HAL_GPIO_Init+0x298>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce6:	4a54      	ldr	r2, [pc, #336]	; (8000e38 <HAL_GPIO_Init+0x29c>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <HAL_GPIO_Init+0x2a0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x19e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4a      	ldr	r2, [pc, #296]	; (8000e40 <HAL_GPIO_Init+0x2a4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x19a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a49      	ldr	r2, [pc, #292]	; (8000e44 <HAL_GPIO_Init+0x2a8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x196>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a48      	ldr	r2, [pc, #288]	; (8000e48 <HAL_GPIO_Init+0x2ac>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x192>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e004      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3e:	f002 0203 	and.w	r2, r2, #3
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	4093      	lsls	r3, r2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4c:	493a      	ldr	r1, [pc, #232]	; (8000e38 <HAL_GPIO_Init+0x29c>)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4938      	ldr	r1, [pc, #224]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]
 8000d72:	e006      	b.n	8000d82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d74:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4933      	ldr	r1, [pc, #204]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	492e      	ldr	r1, [pc, #184]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	604b      	str	r3, [r1, #4]
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4929      	ldr	r1, [pc, #164]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	4924      	ldr	r1, [pc, #144]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	608b      	str	r3, [r1, #8]
 8000dc2:	e006      	b.n	8000dd2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	491f      	ldr	r1, [pc, #124]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	491a      	ldr	r1, [pc, #104]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4915      	ldr	r1, [pc, #84]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f47f aed0 	bne.w	8000bb0 <HAL_GPIO_Init+0x14>
  }
}
 8000e10:	bf00      	nop
 8000e12:	372c      	adds	r7, #44	; 0x2c
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	10210000 	.word	0x10210000
 8000e20:	10110000 	.word	0x10110000
 8000e24:	10120000 	.word	0x10120000
 8000e28:	10310000 	.word	0x10310000
 8000e2c:	10320000 	.word	0x10320000
 8000e30:	10220000 	.word	0x10220000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40011400 	.word	0x40011400
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	787b      	ldrb	r3, [r7, #1]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e6c:	e003      	b.n	8000e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	041a      	lsls	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	611a      	str	r2, [r3, #16]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000000 	.word	0x20000000

08000e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e98:	f7ff fff2 	bl	8000e80 <HAL_RCC_GetHCLKFreq>
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000eaa:	5cd3      	ldrb	r3, [r2, r3]
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	08001b94 	.word	0x08001b94

08000ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_RCC_GetHCLKFreq>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	0adb      	lsrs	r3, r3, #11
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ed2:	5cd3      	ldrb	r3, [r2, r3]
 8000ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	08001b94 	.word	0x08001b94

08000ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e01d      	b.n	8000f32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d106      	bne.n	8000f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fbbc 	bl	8000688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2202      	movs	r2, #2
 8000f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f000 f902 	bl	800112c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fad6 	bl	8001500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_TIM_PWM_Start+0x60>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d107      	bne.n	8000f6e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b06      	cmp	r3, #6
 8000f7e:	d007      	beq.n	8000f90 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012c00 	.word	0x40012c00

08000fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e0b4      	b.n	8001124 <HAL_TIM_PWM_ConfigChannel+0x184>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0c      	cmp	r3, #12
 8000fce:	f200 809f 	bhi.w	8001110 <HAL_TIM_PWM_ConfigChannel+0x170>
 8000fd2:	a201      	add	r2, pc, #4	; (adr r2, 8000fd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8000fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd8:	0800100d 	.word	0x0800100d
 8000fdc:	08001111 	.word	0x08001111
 8000fe0:	08001111 	.word	0x08001111
 8000fe4:	08001111 	.word	0x08001111
 8000fe8:	0800104d 	.word	0x0800104d
 8000fec:	08001111 	.word	0x08001111
 8000ff0:	08001111 	.word	0x08001111
 8000ff4:	08001111 	.word	0x08001111
 8000ff8:	0800108f 	.word	0x0800108f
 8000ffc:	08001111 	.word	0x08001111
 8001000:	08001111 	.word	0x08001111
 8001004:	08001111 	.word	0x08001111
 8001008:	080010cf 	.word	0x080010cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f8ec 	bl	80011f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0208 	orr.w	r2, r2, #8
 8001026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	699a      	ldr	r2, [r3, #24]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0204 	bic.w	r2, r2, #4
 8001036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6999      	ldr	r1, [r3, #24]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	619a      	str	r2, [r3, #24]
      break;
 800104a:	e062      	b.n	8001112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f932 	bl	80012bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6999      	ldr	r1, [r3, #24]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	021a      	lsls	r2, r3, #8
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	619a      	str	r2, [r3, #24]
      break;
 800108c:	e041      	b.n	8001112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f97b 	bl	8001390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0208 	orr.w	r2, r2, #8
 80010a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0204 	bic.w	r2, r2, #4
 80010b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69d9      	ldr	r1, [r3, #28]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	61da      	str	r2, [r3, #28]
      break;
 80010cc:	e021      	b.n	8001112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f9c5 	bl	8001464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	69da      	ldr	r2, [r3, #28]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	69da      	ldr	r2, [r3, #28]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	69d9      	ldr	r1, [r3, #28]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	021a      	lsls	r2, r3, #8
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	61da      	str	r2, [r3, #28]
      break;
 800110e:	e000      	b.n	8001112 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001110:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <TIM_Base_SetConfig+0xb8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00b      	beq.n	800115c <TIM_Base_SetConfig+0x30>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114a:	d007      	beq.n	800115c <TIM_Base_SetConfig+0x30>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <TIM_Base_SetConfig+0xbc>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d003      	beq.n	800115c <TIM_Base_SetConfig+0x30>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <TIM_Base_SetConfig+0xc0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d108      	bne.n	800116e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <TIM_Base_SetConfig+0xb8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00b      	beq.n	800118e <TIM_Base_SetConfig+0x62>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117c:	d007      	beq.n	800118e <TIM_Base_SetConfig+0x62>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <TIM_Base_SetConfig+0xbc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d003      	beq.n	800118e <TIM_Base_SetConfig+0x62>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <TIM_Base_SetConfig+0xc0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d108      	bne.n	80011a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <TIM_Base_SetConfig+0xb8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d103      	bne.n	80011d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	615a      	str	r2, [r3, #20]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40012c00 	.word	0x40012c00
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40000800 	.word	0x40000800

080011f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	f023 0201 	bic.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800121e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f023 0302 	bic.w	r3, r3, #2
 8001238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <TIM_OC1_SetConfig+0xc8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d10c      	bne.n	8001266 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f023 0308 	bic.w	r3, r3, #8
 8001252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	4313      	orrs	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <TIM_OC1_SetConfig+0xc8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d111      	bne.n	8001292 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800127c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	621a      	str	r2, [r3, #32]
}
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40012c00 	.word	0x40012c00

080012bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	f023 0210 	bic.w	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f023 0320 	bic.w	r3, r3, #32
 8001306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a1d      	ldr	r2, [pc, #116]	; (800138c <TIM_OC2_SetConfig+0xd0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d10d      	bne.n	8001338 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4313      	orrs	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <TIM_OC2_SetConfig+0xd0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d113      	bne.n	8001368 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800134e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	621a      	str	r2, [r3, #32]
}
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40012c00 	.word	0x40012c00

08001390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f023 0303 	bic.w	r3, r3, #3
 80013c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <TIM_OC3_SetConfig+0xd0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10d      	bne.n	800140a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	4313      	orrs	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <TIM_OC3_SetConfig+0xd0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d113      	bne.n	800143a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	621a      	str	r2, [r3, #32]
}
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40012c00 	.word	0x40012c00

08001464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800149a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	031b      	lsls	r3, r3, #12
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <TIM_OC4_SetConfig+0x98>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d109      	bne.n	80014d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	019b      	lsls	r3, r3, #6
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	621a      	str	r2, [r3, #32]
}
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40012c00 	.word	0x40012c00

08001500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2201      	movs	r2, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a1a      	ldr	r2, [r3, #32]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	431a      	orrs	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	621a      	str	r2, [r3, #32]
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800155c:	2302      	movs	r3, #2
 800155e:	e032      	b.n	80015c6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001598:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e03f      	b.n	8001662 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff f898 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f9b1 	bl	800197c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b088      	sub	sp, #32
 800166e:	af02      	add	r7, sp, #8
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4613      	mov	r3, r2
 8001678:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	f040 8083 	bne.w	8001792 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <HAL_UART_Transmit+0x2e>
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e07b      	b.n	8001794 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_UART_Transmit+0x40>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e074      	b.n	8001794 <HAL_UART_Transmit+0x12a>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2221      	movs	r2, #33	; 0x21
 80016bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80016c0:	f7ff f95c 	bl	800097c <HAL_GetTick>
 80016c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	88fa      	ldrh	r2, [r7, #6]
 80016ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016d2:	e042      	b.n	800175a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ea:	d122      	bne.n	8001732 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2200      	movs	r2, #0
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f8f6 	bl	80018e8 <UART_WaitOnFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e046      	b.n	8001794 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001718:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3302      	adds	r3, #2
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	e017      	b.n	800175a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	3301      	adds	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	e013      	b.n	800175a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2200      	movs	r2, #0
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f8d3 	bl	80018e8 <UART_WaitOnFlagUntilTimeout>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e023      	b.n	8001794 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800175e:	b29b      	uxth	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1b7      	bne.n	80016d4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2200      	movs	r2, #0
 800176c:	2140      	movs	r1, #64	; 0x40
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f8ba 	bl	80018e8 <UART_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e00a      	b.n	8001794 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001792:	2302      	movs	r3, #2
  }
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	f040 8090 	bne.w	80018de <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_UART_Receive+0x2e>
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e088      	b.n	80018e0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_UART_Receive+0x40>
 80017d8:	2302      	movs	r3, #2
 80017da:	e081      	b.n	80018e0 <HAL_UART_Receive+0x144>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2222      	movs	r2, #34	; 0x22
 80017ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80017f2:	f7ff f8c3 	bl	800097c <HAL_GetTick>
 80017f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001804:	e05c      	b.n	80018c0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800180a:	b29b      	uxth	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181c:	d12b      	bne.n	8001876 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2200      	movs	r2, #0
 8001826:	2120      	movs	r1, #32
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f85d 	bl	80018e8 <UART_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e053      	b.n	80018e0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10c      	bne.n	800185e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	b29b      	uxth	r3, r3
 800184c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001850:	b29a      	uxth	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3302      	adds	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	e030      	b.n	80018c0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	b29b      	uxth	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	b29a      	uxth	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3301      	adds	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	e024      	b.n	80018c0 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2200      	movs	r2, #0
 800187e:	2120      	movs	r1, #32
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f831 	bl	80018e8 <UART_WaitOnFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e027      	b.n	80018e0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d108      	bne.n	80018aa <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	60ba      	str	r2, [r7, #8]
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e00a      	b.n	80018c0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1c59      	adds	r1, r3, #1
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d19d      	bne.n	8001806 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80018de:	2302      	movs	r3, #2
  }
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018f8:	e02c      	b.n	8001954 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d028      	beq.n	8001954 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <UART_WaitOnFlagUntilTimeout+0x30>
 8001908:	f7ff f838 	bl	800097c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	429a      	cmp	r2, r3
 8001916:	d21d      	bcs.n	8001954 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001926:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e00f      	b.n	8001974 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	4013      	ands	r3, r2
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	429a      	cmp	r2, r3
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	429a      	cmp	r2, r3
 8001970:	d0c3      	beq.n	80018fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019b6:	f023 030c 	bic.w	r3, r3, #12
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	68f9      	ldr	r1, [r7, #12]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <UART_SetConfig+0x1ac>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d14e      	bne.n	8001a82 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019e4:	f7ff fa6a 	bl	8000ebc <HAL_RCC_GetPCLK2Freq>
 80019e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	0119      	lsls	r1, r3, #4
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009a      	lsls	r2, r3, #2
 8001a14:	441a      	add	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001a22:	fba3 0302 	umull	r0, r3, r3, r2
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	fb00 f303 	mul.w	r3, r0, r3
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	3332      	adds	r3, #50	; 0x32
 8001a34:	4a3d      	ldr	r2, [pc, #244]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a40:	4419      	add	r1, r3
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	009a      	lsls	r2, r3, #2
 8001a4c:	441a      	add	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2064      	movs	r0, #100	; 0x64
 8001a62:	fb00 f303 	mul.w	r3, r0, r3
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	3332      	adds	r3, #50	; 0x32
 8001a6c:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	440a      	add	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001a80:	e04d      	b.n	8001b1e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a82:	f7ff fa07 	bl	8000e94 <HAL_RCC_GetPCLK1Freq>
 8001a86:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009a      	lsls	r2, r3, #2
 8001a92:	441a      	add	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	0119      	lsls	r1, r3, #4
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009a      	lsls	r2, r3, #2
 8001ab2:	441a      	add	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001ac0:	fba3 0302 	umull	r0, r3, r3, r2
 8001ac4:	095b      	lsrs	r3, r3, #5
 8001ac6:	2064      	movs	r0, #100	; 0x64
 8001ac8:	fb00 f303 	mul.w	r3, r0, r3
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	3332      	adds	r3, #50	; 0x32
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ade:	4419      	add	r1, r3
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009a      	lsls	r2, r3, #2
 8001aea:	441a      	add	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001af8:	fba3 0302 	umull	r0, r3, r3, r2
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	2064      	movs	r0, #100	; 0x64
 8001b00:	fb00 f303 	mul.w	r3, r0, r3
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	3332      	adds	r3, #50	; 0x32
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <UART_SetConfig+0x1b0>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	f003 020f 	and.w	r2, r3, #15
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	440a      	add	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	51eb851f 	.word	0x51eb851f

08001b30 <__libc_init_array>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	2500      	movs	r5, #0
 8001b34:	4e0c      	ldr	r6, [pc, #48]	; (8001b68 <__libc_init_array+0x38>)
 8001b36:	4c0d      	ldr	r4, [pc, #52]	; (8001b6c <__libc_init_array+0x3c>)
 8001b38:	1ba4      	subs	r4, r4, r6
 8001b3a:	10a4      	asrs	r4, r4, #2
 8001b3c:	42a5      	cmp	r5, r4
 8001b3e:	d109      	bne.n	8001b54 <__libc_init_array+0x24>
 8001b40:	f000 f81a 	bl	8001b78 <_init>
 8001b44:	2500      	movs	r5, #0
 8001b46:	4e0a      	ldr	r6, [pc, #40]	; (8001b70 <__libc_init_array+0x40>)
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <__libc_init_array+0x44>)
 8001b4a:	1ba4      	subs	r4, r4, r6
 8001b4c:	10a4      	asrs	r4, r4, #2
 8001b4e:	42a5      	cmp	r5, r4
 8001b50:	d105      	bne.n	8001b5e <__libc_init_array+0x2e>
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
 8001b54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b58:	4798      	blx	r3
 8001b5a:	3501      	adds	r5, #1
 8001b5c:	e7ee      	b.n	8001b3c <__libc_init_array+0xc>
 8001b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b62:	4798      	blx	r3
 8001b64:	3501      	adds	r5, #1
 8001b66:	e7f2      	b.n	8001b4e <__libc_init_array+0x1e>
 8001b68:	08001b9c 	.word	0x08001b9c
 8001b6c:	08001b9c 	.word	0x08001b9c
 8001b70:	08001b9c 	.word	0x08001b9c
 8001b74:	08001ba0 	.word	0x08001ba0

08001b78 <_init>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	bf00      	nop
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr

08001b84 <_fini>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	bf00      	nop
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr
