
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd4  08003fd4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd4  08003fd4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd4  08003fd4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  2000001c  08003ff8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014a0  08003ff8  000214a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f983  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002168  00000000  00000000  0002f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00031b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00032aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000085dd  00000000  00000000  00033940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011044  00000000  00000000  0003bf1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba0d4  00000000  00000000  0004cf61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00107035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004194  00000000  00000000  001070b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e6c 	.word	0x08003e6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003e6c 	.word	0x08003e6c

0800014c <Cam_Is_Ready>:
uint32_t handle_photo_index = 0;//defines current position in photo transfer
uint32_t handle_photo_size  = 50;//defines length of each FTP packet data
uint32_t handle_photo_stop  = 100;//defines length of image array to be sent

uint8_t Cam_Is_Ready()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	//returns HAL address
	uint8_t cam_ready_status = I2c_IsDeviceReady(CAM_I2C_ADDRESS);
 8000152:	2026      	movs	r0, #38	; 0x26
 8000154:	f000 fa1e 	bl	8000594 <I2c_IsDeviceReady>
 8000158:	4603      	mov	r3, r0
 800015a:	71fb      	strb	r3, [r7, #7]
	return cam_ready_status;
 800015c:	79fb      	ldrb	r3, [r7, #7]
}
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}
	...

08000168 <Cam_Set_I2C>:

void Cam_Set_I2C(uint8_t state)
{//uses GPIO pin to indicate to camera either to listen to I2C or resume its duties
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
	if(state == 1)
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	2b01      	cmp	r3, #1
 8000176:	d10a      	bne.n	800018e <Cam_Set_I2C+0x26>
	{
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2180      	movs	r1, #128	; 0x80
 800017c:	480c      	ldr	r0, [pc, #48]	; (80001b0 <Cam_Set_I2C+0x48>)
 800017e:	f002 f843 	bl	8002208 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//green LED on
 8000182:	2200      	movs	r2, #0
 8000184:	2108      	movs	r1, #8
 8000186:	480b      	ldr	r0, [pc, #44]	; (80001b4 <Cam_Set_I2C+0x4c>)
 8000188:	f002 f83e 	bl	8002208 <HAL_GPIO_WritePin>
	else if (state == 0)
	{
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800018c:	e00c      	b.n	80001a8 <Cam_Set_I2C+0x40>
	else if (state == 0)
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d109      	bne.n	80001a8 <Cam_Set_I2C+0x40>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	2180      	movs	r1, #128	; 0x80
 8000198:	4805      	ldr	r0, [pc, #20]	; (80001b0 <Cam_Set_I2C+0x48>)
 800019a:	f002 f835 	bl	8002208 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2108      	movs	r1, #8
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <Cam_Set_I2C+0x4c>)
 80001a4:	f002 f830 	bl	8002208 <HAL_GPIO_WritePin>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <Cam_Poll_Mode>:
void Cam_Poll_Mode()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	//uint8_t test = 0x22;
	//send single read command
	//receive 8 bits of data
	uint8_t command = CAM_COM_POLL_MODE;
 80001be:	2311      	movs	r3, #17
 80001c0:	71fb      	strb	r3, [r7, #7]
	//test = 0x22;
	//Radio_Transmit_Raw(&test, 1);
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	2201      	movs	r2, #1
 80001c6:	4619      	mov	r1, r3
 80001c8:	2026      	movs	r0, #38	; 0x26
 80001ca:	f000 f9fb 	bl	80005c4 <I2c_Master_Transmit>
	//if(Cam_Is_Ready() == HAL_OK)//line needs to be not busy for error not to occur
	//{
		 //test = 0x33;
		 //HAL_Delay(600);
		 //Radio_Transmit_Raw(&test, 1);
		 I2c_Master_Receive(CAM_I2C_ADDRESS, cam_alert_rx_buffer, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	4903      	ldr	r1, [pc, #12]	; (80001e0 <Cam_Poll_Mode+0x28>)
 80001d2:	2026      	movs	r0, #38	; 0x26
 80001d4:	f000 fa12 	bl	80005fc <I2c_Master_Receive>
		 //Radio_Transmit_Raw(&test, 1);
		 //Radio_Transmit_Raw(&cam_alert_rx_buffer, 1);
		 //transmission is getting stuck on, causing the cam to stay in receiving mode
		 //very important to send and expect to recieve the same amount of bytes, otherwise EIO and busy lock down errors
	//}
}
 80001d8:	bf00      	nop
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20001094 	.word	0x20001094

080001e4 <Cam_Poll_Img_Info>:

void Cam_Poll_Img_Info()
{   //recieve metadata about camera
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
	//[0:2]: handle_photo_stop
	uint8_t command = CAM_COM_POLL_IMG_INFO;
 80001ea:	2315      	movs	r3, #21
 80001ec:	71fb      	strb	r3, [r7, #7]
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	2201      	movs	r2, #1
 80001f2:	4619      	mov	r1, r3
 80001f4:	2026      	movs	r0, #38	; 0x26
 80001f6:	f000 f9e5 	bl	80005c4 <I2c_Master_Transmit>
	I2c_Master_Receive(CAM_I2C_ADDRESS, cam_photoInfo_buffer, 3);
 80001fa:	2203      	movs	r2, #3
 80001fc:	490a      	ldr	r1, [pc, #40]	; (8000228 <Cam_Poll_Img_Info+0x44>)
 80001fe:	2026      	movs	r0, #38	; 0x26
 8000200:	f000 f9fc 	bl	80005fc <I2c_Master_Receive>
	handle_photo_stop  = ((uint32_t)cam_photoInfo_buffer[0]) + (((uint32_t) cam_photoInfo_buffer[1])<<8) + (((uint32_t) cam_photoInfo_buffer[2])<<16);
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <Cam_Poll_Img_Info+0x44>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <Cam_Poll_Img_Info+0x44>)
 800020c:	785b      	ldrb	r3, [r3, #1]
 800020e:	021b      	lsls	r3, r3, #8
 8000210:	441a      	add	r2, r3
 8000212:	4b05      	ldr	r3, [pc, #20]	; (8000228 <Cam_Poll_Img_Info+0x44>)
 8000214:	789b      	ldrb	r3, [r3, #2]
 8000216:	041b      	lsls	r3, r3, #16
 8000218:	4413      	add	r3, r2
 800021a:	4a04      	ldr	r2, [pc, #16]	; (800022c <Cam_Poll_Img_Info+0x48>)
 800021c:	6013      	str	r3, [r2, #0]
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20001090 	.word	0x20001090
 800022c:	20000008 	.word	0x20000008

08000230 <Cam_Poll_Img_Data>:

void Cam_Poll_Img_Data(uint32_t startIndex, uint8_t numBytes)
{//receives image buffer data starting at startIndex of length numBytes
 8000230:	b5b0      	push	{r4, r5, r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
 800023c:	466b      	mov	r3, sp
 800023e:	461d      	mov	r5, r3
	uint8_t command = CAM_COM_POLL_IMG_DATA;
 8000240:	2313      	movs	r3, #19
 8000242:	74fb      	strb	r3, [r7, #19]
	uint8_t details[5];//format [startIndex [4:1] , numBytes[0]
		details[4] = (uint8_t) (startIndex >> 8*3) & 0x00FF;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	0e1b      	lsrs	r3, r3, #24
 8000248:	b2db      	uxtb	r3, r3
 800024a:	743b      	strb	r3, [r7, #16]
		details[3] = (uint8_t) (startIndex >> 8*2) & 0x00FF;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	0c1b      	lsrs	r3, r3, #16
 8000250:	b2db      	uxtb	r3, r3
 8000252:	73fb      	strb	r3, [r7, #15]
		details[2] = (uint8_t) (startIndex >> 8*1) & 0x00FF;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	0a1b      	lsrs	r3, r3, #8
 8000258:	b2db      	uxtb	r3, r3
 800025a:	73bb      	strb	r3, [r7, #14]
		details[1] = (uint8_t) startIndex & 0x00FF;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	737b      	strb	r3, [r7, #13]
		details[0] = numBytes;
 8000262:	78fb      	ldrb	r3, [r7, #3]
 8000264:	733b      	strb	r3, [r7, #12]
	//uint8_t test = 0x22;
	//Radio_Transmit_Raw(&test, 1);
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);//transmit image command
 8000266:	f107 0313 	add.w	r3, r7, #19
 800026a:	2201      	movs	r2, #1
 800026c:	4619      	mov	r1, r3
 800026e:	2026      	movs	r0, #38	; 0x26
 8000270:	f000 f9a8 	bl	80005c4 <I2c_Master_Transmit>
	//HAL_Delay(500);
	//test = 0x33;
	//Radio_Transmit_Raw(&test, 1);
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &details, 5);//transmit details of requested transmission
 8000274:	f107 030c 	add.w	r3, r7, #12
 8000278:	2205      	movs	r2, #5
 800027a:	4619      	mov	r1, r3
 800027c:	2026      	movs	r0, #38	; 0x26
 800027e:	f000 f9a1 	bl	80005c4 <I2c_Master_Transmit>
	HAL_Delay(100);//this delay may be needed
 8000282:	2064      	movs	r0, #100	; 0x64
 8000284:	f001 fd60 	bl	8001d48 <HAL_Delay>
	//test = 0x44;
	//Radio_Transmit_Raw(&test, 1);
	uint8_t temp_buffer[numBytes];//cannot index rx_buffer directly here!
 8000288:	78f8      	ldrb	r0, [r7, #3]
 800028a:	4603      	mov	r3, r0
 800028c:	3b01      	subs	r3, #1
 800028e:	61bb      	str	r3, [r7, #24]
 8000290:	b2c1      	uxtb	r1, r0
 8000292:	f04f 0200 	mov.w	r2, #0
 8000296:	f04f 0300 	mov.w	r3, #0
 800029a:	f04f 0400 	mov.w	r4, #0
 800029e:	00d4      	lsls	r4, r2, #3
 80002a0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002a4:	00cb      	lsls	r3, r1, #3
 80002a6:	b2c1      	uxtb	r1, r0
 80002a8:	f04f 0200 	mov.w	r2, #0
 80002ac:	f04f 0300 	mov.w	r3, #0
 80002b0:	f04f 0400 	mov.w	r4, #0
 80002b4:	00d4      	lsls	r4, r2, #3
 80002b6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002ba:	00cb      	lsls	r3, r1, #3
 80002bc:	4603      	mov	r3, r0
 80002be:	3307      	adds	r3, #7
 80002c0:	08db      	lsrs	r3, r3, #3
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	ebad 0d03 	sub.w	sp, sp, r3
 80002c8:	466b      	mov	r3, sp
 80002ca:	3300      	adds	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
	I2c_Master_Receive(CAM_I2C_ADDRESS, &temp_buffer, numBytes);//receive requested information
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	78fa      	ldrb	r2, [r7, #3]
 80002d2:	b292      	uxth	r2, r2
 80002d4:	4619      	mov	r1, r3
 80002d6:	2026      	movs	r0, #38	; 0x26
 80002d8:	f000 f990 	bl	80005fc <I2c_Master_Receive>
	//Radio_Transmit_Raw(&test, 1);
	///transfer temp to photo buffer
	for (uint32_t i=0; i<numBytes; i++)
 80002dc:	2300      	movs	r3, #0
 80002de:	61fb      	str	r3, [r7, #28]
 80002e0:	e00b      	b.n	80002fa <Cam_Poll_Img_Data+0xca>
	{
		cam_photo_rx_buffer[startIndex + i] = temp_buffer[i];
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	4413      	add	r3, r2
 80002e8:	6979      	ldr	r1, [r7, #20]
 80002ea:	69fa      	ldr	r2, [r7, #28]
 80002ec:	440a      	add	r2, r1
 80002ee:	7811      	ldrb	r1, [r2, #0]
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <Cam_Poll_Img_Data+0xe4>)
 80002f2:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i=0; i<numBytes; i++)
 80002f4:	69fb      	ldr	r3, [r7, #28]
 80002f6:	3301      	adds	r3, #1
 80002f8:	61fb      	str	r3, [r7, #28]
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	69fa      	ldr	r2, [r7, #28]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d3ef      	bcc.n	80002e2 <Cam_Poll_Img_Data+0xb2>
	}
	HAL_Delay(500);
 8000302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000306:	f001 fd1f 	bl	8001d48 <HAL_Delay>
 800030a:	46ad      	mov	sp, r5
}
 800030c:	bf00      	nop
 800030e:	3720      	adds	r7, #32
 8000310:	46bd      	mov	sp, r7
 8000312:	bdb0      	pop	{r4, r5, r7, pc}
 8000314:	20000038 	.word	0x20000038

08000318 <Cam_Transmit_Alert>:

void Cam_Transmit_Alert()
{//send alert status to ground station
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	MAV_Send_Msg_Named_Value_Int("FireAlert", (uint32_t) cam_alert_rx_buffer[0]);
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <Cam_Transmit_Alert+0x14>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	4619      	mov	r1, r3
 8000322:	4803      	ldr	r0, [pc, #12]	; (8000330 <Cam_Transmit_Alert+0x18>)
 8000324:	f001 f9fc 	bl	8001720 <MAV_Send_Msg_Named_Value_Int>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20001094 	.word	0x20001094
 8000330:	08003e84 	.word	0x08003e84

08000334 <Cam_Transmit_Photo>:

void Cam_Transmit_Photo(uint32_t startIndex, uint8_t numBytes)
{
 8000334:	b5b0      	push	{r4, r5, r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
 8000340:	466b      	mov	r3, sp
 8000342:	461d      	mov	r5, r3
	uint8_t photo_data[numBytes+3];
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	1cd8      	adds	r0, r3, #3
 8000348:	1e43      	subs	r3, r0, #1
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	4603      	mov	r3, r0
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 0200 	mov.w	r2, #0
 8000354:	f04f 0300 	mov.w	r3, #0
 8000358:	f04f 0400 	mov.w	r4, #0
 800035c:	00d4      	lsls	r4, r2, #3
 800035e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000362:	00cb      	lsls	r3, r1, #3
 8000364:	4603      	mov	r3, r0
 8000366:	4619      	mov	r1, r3
 8000368:	f04f 0200 	mov.w	r2, #0
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	f04f 0400 	mov.w	r4, #0
 8000374:	00d4      	lsls	r4, r2, #3
 8000376:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800037a:	00cb      	lsls	r3, r1, #3
 800037c:	4603      	mov	r3, r0
 800037e:	3307      	adds	r3, #7
 8000380:	08db      	lsrs	r3, r3, #3
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	ebad 0d03 	sub.w	sp, sp, r3
 8000388:	466b      	mov	r3, sp
 800038a:	3300      	adds	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
	photo_data[2] = (uint8_t) (startIndex >> 8*2) & 0x00FF;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	0c1b      	lsrs	r3, r3, #16
 8000392:	b2da      	uxtb	r2, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	709a      	strb	r2, [r3, #2]
	photo_data[1] = (uint8_t) (startIndex >> 8*1) & 0x00FF;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	0a1b      	lsrs	r3, r3, #8
 800039c:	b2da      	uxtb	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	705a      	strb	r2, [r3, #1]
	//photo_data[2] = 1;
	//photo_data[1] = 1;
	photo_data[0] = (uint8_t)  startIndex         & 0x00FF;//encode in first 3 bytes the start index
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	701a      	strb	r2, [r3, #0]

	for (uint32_t i=0;i<numBytes;i++)
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	e00b      	b.n	80003c8 <Cam_Transmit_Photo+0x94>
	{
		photo_data[i+3] = cam_photo_rx_buffer[startIndex + i];
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	441a      	add	r2, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3303      	adds	r3, #3
 80003ba:	4912      	ldr	r1, [pc, #72]	; (8000404 <Cam_Transmit_Photo+0xd0>)
 80003bc:	5c89      	ldrb	r1, [r1, r2]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i=0;i<numBytes;i++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d3ef      	bcc.n	80003b0 <Cam_Transmit_Photo+0x7c>
	}
	//strncpy(&photo_data[3], &cam_photo_rx_buffer[startIndex], numBytes);
	Radio_Transmit_Raw(&photo_data, numBytes+3);
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	3303      	adds	r3, #3
 80003d8:	b29b      	uxth	r3, r3
 80003da:	4619      	mov	r1, r3
 80003dc:	4610      	mov	r0, r2
 80003de:	f001 faa9 	bl	8001934 <Radio_Transmit_Raw>
	HAL_Delay(500);
 80003e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e6:	f001 fcaf 	bl	8001d48 <HAL_Delay>
	MAV_send_File_Transfer_Protocol(&photo_data, numBytes+3);
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	3303      	adds	r3, #3
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	4619      	mov	r1, r3
 80003f4:	4610      	mov	r0, r2
 80003f6:	f001 f9eb 	bl	80017d0 <MAV_send_File_Transfer_Protocol>
 80003fa:	46ad      	mov	sp, r5
}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bdb0      	pop	{r4, r5, r7, pc}
 8000404:	20000038 	.word	0x20000038

08000408 <Cam_Handle>:
	//Radio_Transmit_Raw(&photo_data, numBytes);
	Radio_Transmit_Raw(&photo_data, numBytes);
}

void Cam_Handle()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//MAV_Send_Debug_Statement_Default();
	if(handle_mode == CAM_MODE_POLLING)//wait for fire detect
 800040c:	4b56      	ldr	r3, [pc, #344]	; (8000568 <Cam_Handle+0x160>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b11      	cmp	r3, #17
 8000412:	d126      	bne.n	8000462 <Cam_Handle+0x5a>
	{
		Cam_Set_I2C(1);
 8000414:	2001      	movs	r0, #1
 8000416:	f7ff fea7 	bl	8000168 <Cam_Set_I2C>
		HAL_Delay(500);
 800041a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800041e:	f001 fc93 	bl	8001d48 <HAL_Delay>
		if (Cam_Is_Ready() == HAL_OK)
 8000422:	f7ff fe93 	bl	800014c <Cam_Is_Ready>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	f040 8097 	bne.w	800055c <Cam_Handle+0x154>
		{
			Cam_Poll_Mode();
 800042e:	f7ff fec3 	bl	80001b8 <Cam_Poll_Mode>
			Cam_Transmit_Alert();
 8000432:	f7ff ff71 	bl	8000318 <Cam_Transmit_Alert>
			if(cam_alert_rx_buffer[0] ==  CAM_MODE_ALERT || cam_alert_rx_buffer[0] ==  CAM_MODE_STORED )
 8000436:	4b4d      	ldr	r3, [pc, #308]	; (800056c <Cam_Handle+0x164>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b22      	cmp	r3, #34	; 0x22
 800043c:	d003      	beq.n	8000446 <Cam_Handle+0x3e>
 800043e:	4b4b      	ldr	r3, [pc, #300]	; (800056c <Cam_Handle+0x164>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b33      	cmp	r3, #51	; 0x33
 8000444:	d105      	bne.n	8000452 <Cam_Handle+0x4a>
			{
				Cam_Transmit_Alert();//send alert
 8000446:	f7ff ff67 	bl	8000318 <Cam_Transmit_Alert>
				handle_mode = CAM_MODE_ALERT;
 800044a:	4b47      	ldr	r3, [pc, #284]	; (8000568 <Cam_Handle+0x160>)
 800044c:	2222      	movs	r2, #34	; 0x22
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	e084      	b.n	800055c <Cam_Handle+0x154>
			}
			else
			{
				Cam_Set_I2C(0);
 8000452:	2000      	movs	r0, #0
 8000454:	f7ff fe88 	bl	8000168 <Cam_Set_I2C>
				HAL_Delay(5000);
 8000458:	f241 3088 	movw	r0, #5000	; 0x1388
 800045c:	f001 fc74 	bl	8001d48 <HAL_Delay>
 8000460:	e07c      	b.n	800055c <Cam_Handle+0x154>
			}
		}
	}
	else if(handle_mode == CAM_MODE_ALERT)//wait for photo request and image to be stored
 8000462:	4b41      	ldr	r3, [pc, #260]	; (8000568 <Cam_Handle+0x160>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b22      	cmp	r3, #34	; 0x22
 8000468:	d125      	bne.n	80004b6 <Cam_Handle+0xae>
	{
		Cam_Set_I2C(1);
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff fe7c 	bl	8000168 <Cam_Set_I2C>
		HAL_Delay(500);
 8000470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000474:	f001 fc68 	bl	8001d48 <HAL_Delay>
		if (Cam_Is_Ready() == HAL_OK)
 8000478:	f7ff fe68 	bl	800014c <Cam_Is_Ready>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d103      	bne.n	800048a <Cam_Handle+0x82>
		{
			Cam_Poll_Mode();
 8000482:	f7ff fe99 	bl	80001b8 <Cam_Poll_Mode>
			Cam_Transmit_Alert();
 8000486:	f7ff ff47 	bl	8000318 <Cam_Transmit_Alert>
		}

		if(handle_gs_request == CAM_GS_IMG_DOWNLOAD && cam_alert_rx_buffer[0] ==  CAM_MODE_STORED)//mavlink request + stored image needed
 800048a:	4b39      	ldr	r3, [pc, #228]	; (8000570 <Cam_Handle+0x168>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b11      	cmp	r3, #17
 8000490:	d109      	bne.n	80004a6 <Cam_Handle+0x9e>
 8000492:	4b36      	ldr	r3, [pc, #216]	; (800056c <Cam_Handle+0x164>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b33      	cmp	r3, #51	; 0x33
 8000498:	d105      	bne.n	80004a6 <Cam_Handle+0x9e>
		{
			Cam_Poll_Img_Info();
 800049a:	f7ff fea3 	bl	80001e4 <Cam_Poll_Img_Info>
			handle_mode = CAM_MODE_STORED;
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <Cam_Handle+0x160>)
 80004a0:	2233      	movs	r2, #51	; 0x33
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05a      	b.n	800055c <Cam_Handle+0x154>
		}
		else
		{
			Cam_Set_I2C(0);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff fe5e 	bl	8000168 <Cam_Set_I2C>
			HAL_Delay(5000);
 80004ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80004b0:	f001 fc4a 	bl	8001d48 <HAL_Delay>
 80004b4:	e052      	b.n	800055c <Cam_Handle+0x154>
		}
	}
	else if(handle_mode == CAM_MODE_STORED)//start downlink of photo data
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <Cam_Handle+0x160>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b33      	cmp	r3, #51	; 0x33
 80004bc:	d140      	bne.n	8000540 <Cam_Handle+0x138>
	{
		//MAV_Send_Debug_Statement_Default();
		Cam_Set_I2C(1);
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff fe52 	bl	8000168 <Cam_Set_I2C>
		HAL_Delay(50);
 80004c4:	2032      	movs	r0, #50	; 0x32
 80004c6:	f001 fc3f 	bl	8001d48 <HAL_Delay>
		MAV_Send_Msg_Named_Value_Int("imgStop0", cam_photoInfo_buffer[0]);
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <Cam_Handle+0x16c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4829      	ldr	r0, [pc, #164]	; (8000578 <Cam_Handle+0x170>)
 80004d2:	f001 f925 	bl	8001720 <MAV_Send_Msg_Named_Value_Int>
		MAV_Send_Msg_Named_Value_Int("imgStop1", cam_photoInfo_buffer[1]);
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <Cam_Handle+0x16c>)
 80004d8:	785b      	ldrb	r3, [r3, #1]
 80004da:	4619      	mov	r1, r3
 80004dc:	4827      	ldr	r0, [pc, #156]	; (800057c <Cam_Handle+0x174>)
 80004de:	f001 f91f 	bl	8001720 <MAV_Send_Msg_Named_Value_Int>
		MAV_Send_Msg_Named_Value_Int("imgStop2", cam_photoInfo_buffer[2]);
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <Cam_Handle+0x16c>)
 80004e4:	789b      	ldrb	r3, [r3, #2]
 80004e6:	4619      	mov	r1, r3
 80004e8:	4825      	ldr	r0, [pc, #148]	; (8000580 <Cam_Handle+0x178>)
 80004ea:	f001 f919 	bl	8001720 <MAV_Send_Msg_Named_Value_Int>
		if(handle_photo_index < handle_photo_stop)
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <Cam_Handle+0x17c>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <Cam_Handle+0x180>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d21e      	bcs.n	8000538 <Cam_Handle+0x130>
		{
			//MAV_Send_Debug_Statement_Default();
			if (Cam_Is_Ready() == HAL_OK)
 80004fa:	f7ff fe27 	bl	800014c <Cam_Is_Ready>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d12b      	bne.n	800055c <Cam_Handle+0x154>
			{
				//MAV_Send_Debug_Statement_Default();
				Cam_Poll_Img_Data(handle_photo_index, handle_photo_size);
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <Cam_Handle+0x17c>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <Cam_Handle+0x184>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	4610      	mov	r0, r2
 8000512:	f7ff fe8d 	bl	8000230 <Cam_Poll_Img_Data>
				Cam_Transmit_Photo(handle_photo_index,handle_photo_size);//send photo data
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <Cam_Handle+0x17c>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <Cam_Handle+0x184>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	4610      	mov	r0, r2
 8000524:	f7ff ff06 	bl	8000334 <Cam_Transmit_Photo>
				handle_photo_index += handle_photo_size;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <Cam_Handle+0x17c>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <Cam_Handle+0x184>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4413      	add	r3, r2
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <Cam_Handle+0x17c>)
 8000534:	6013      	str	r3, [r2, #0]
 8000536:	e011      	b.n	800055c <Cam_Handle+0x154>
			}
		}
		else
		{
			handle_mode = CAM_MODE_COMPLETE;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <Cam_Handle+0x160>)
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	e00d      	b.n	800055c <Cam_Handle+0x154>
		}
	}
	else if(handle_mode == CAM_MODE_COMPLETE)
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <Cam_Handle+0x160>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b44      	cmp	r3, #68	; 0x44
 8000546:	d109      	bne.n	800055c <Cam_Handle+0x154>
	{
		MAV_Send_Msg_Named_Value_Int("CAM_DONE", (uint32_t) cam_alert_rx_buffer[0]);
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <Cam_Handle+0x164>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	4810      	ldr	r0, [pc, #64]	; (8000590 <Cam_Handle+0x188>)
 8000550:	f001 f8e6 	bl	8001720 <MAV_Send_Msg_Named_Value_Int>
		HAL_Delay(5000);
 8000554:	f241 3088 	movw	r0, #5000	; 0x1388
 8000558:	f001 fbf6 	bl	8001d48 <HAL_Delay>
	}
	Cam_Set_I2C(0);
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe03 	bl	8000168 <Cam_Set_I2C>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000
 800056c:	20001094 	.word	0x20001094
 8000570:	20000001 	.word	0x20000001
 8000574:	20001090 	.word	0x20001090
 8000578:	08003e90 	.word	0x08003e90
 800057c:	08003e9c 	.word	0x08003e9c
 8000580:	08003ea8 	.word	0x08003ea8
 8000584:	20000fd8 	.word	0x20000fd8
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004
 8000590:	08003eb4 	.word	0x08003eb4

08000594 <I2c_IsDeviceReady>:
I2C_HandleTypeDef hi2c2;
#define I2C_TRIALS_DEFAULT 40
#define I2C_TIMEOUT_DEFAULT 2000

uint8_t I2c_IsDeviceReady(uint8_t Address)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	81fb      	strh	r3, [r7, #14]
	//uint16_t devAddress = 0b0000000001110111;
	uint8_t test[2];
	//test[1] = devAddress & 0xff;
	//test[0] = devAddress >>8;
	//Radio_Transmit_Raw(&test, 2);
	return HAL_I2C_IsDeviceReady(&hi2c2, devAddress, I2C_TRIALS_DEFAULT, I2C_TIMEOUT_DEFAULT);
 80005a6:	89f9      	ldrh	r1, [r7, #14]
 80005a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005ac:	2228      	movs	r2, #40	; 0x28
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <I2c_IsDeviceReady+0x2c>)
 80005b0:	f002 fa96 	bl	8002ae0 <HAL_I2C_IsDeviceReady>
 80005b4:	4603      	mov	r3, r0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000103c 	.word	0x2000103c

080005c4 <I2c_Master_Transmit>:

void I2c_Master_Transmit(uint8_t Address, uint8_t* message, uint16_t messageSize)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left once before use (check HAL documentation)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, devAddress, message, messageSize, I2C_TIMEOUT_DEFAULT);
 80005dc:	88ba      	ldrh	r2, [r7, #4]
 80005de:	89f9      	ldrh	r1, [r7, #14]
 80005e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4613      	mov	r3, r2
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <I2c_Master_Transmit+0x34>)
 80005ec:	f001 ff4c 	bl	8002488 <HAL_I2C_Master_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000103c 	.word	0x2000103c

080005fc <I2c_Master_Receive>:

void I2c_Master_Receive(uint8_t Address, uint8_t* messageDestination, uint16_t messageSize)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	b29b      	uxth	r3, r3
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Receive(&hi2c2, devAddress, messageDestination, messageSize, I2C_TIMEOUT_DEFAULT);
 8000614:	88ba      	ldrh	r2, [r7, #4]
 8000616:	89f9      	ldrh	r1, [r7, #14]
 8000618:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4613      	mov	r3, r2
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <I2c_Master_Receive+0x34>)
 8000624:	f002 f82e 	bl	8002684 <HAL_I2C_Master_Receive>
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000103c 	.word	0x2000103c

08000634 <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 800063a:	f001 fb23 	bl	8001c84 <HAL_Init>
	MX_USART1_UART_Init();
 800063e:	f000 f8e1 	bl	8000804 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 8000642:	f000 f863 	bl	800070c <MX_TIM4_Init>
	MX_I2C2_Init();
 8000646:	f000 f833 	bl	80006b0 <MX_I2C2_Init>
	MX_GPIO_Init();
 800064a:	f000 f905 	bl	8000858 <MX_GPIO_Init>
	//    1  // Component ID (a MAV_COMPONENT value)
	//};
	//Motor_Arm();
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]

	uint8_t payload_test[10] = {1,2,3,4,5,6,7,8,9,10};
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <main+0x70>)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	ca07      	ldmia	r2, {r0, r1, r2}
 8000654:	c303      	stmia	r3!, {r0, r1}
 8000656:	801a      	strh	r2, [r3, #0]
	//uint8_t payload_test[10];
	for (uint8_t i=0; i<10;i++)
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	e00b      	b.n	8000676 <main+0x42>
	{
		payload_test[i] = i+1;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	3201      	adds	r2, #1
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	f107 0110 	add.w	r1, r7, #16
 800066a:	440b      	add	r3, r1
 800066c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i=0; i<10;i++)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b09      	cmp	r3, #9
 800067a:	d9f0      	bls.n	800065e <main+0x2a>
	}
	//uint8_t test[5] = {0x55, 0x55, 0x55, 0x55, 0x55};
	//uint8_t baro_flag = 5;
	cam_photo_rx_buffer[10] = 0x44;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <main+0x74>)
 800067e:	2244      	movs	r2, #68	; 0x44
 8000680:	729a      	strb	r2, [r3, #10]
	cam_photo_rx_buffer[11] = 0x55;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <main+0x74>)
 8000684:	2255      	movs	r2, #85	; 0x55
 8000686:	72da      	strb	r2, [r3, #11]
	cam_photo_rx_buffer[12] = 0x66;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <main+0x74>)
 800068a:	2266      	movs	r2, #102	; 0x66
 800068c:	731a      	strb	r2, [r3, #12]
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2108      	movs	r1, #8
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <main+0x78>)
 8000694:	f001 fdb8 	bl	8002208 <HAL_GPIO_WritePin>
		//Cam_Set_I2C(0);
		HAL_Delay(1000);
		*/
		//-- code part 3 --
		///*
		Cam_Handle();
 8000698:	f7ff feb6 	bl	8000408 <Cam_Handle>
		HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f001 fb53 	bl	8001d48 <HAL_Delay>
		Cam_Handle();
 80006a2:	e7f9      	b.n	8000698 <main+0x64>
 80006a4:	08003ec0 	.word	0x08003ec0
 80006a8:	20000038 	.word	0x20000038
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C2_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_I2C2_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C2_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_I2C2_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C2_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_I2C2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_I2C2_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_I2C2_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_I2C2_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_I2C2_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_I2C2_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C2_Init+0x50>)
 80006ee:	f001 fda3 	bl	8002238 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f900 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000103c 	.word	0x2000103c
 8000704:	40005800 	.word	0x40005800
 8000708:	000186a0 	.word	0x000186a0

0800070c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800072e:	4b33      	ldr	r3, [pc, #204]	; (80007fc <MX_TIM4_Init+0xf0>)
 8000730:	4a33      	ldr	r2, [pc, #204]	; (8000800 <MX_TIM4_Init+0xf4>)
 8000732:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <MX_TIM4_Init+0xf0>)
 8000736:	220a      	movs	r2, #10
 8000738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b30      	ldr	r3, [pc, #192]	; (80007fc <MX_TIM4_Init+0xf0>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <MX_TIM4_Init+0xf0>)
 8000742:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_TIM4_Init+0xf0>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_TIM4_Init+0xf0>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000754:	4829      	ldr	r0, [pc, #164]	; (80007fc <MX_TIM4_Init+0xf0>)
 8000756:	f002 fe1f 	bl	8003398 <HAL_TIM_PWM_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f8cc 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4619      	mov	r1, r3
 8000772:	4822      	ldr	r0, [pc, #136]	; (80007fc <MX_TIM4_Init+0xf0>)
 8000774:	f003 f8ec 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800077e:	f000 f8bd 	bl	80008fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000782:	2360      	movs	r3, #96	; 0x60
 8000784:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 8000786:	f44f 7348 	mov.w	r3, #800	; 0x320
 800078a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_TIM4_Init+0xf0>)
 800079c:	f002 fe28 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80007a6:	f000 f8a9 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2204      	movs	r2, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4812      	ldr	r0, [pc, #72]	; (80007fc <MX_TIM4_Init+0xf0>)
 80007b2:	f002 fe1d 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80007bc:	f000 f89e 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2208      	movs	r2, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_TIM4_Init+0xf0>)
 80007c8:	f002 fe12 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80007d2:	f000 f893 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	220c      	movs	r2, #12
 80007da:	4619      	mov	r1, r3
 80007dc:	4807      	ldr	r0, [pc, #28]	; (80007fc <MX_TIM4_Init+0xf0>)
 80007de:	f002 fe07 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80007e8:	f000 f888 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <MX_TIM4_Init+0xf0>)
 80007ee:	f001 f945 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20001098 	.word	0x20001098
 8000800:	40000800 	.word	0x40000800

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2*57600;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800083c:	f003 f8cc 	bl	80039d8 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f859 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200010d8 	.word	0x200010d8
 8000854:	40013800 	.word	0x40013800

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_GPIO_Init+0x98>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <MX_GPIO_Init+0x98>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x98>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x98>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <MX_GPIO_Init+0x98>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_GPIO_Init+0x98>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <MX_GPIO_Init+0x9c>)
 80008a2:	f001 fcb1 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_GPIO_Init+0xa0>)
 80008ac:	f001 fcac 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0x9c>)
 80008c8:	f001 fb44 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008cc:	2308      	movs	r3, #8
 80008ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_GPIO_Init+0xa0>)
 80008e4:	f001 fb36 	bl	8001f54 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40010c00 	.word	0x40010c00

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4053      	eors	r3, r2
 800091e:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	011b      	lsls	r3, r3, #4
 8000924:	b25a      	sxtb	r2, r3
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4053      	eors	r3, r2
 800092c:	b25b      	sxtb	r3, r3
 800092e:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b21a      	sxth	r2, r3
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	b21b      	sxth	r3, r3
 8000940:	4053      	eors	r3, r2
 8000942:	b21a      	sxth	r2, r3
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	b21b      	sxth	r3, r3
 800094a:	4053      	eors	r3, r2
 800094c:	b21a      	sxth	r2, r3
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	091b      	lsrs	r3, r3, #4
 8000952:	b2db      	uxtb	r3, r3
 8000954:	b21b      	sxth	r3, r3
 8000956:	4053      	eors	r3, r2
 8000958:	b21b      	sxth	r3, r3
 800095a:	b29a      	uxth	r2, r3
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	801a      	strh	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000978:	801a      	strh	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000990:	f107 030e 	add.w	r3, r7, #14
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffe8 	bl	800096a <crc_init>
	while (length--) {
 800099a:	e009      	b.n	80009b0 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f107 020e 	add.w	r2, r7, #14
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ffac 	bl	8000908 <crc_accumulate>
	while (length--) {
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	807a      	strh	r2, [r7, #2]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f0      	bne.n	800099c <crc_calculate+0x18>
        }
        return crcTmp;
 80009ba:	89fb      	ldrh	r3, [r7, #14]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	4613      	mov	r3, r2
 80009d0:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	617b      	str	r3, [r7, #20]
	while (length--) {
 80009d6:	e007      	b.n	80009e8 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	617a      	str	r2, [r7, #20]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	68f9      	ldr	r1, [r7, #12]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff90 	bl	8000908 <crc_accumulate>
	while (length--) {
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	80fa      	strh	r2, [r7, #6]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1f2      	bne.n	80009d8 <crc_accumulate_buffer+0x14>
        }
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <mavlink_sha256_init+0x50>)
 8000a14:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <mavlink_sha256_init+0x54>)
 8000a1a:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <mavlink_sha256_init+0x58>)
 8000a20:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <mavlink_sha256_init+0x5c>)
 8000a26:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <mavlink_sha256_init+0x60>)
 8000a2c:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <mavlink_sha256_init+0x64>)
 8000a32:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <mavlink_sha256_init+0x68>)
 8000a38:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <mavlink_sha256_init+0x6c>)
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	6a09e667 	.word	0x6a09e667
 8000a50:	bb67ae85 	.word	0xbb67ae85
 8000a54:	3c6ef372 	.word	0x3c6ef372
 8000a58:	a54ff53a 	.word	0xa54ff53a
 8000a5c:	510e527f 	.word	0x510e527f
 8000a60:	9b05688c 	.word	0x9b05688c
 8000a64:	1f83d9ab 	.word	0x1f83d9ab
 8000a68:	5be0cd19 	.word	0x5be0cd19

08000a6c <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b0cf      	sub	sp, #316	; 0x13c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	6018      	str	r0, [r3, #0]
 8000a76:	463b      	mov	r3, r7
 8000a78:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6a1b      	ldr	r3, [r3, #32]
 8000abc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000ad0:	e011      	b.n	8000af6 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8000ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	463a      	mov	r2, r7
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000af0:	3301      	adds	r3, #1
 8000af2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	dde9      	ble.n	8000ad2 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 8000afe:	2310      	movs	r3, #16
 8000b00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000b04:	e057      	b.n	8000bb6 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b0a:	1e9a      	subs	r2, r3, #2
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b14:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b1c:	1e99      	subs	r1, r3, #2
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b26:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000b2a:	405a      	eors	r2, r3
 8000b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b30:	1e99      	subs	r1, r3, #2
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b3a:	0a9b      	lsrs	r3, r3, #10
 8000b3c:	405a      	eors	r2, r3
 8000b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b42:	1fd9      	subs	r1, r3, #7
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b4c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b52:	f1a3 010f 	sub.w	r1, r3, #15
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b5e:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b66:	f1a3 000f 	sub.w	r0, r3, #15
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b72:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000b76:	4059      	eors	r1, r3
 8000b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b7c:	f1a3 000f 	sub.w	r0, r3, #15
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000b8c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b92:	f1a3 0110 	sub.w	r1, r3, #16
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b9e:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bba:	2b3f      	cmp	r3, #63	; 0x3f
 8000bbc:	dda3      	ble.n	8000b06 <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000bc4:	e076      	b.n	8000cb4 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000bca:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000bce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000bd2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000bd6:	405a      	eors	r2, r3
 8000bd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000bdc:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000be0:	405a      	eors	r2, r3
 8000be2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000be6:	441a      	add	r2, r3
 8000be8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000bec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bf0:	4019      	ands	r1, r3
 8000bf2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000bf6:	43d8      	mvns	r0, r3
 8000bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000bfc:	4003      	ands	r3, r0
 8000bfe:	404b      	eors	r3, r1
 8000c00:	441a      	add	r2, r3
 8000c02:	4955      	ldr	r1, [pc, #340]	; (8000d58 <mavlink_sha256_calc+0x2ec>)
 8000c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c0c:	441a      	add	r2, r3
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000c16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c24:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000c28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c2c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000c30:	405a      	eors	r2, r3
 8000c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c36:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000c3a:	405a      	eors	r2, r3
 8000c3c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c44:	4059      	eors	r1, r3
 8000c46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c54:	4003      	ands	r3, r0
 8000c56:	404b      	eors	r3, r1
 8000c58:	4413      	add	r3, r2
 8000c5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000c66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000c6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000c76:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c7e:	4413      	add	r3, r2
 8000c80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000c8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000c94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000c9c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000cb8:	2b3f      	cmp	r3, #63	; 0x3f
 8000cba:	dd84      	ble.n	8000bc6 <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000cc6:	441a      	add	r2, r3
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	609a      	str	r2, [r3, #8]
    B += BB;
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000cd8:	441a      	add	r2, r3
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	60da      	str	r2, [r3, #12]
    C += CC;
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cea:	441a      	add	r2, r3
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	611a      	str	r2, [r3, #16]
    D += DD;
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	695a      	ldr	r2, [r3, #20]
 8000cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000cfc:	441a      	add	r2, r3
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	615a      	str	r2, [r3, #20]
    E += EE;
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	699a      	ldr	r2, [r3, #24]
 8000d0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d0e:	441a      	add	r2, r3
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	619a      	str	r2, [r3, #24]
    F += FF;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	69da      	ldr	r2, [r3, #28]
 8000d1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d20:	441a      	add	r2, r3
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	61da      	str	r2, [r3, #28]
    G += GG;
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6a1a      	ldr	r2, [r3, #32]
 8000d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d32:	441a      	add	r2, r3
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	621a      	str	r2, [r3, #32]
    H += HH;
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000d44:	441a      	add	r2, r3
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d4c:	bf00      	nop
 8000d4e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	08003ecc 	.word	0x08003ecc

08000d5c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b09c      	sub	sp, #112	; 0x70
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	441a      	add	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d904      	bls.n	8000d94 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d96:	08db      	lsrs	r3, r3, #3
 8000d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d9c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000d9e:	e054      	b.n	8000e4a <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000da2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000da6:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d201      	bcs.n	8000db4 <mavlink_sha256_update+0x58>
            l = len;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dbc:	4413      	add	r3, r2
 8000dbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000dc0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 f836 	bl	8003e34 <memcpy>
	offset += l;
 8000dc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dcc:	4413      	add	r3, r2
 8000dce:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000dd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dd4:	4413      	add	r3, r2
 8000dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000de2:	2b40      	cmp	r3, #64	; 0x40
 8000de4:	d131      	bne.n	8000e4a <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3328      	adds	r3, #40	; 0x28
 8000dea:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	663b      	str	r3, [r7, #96]	; 0x60
 8000df0:	e020      	b.n	8000e34 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000df8:	4413      	add	r3, r2
 8000dfa:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000dfc:	f107 0210 	add.w	r2, r7, #16
 8000e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e0a:	78da      	ldrb	r2, [r3, #3]
 8000e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e0e:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e12:	3301      	adds	r3, #1
 8000e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e16:	7892      	ldrb	r2, [r2, #2]
 8000e18:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e20:	7852      	ldrb	r2, [r2, #1]
 8000e22:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e26:	3303      	adds	r3, #3
 8000e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e30:	3301      	adds	r3, #1
 8000e32:	663b      	str	r3, [r7, #96]	; 0x60
 8000e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	dddb      	ble.n	8000df2 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe13 	bl	8000a6c <mavlink_sha256_calc>
	    offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1a7      	bne.n	8000da0 <mavlink_sha256_update+0x44>
	}
    }
}
 8000e50:	bf00      	nop
 8000e52:	3770      	adds	r7, #112	; 0x70
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b098      	sub	sp, #96	; 0x60
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e70:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e78:	3301      	adds	r3, #1
 8000e7a:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3308      	adds	r3, #8
 8000e80:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	2247      	movs	r2, #71	; 0x47
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 ffda 	bl	8003e4a <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ea4:	440b      	add	r3, r1
 8000ea6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	0a1a      	lsrs	r2, r3, #8
 8000eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb2:	3306      	adds	r3, #6
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000eba:	440b      	add	r3, r1
 8000ebc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0c1a      	lsrs	r2, r3, #16
 8000ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ec8:	3305      	adds	r3, #5
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ed0:	440b      	add	r3, r1
 8000ed2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0e1a      	lsrs	r2, r3, #24
 8000edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ede:	3304      	adds	r3, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ef2:	3303      	adds	r3, #3
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000efa:	440b      	add	r3, r1
 8000efc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	0a1a      	lsrs	r2, r3, #8
 8000f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f08:	3302      	adds	r3, #2
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f10:	440b      	add	r3, r1
 8000f12:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	0c1a      	lsrs	r2, r3, #16
 8000f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f26:	440b      	add	r3, r1
 8000f28:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	0e1b      	lsrs	r3, r3, #24
 8000f32:	b2d9      	uxtb	r1, r3
 8000f34:	f107 020c 	add.w	r2, r7, #12
 8000f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f3a:	4413      	add	r3, r2
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f42:	f103 0208 	add.w	r2, r3, #8
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff05 	bl	8000d5c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f54:	78da      	ldrb	r2, [r3, #3]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f60:	7892      	ldrb	r2, [r2, #2]
 8000f62:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3302      	adds	r3, #2
 8000f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f6a:	7852      	ldrb	r2, [r2, #1]
 8000f6c:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3303      	adds	r3, #3
 8000f72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f7e:	79d2      	ldrb	r2, [r2, #7]
 8000f80:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3305      	adds	r3, #5
 8000f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f88:	7992      	ldrb	r2, [r2, #6]
 8000f8a:	701a      	strb	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	3760      	adds	r7, #96	; 0x60
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000f9e:	79fa      	ldrb	r2, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <mavlink_get_channel_status+0x24>)
 8000faa:	4413      	add	r3, r2
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000fdc 	.word	0x20000fdc

08000fbc <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b0a1      	sub	sp, #132	; 0x84
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <mavlink_sign_packet+0x20>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <mavlink_sign_packet+0x24>
	    return 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e051      	b.n	8001084 <mavlink_sign_packet+0xc8>
	}
	signature[0] = signing->link_id;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	785a      	ldrb	r2, [r3, #1]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f103 0408 	add.w	r4, r3, #8
 8000fee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ff2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f107 0110 	add.w	r1, r7, #16
 8000ffe:	2206      	movs	r2, #6
 8001000:	4618      	mov	r0, r3
 8001002:	f002 ff17 	bl	8003e34 <memcpy>
	signing->timestamp++;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800100c:	1c4b      	adds	r3, r1, #1
 800100e:	f142 0400 	adc.w	r4, r2, #0
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fced 	bl	80009fc <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f103 0110 	add.w	r1, r3, #16
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	2220      	movs	r2, #32
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fe94 	bl	8000d5c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fe8d 	bl	8000d5c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001042:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe84 	bl	8000d5c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	2202      	movs	r2, #2
 800105a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fe7c 	bl	8000d5c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	2207      	movs	r2, #7
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe75 	bl	8000d5c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1dda      	adds	r2, r3, #7
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff feeb 	bl	8000e58 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001082:	230d      	movs	r3, #13
}
 8001084:	4618      	mov	r0, r3
 8001086:	3784      	adds	r7, #132	; 0x84
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}

0800108c <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001098:	e002      	b.n	80010a0 <_mav_trim_payload+0x14>
		length--;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	3b01      	subs	r3, #1
 800109e:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d906      	bls.n	80010b4 <_mav_trim_payload+0x28>
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f2      	beq.n	800109a <_mav_trim_payload+0xe>
	}
	return length;
 80010b4:	78fb      	ldrb	r3, [r7, #3]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b08f      	sub	sp, #60	; 0x3c
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	72fb      	strb	r3, [r7, #11]
 80010ce:	4613      	mov	r3, r2
 80010d0:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7b1b      	ldrb	r3, [r3, #12]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf14      	ite	ne
 80010de:	2301      	movne	r3, #1
 80010e0:	2300      	moveq	r3, #0
 80010e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80010e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ea:	f083 0301 	eor.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00c      	beq.n	800110e <mavlink_finalize_message_buffer+0x4e>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <mavlink_finalize_message_buffer+0x4e>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <mavlink_finalize_message_buffer+0x4e>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <mavlink_finalize_message_buffer+0x50>
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001114:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001120:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <mavlink_finalize_message_buffer+0x6c>
 8001128:	230d      	movs	r3, #13
 800112a:	e000      	b.n	800112e <mavlink_finalize_message_buffer+0x6e>
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001132:	230a      	movs	r3, #10
 8001134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	22fe      	movs	r2, #254	; 0xfe
 8001144:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001146:	2306      	movs	r3, #6
 8001148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800114c:	e002      	b.n	8001154 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	22fd      	movs	r2, #253	; 0xfd
 8001152:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10a      	bne.n	8001172 <mavlink_finalize_message_buffer+0xb2>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	330c      	adds	r3, #12
 8001160:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff90 	bl	800108c <_mav_trim_payload>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	e001      	b.n	8001176 <mavlink_finalize_message_buffer+0xb6>
 8001172:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	7afa      	ldrb	r2, [r7, #11]
 800117e:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	7aba      	ldrb	r2, [r7, #10]
 8001184:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	711a      	strb	r2, [r3, #4]
	if (signing) {
 800118c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	799a      	ldrb	r2, [r3, #6]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	799b      	ldrb	r3, [r3, #6]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	78db      	ldrb	r3, [r3, #3]
 80011c6:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80011c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	799b      	ldrb	r3, [r3, #6]
 80011d4:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	79db      	ldrb	r3, [r3, #7]
 80011da:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	7a1b      	ldrb	r3, [r3, #8]
 80011e0:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	7a5a      	ldrb	r2, [r3, #9]
 80011e6:	7a99      	ldrb	r1, [r3, #10]
 80011e8:	0209      	lsls	r1, r1, #8
 80011ea:	430a      	orrs	r2, r1
 80011ec:	7adb      	ldrb	r3, [r3, #11]
 80011ee:	041b      	lsls	r3, r3, #16
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	777b      	strb	r3, [r7, #29]
 80011f6:	e030      	b.n	800125a <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	799b      	ldrb	r3, [r3, #6]
 8001208:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	79db      	ldrb	r3, [r3, #7]
 800120e:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	7a1b      	ldrb	r3, [r3, #8]
 8001214:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	7a5a      	ldrb	r2, [r3, #9]
 800121a:	7a99      	ldrb	r1, [r3, #10]
 800121c:	0209      	lsls	r1, r1, #8
 800121e:	430a      	orrs	r2, r1
 8001220:	7adb      	ldrb	r3, [r3, #11]
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	4313      	orrs	r3, r2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	7a5a      	ldrb	r2, [r3, #9]
 800122e:	7a99      	ldrb	r1, [r3, #10]
 8001230:	0209      	lsls	r1, r1, #8
 8001232:	430a      	orrs	r2, r1
 8001234:	7adb      	ldrb	r3, [r3, #11]
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	4313      	orrs	r3, r2
 800123a:	121b      	asrs	r3, r3, #8
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	7a5a      	ldrb	r2, [r3, #9]
 8001246:	7a99      	ldrb	r1, [r3, #10]
 8001248:	0209      	lsls	r1, r1, #8
 800124a:	430a      	orrs	r2, r1
 800124c:	7adb      	ldrb	r3, [r3, #11]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	4313      	orrs	r3, r2
 8001252:	141b      	asrs	r3, r3, #16
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 800125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b29a      	uxth	r2, r3
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	3301      	adds	r3, #1
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb89 	bl	8000984 <crc_calculate>
 8001272:	4603      	mov	r3, r0
 8001274:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f103 010c 	add.w	r1, r3, #12
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	b29a      	uxth	r2, r3
 8001282:	f107 0316 	add.w	r3, r7, #22
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb9c 	bl	80009c4 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 800128c:	f107 0216 	add.w	r2, r7, #22
 8001290:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fb36 	bl	8000908 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800129c:	8af9      	ldrh	r1, [r7, #22]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	330c      	adds	r3, #12
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	78d2      	ldrb	r2, [r2, #3]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2ca      	uxtb	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80012ac:	8afb      	ldrh	r3, [r7, #22]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b299      	uxth	r1, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f103 020c 	add.w	r2, r3, #12
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	3301      	adds	r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	b2ca      	uxtb	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 80012c4:	8afa      	ldrh	r2, [r7, #22]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	801a      	strh	r2, [r3, #0]

	if (signing) {
 80012ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01a      	beq.n	8001308 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80012e4:	68f9      	ldr	r1, [r7, #12]
 80012e6:	310c      	adds	r1, #12
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80012ec:	4401      	add	r1, r0
 80012ee:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80012f2:	f107 0018 	add.w	r0, r7, #24
 80012f6:	9102      	str	r1, [sp, #8]
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4633      	mov	r3, r6
 80012fe:	4602      	mov	r2, r0
 8001300:	4629      	mov	r1, r5
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff fe5a 	bl	8000fbc <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	b29a      	uxth	r2, r3
 800130e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b29a      	uxth	r2, r3
 8001318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800131c:	b29b      	uxth	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b29b      	uxth	r3, r3
 8001322:	3302      	adds	r3, #2
 8001324:	b29b      	uxth	r3, r3
}
 8001326:	4618      	mov	r0, r3
 8001328:	372c      	adds	r7, #44	; 0x2c
 800132a:	46bd      	mov	sp, r7
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800132e <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b088      	sub	sp, #32
 8001332:	af04      	add	r7, sp, #16
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	4608      	mov	r0, r1
 8001338:	4611      	mov	r1, r2
 800133a:	461a      	mov	r2, r3
 800133c:	4603      	mov	r3, r0
 800133e:	70fb      	strb	r3, [r7, #3]
 8001340:	460b      	mov	r3, r1
 8001342:	70bb      	strb	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fe22 	bl	8000f94 <mavlink_get_channel_status>
 8001350:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001352:	78ba      	ldrb	r2, [r7, #2]
 8001354:	78f9      	ldrb	r1, [r7, #3]
 8001356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	7f3b      	ldrb	r3, [r7, #28]
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	7e3b      	ldrb	r3, [r7, #24]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff feaa 	bl	80010c0 <mavlink_finalize_message_buffer>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af04      	add	r7, sp, #16
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	4608      	mov	r0, r1
 8001380:	4611      	mov	r1, r2
 8001382:	461a      	mov	r2, r3
 8001384:	4603      	mov	r3, r0
 8001386:	70fb      	strb	r3, [r7, #3]
 8001388:	460b      	mov	r3, r1
 800138a:	70bb      	strb	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001390:	78ba      	ldrb	r2, [r7, #2]
 8001392:	78f9      	ldrb	r1, [r7, #3]
 8001394:	7d3b      	ldrb	r3, [r7, #20]
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	7c3b      	ldrb	r3, [r7, #16]
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffc3 	bl	800132e <mavlink_finalize_message_chan>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	78db      	ldrb	r3, [r3, #3]
 80013c0:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	789b      	ldrb	r3, [r3, #2]
 80013c6:	2bfe      	cmp	r3, #254	; 0xfe
 80013c8:	d13a      	bne.n	8001440 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80013ce:	2305      	movs	r3, #5
 80013d0:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	789a      	ldrb	r2, [r3, #2]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3302      	adds	r3, #2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	7992      	ldrb	r2, [r2, #6]
 80013ea:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3303      	adds	r3, #3
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	79d2      	ldrb	r2, [r2, #7]
 80013f4:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	7a12      	ldrb	r2, [r2, #8]
 80013fe:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	7a5a      	ldrb	r2, [r3, #9]
 8001404:	7a99      	ldrb	r1, [r3, #10]
 8001406:	0209      	lsls	r1, r1, #8
 8001408:	430a      	orrs	r2, r1
 800140a:	7adb      	ldrb	r3, [r3, #11]
 800140c:	041b      	lsls	r3, r3, #16
 800140e:	4313      	orrs	r3, r2
 8001410:	461a      	mov	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3305      	adds	r3, #5
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1d98      	adds	r0, r3, #6
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f103 010c 	add.w	r1, r3, #12
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	461a      	mov	r2, r3
 800142a:	f002 fd03 	bl	8003e34 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800142e:	7dbb      	ldrb	r3, [r7, #22]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	78d2      	ldrb	r2, [r2, #3]
 8001434:	4413      	add	r3, r2
 8001436:	3301      	adds	r3, #1
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	e06c      	b.n	800151a <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	330c      	adds	r3, #12
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe1f 	bl	800108c <_mav_trim_payload>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001452:	2309      	movs	r3, #9
 8001454:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	789a      	ldrb	r2, [r3, #2]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3301      	adds	r3, #1
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3302      	adds	r3, #2
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	7912      	ldrb	r2, [r2, #4]
 800146e:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3303      	adds	r3, #3
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	7952      	ldrb	r2, [r2, #5]
 8001478:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3304      	adds	r3, #4
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	7992      	ldrb	r2, [r2, #6]
 8001482:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3305      	adds	r3, #5
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	79d2      	ldrb	r2, [r2, #7]
 800148c:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3306      	adds	r3, #6
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	7a12      	ldrb	r2, [r2, #8]
 8001496:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	7a5a      	ldrb	r2, [r3, #9]
 800149c:	7a99      	ldrb	r1, [r3, #10]
 800149e:	0209      	lsls	r1, r1, #8
 80014a0:	430a      	orrs	r2, r1
 80014a2:	7adb      	ldrb	r3, [r3, #11]
 80014a4:	041b      	lsls	r3, r3, #16
 80014a6:	4313      	orrs	r3, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3307      	adds	r3, #7
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	7a5a      	ldrb	r2, [r3, #9]
 80014b6:	7a99      	ldrb	r1, [r3, #10]
 80014b8:	0209      	lsls	r1, r1, #8
 80014ba:	430a      	orrs	r2, r1
 80014bc:	7adb      	ldrb	r3, [r3, #11]
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	4313      	orrs	r3, r2
 80014c2:	121a      	asrs	r2, r3, #8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3308      	adds	r3, #8
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7a5a      	ldrb	r2, [r3, #9]
 80014d0:	7a99      	ldrb	r1, [r3, #10]
 80014d2:	0209      	lsls	r1, r1, #8
 80014d4:	430a      	orrs	r2, r1
 80014d6:	7adb      	ldrb	r3, [r3, #11]
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	4313      	orrs	r3, r2
 80014dc:	141a      	asrs	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3309      	adds	r3, #9
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f103 000a 	add.w	r0, r3, #10
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	330c      	adds	r3, #12
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	4619      	mov	r1, r3
 80014f4:	f002 fc9e 	bl	8003e34 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80014f8:	7dba      	ldrb	r2, [r7, #22]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	4413      	add	r3, r2
 80014fe:	3301      	adds	r3, #1
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <mavlink_msg_to_send_buffer+0x164>
 8001512:	230d      	movs	r3, #13
 8001514:	e000      	b.n	8001518 <mavlink_msg_to_send_buffer+0x166>
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	b2da      	uxtb	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	b29a      	uxth	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	3301      	adds	r3, #1
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1c98      	adds	r0, r3, #2
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001548:	7dfa      	ldrb	r2, [r7, #23]
 800154a:	4619      	mov	r1, r3
 800154c:	f002 fc72 	bl	8003e34 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	b29a      	uxth	r2, r3
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4413      	add	r3, r2
 800155a:	b29a      	uxth	r2, r3
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	3303      	adds	r3, #3
 8001566:	b29b      	uxth	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	2100      	movs	r1, #0
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f002 fc5f 	bl	8003e4a <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 800158c:	e004      	b.n	8001598 <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f002 fc4e 	bl	8003e34 <memcpy>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <mavlink_msg_file_transfer_protocol_pack>:
 * @param payload  Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_file_transfer_protocol_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b0c5      	sub	sp, #276	; 0x114
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	4639      	mov	r1, r7
 80015ac:	600a      	str	r2, [r1, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	4622      	mov	r2, r4
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	1dbb      	adds	r3, r7, #6
 80015b8:	4602      	mov	r2, r0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	1d7b      	adds	r3, r7, #5
 80015be:	460a      	mov	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
    _mav_put_uint8_t(buf, 2, target_component);
    _mav_put_uint8_t_array(buf, 3, payload, 251);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN);
#else
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	1d7a      	adds	r2, r7, #5
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	701a      	strb	r2, [r3, #0]
    packet.target_system = target_system;
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 80015d4:	705a      	strb	r2, [r3, #1]
    packet.target_component = target_component;
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 80015de:	709a      	strb	r2, [r3, #2]
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	3303      	adds	r3, #3
 80015e6:	22fb      	movs	r2, #251	; 0xfb
 80015e8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ffbf 	bl	8001570 <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN);
 80015f2:	463b      	mov	r3, r7
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	330c      	adds	r3, #12
 80015f8:	f107 0108 	add.w	r1, r7, #8
 80015fc:	22fe      	movs	r2, #254	; 0xfe
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fc18 	bl	8003e34 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL;
 8001604:	463b      	mov	r3, r7
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800160e:	725a      	strb	r2, [r3, #9]
 8001610:	2200      	movs	r2, #0
 8001612:	729a      	strb	r2, [r3, #10]
 8001614:	2200      	movs	r2, #0
 8001616:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_MIN_LEN, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN, MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_CRC);
 8001618:	1dbb      	adds	r3, r7, #6
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	7819      	ldrb	r1, [r3, #0]
 8001620:	4638      	mov	r0, r7
 8001622:	2354      	movs	r3, #84	; 0x54
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	23fe      	movs	r3, #254	; 0xfe
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	23fe      	movs	r3, #254	; 0xfe
 800162c:	6800      	ldr	r0, [r0, #0]
 800162e:	f7ff fea2 	bl	8001376 <mavlink_finalize_message>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}

0800163e <mavlink_msg_file_transfer_protocol_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param file_transfer_protocol C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_file_transfer_protocol_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
 800163e:	b5b0      	push	{r4, r5, r7, lr}
 8001640:	b088      	sub	sp, #32
 8001642:	af04      	add	r7, sp, #16
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	460b      	mov	r3, r1
 800164e:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_file_transfer_protocol_pack(system_id, component_id, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781d      	ldrb	r5, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	7892      	ldrb	r2, [r2, #2]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	3103      	adds	r1, #3
 8001660:	7bbc      	ldrb	r4, [r7, #14]
 8001662:	7bf8      	ldrb	r0, [r7, #15]
 8001664:	9102      	str	r1, [sp, #8]
 8001666:	9201      	str	r2, [sp, #4]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	462b      	mov	r3, r5
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	4621      	mov	r1, r4
 8001670:	f7ff ff96 	bl	80015a0 <mavlink_msg_file_transfer_protocol_pack>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bdb0      	pop	{r4, r5, r7, pc}

0800167e <mavlink_msg_named_value_int_pack>:
 * @param value  Signed integer value
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, int32_t value)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b08c      	sub	sp, #48	; 0x30
 8001682:	af02      	add	r7, sp, #8
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	4603      	mov	r3, r0
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	460b      	mov	r3, r1
 800168e:	73bb      	strb	r3, [r7, #14]
    _mav_put_int32_t(buf, 4, value);
    _mav_put_char_array(buf, 8, name, 10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#else
    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	617b      	str	r3, [r7, #20]
    packet.value = value;
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	61bb      	str	r3, [r7, #24]
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	3308      	adds	r3, #8
 800169e:	220a      	movs	r2, #10
 80016a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff64 	bl	8001570 <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	330c      	adds	r3, #12
 80016ac:	f107 0114 	add.w	r1, r7, #20
 80016b0:	2212      	movs	r2, #18
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fbbe 	bl	8003e34 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_NAMED_VALUE_INT;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f062 0203 	orn	r2, r2, #3
 80016c0:	725a      	strb	r2, [r3, #9]
 80016c2:	2200      	movs	r2, #0
 80016c4:	729a      	strb	r2, [r3, #10]
 80016c6:	2200      	movs	r2, #0
 80016c8:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_NAMED_VALUE_INT_MIN_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
 80016ca:	7bba      	ldrb	r2, [r7, #14]
 80016cc:	7bf9      	ldrb	r1, [r7, #15]
 80016ce:	232c      	movs	r3, #44	; 0x2c
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2312      	movs	r3, #18
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2312      	movs	r3, #18
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	f7ff fe4c 	bl	8001376 <mavlink_finalize_message>
 80016de:	4603      	mov	r3, r0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <mavlink_msg_named_value_int_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param named_value_int C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	460b      	mov	r3, r1
 80016f8:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681c      	ldr	r4, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3308      	adds	r3, #8
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6852      	ldr	r2, [r2, #4]
 8001706:	7bb9      	ldrb	r1, [r7, #14]
 8001708:	7bf8      	ldrb	r0, [r7, #15]
 800170a:	9201      	str	r2, [sp, #4]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	4623      	mov	r3, r4
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	f7ff ffb4 	bl	800167e <mavlink_msg_named_value_int_pack>
 8001716:	4603      	mov	r3, r0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}

08001720 <MAV_Send_Msg_Named_Value_Int>:
	     }//end if
	}//end for
}

void MAV_Send_Msg_Named_Value_Int(char message[], uint32_t value)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b08b      	sub	sp, #44	; 0x2c
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	466b      	mov	r3, sp
 800172c:	461e      	mov	r6, r3
	//create buffer of static proper length (static for this mavlink message)
	int PACKET_STATIC_SIZE = 30; //used to determine buffer size, and reduce bad 00's being sent
 800172e:	231e      	movs	r3, #30
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
	char buffer[PACKET_STATIC_SIZE];
 8001732:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001734:	1e6b      	subs	r3, r5, #1
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	462b      	mov	r3, r5
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	f04f 0400 	mov.w	r4, #0
 8001748:	00d4      	lsls	r4, r2, #3
 800174a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800174e:	00cb      	lsls	r3, r1, #3
 8001750:	462b      	mov	r3, r5
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	00d4      	lsls	r4, r2, #3
 8001762:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001766:	00cb      	lsls	r3, r1, #3
 8001768:	462b      	mov	r3, r5
 800176a:	3307      	adds	r3, #7
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	ebad 0d03 	sub.w	sp, sp, r3
 8001774:	466b      	mov	r3, sp
 8001776:	3300      	adds	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]

	//create struct and fill in data
	mavlink_named_value_int_t msgStruct;
	strcpy(msgStruct.name,message);
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	3308      	adds	r3, #8
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fb69 	bl	8003e5a <strcpy>
	msgStruct.time_boot_ms = 4;
 8001788:	2304      	movs	r3, #4
 800178a:	60bb      	str	r3, [r7, #8]
	msgStruct.value = value;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	60fb      	str	r3, [r7, #12]
	//encode and serialize
	mavlink_msg_named_value_int_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MAV_Send_Msg_Named_Value_Int+0xa4>)
 8001792:	7818      	ldrb	r0, [r3, #0]
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MAV_Send_Msg_Named_Value_Int+0xa8>)
 8001796:	7819      	ldrb	r1, [r3, #0]
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <MAV_Send_Msg_Named_Value_Int+0xac>)
 800179e:	f7ff ffa3 	bl	80016e8 <mavlink_msg_named_value_int_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4909      	ldr	r1, [pc, #36]	; (80017cc <MAV_Send_Msg_Named_Value_Int+0xac>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fe03 	bl	80013b2 <mavlink_msg_to_send_buffer>
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	b2aa      	uxth	r2, r5
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f8be 	bl	8001934 <Radio_Transmit_Raw>
 80017b8:	46b5      	mov	sp, r6
}
 80017ba:	bf00      	nop
 80017bc:	372c      	adds	r7, #44	; 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	2000000d 	.word	0x2000000d
 80017cc:	20001118 	.word	0x20001118

080017d0 <MAV_send_File_Transfer_Protocol>:

void MAV_send_File_Transfer_Protocol(uint8_t payload[], uint8_t payload_len)
{   //sends network id, target system, target component, and payload
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	6018      	str	r0, [r3, #0]
 80017dc:	460a      	mov	r2, r1
 80017de:	1cfb      	adds	r3, r7, #3
 80017e0:	701a      	strb	r2, [r3, #0]
    //**NOTE: uses payload within payload, see FTP protocol

	//define variables not used (add as arguments for increased functionality)
	uint8_t network_id = 0;//for broadcast
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	uint8_t target_system = 0;//for broadcast
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	uint8_t target_component = 0;//for broadcast
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
	uint8_t payload_new[251] = {0};//copy payload to new array for fixed size of 251
 80017f4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80017f8:	4618      	mov	r0, r3
 80017fa:	23fb      	movs	r3, #251	; 0xfb
 80017fc:	461a      	mov	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f002 fb23 	bl	8003e4a <memset>
	payload_new[0] = payload_len; //encode first byte as amount of space used in payload
 8001804:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001808:	1cfa      	adds	r2, r7, #3
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	701a      	strb	r2, [r3, #0]

	for (uint8_t i=1;i<251;i++)
 800180e:	2301      	movs	r3, #1
 8001810:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8001814:	e01e      	b.n	8001854 <MAV_send_File_Transfer_Protocol+0x84>
	{	if(i <payload_len+1)
 8001816:	f897 2215 	ldrb.w	r2, [r7, #533]	; 0x215
 800181a:	1cfb      	adds	r3, r7, #3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	429a      	cmp	r2, r3
 8001822:	da0c      	bge.n	800183e <MAV_send_File_Transfer_Protocol+0x6e>
		{
			//Radio_Transmit_Raw(&payload[i-1], 1);
			//HAL_Delay(500);
			payload_new[i] = payload[i-1];
 8001824:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001828:	3b01      	subs	r3, #1
 800182a:	1d3a      	adds	r2, r7, #4
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	441a      	add	r2, r3
 8001830:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001834:	7811      	ldrb	r1, [r2, #0]
 8001836:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800183a:	54d1      	strb	r1, [r2, r3]
 800183c:	e005      	b.n	800184a <MAV_send_File_Transfer_Protocol+0x7a>
		}
		else
		{
			payload_new[i] = 0xFF;//fill dead space
 800183e:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001842:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001846:	21ff      	movs	r1, #255	; 0xff
 8001848:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=1;i<251;i++)
 800184a:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 800184e:	3301      	adds	r3, #1
 8001850:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8001854:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001858:	2bfa      	cmp	r3, #250	; 0xfa
 800185a:	d9dc      	bls.n	8001816 <MAV_send_File_Transfer_Protocol+0x46>
		}
	}
	//Radio_Transmit_Raw(&payload_new,payload_len+1 );
	HAL_Delay(500);
 800185c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001860:	f000 fa72 	bl	8001d48 <HAL_Delay>
	//strcpy(payload_new,payload);

	//create buffer of proper length
	//int PACKET_STATIC_SIZE = 10 + 3 + payload_len + 2; //mavlink[FTP header + payload]mavlink
	int PACKET_STATIC_SIZE = 10 + 3 + 251 + 2; //mavlink[FTP header + payload]mavlink
 8001864:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001868:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	uint8_t buffer[PACKET_STATIC_SIZE];
 800186c:	f8d7 5210 	ldr.w	r5, [r7, #528]	; 0x210
 8001870:	466b      	mov	r3, sp
 8001872:	461e      	mov	r6, r3
 8001874:	1e6b      	subs	r3, r5, #1
 8001876:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800187a:	462b      	mov	r3, r5
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	f04f 0400 	mov.w	r4, #0
 800188a:	00d4      	lsls	r4, r2, #3
 800188c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001890:	00cb      	lsls	r3, r1, #3
 8001892:	462b      	mov	r3, r5
 8001894:	4619      	mov	r1, r3
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	00d4      	lsls	r4, r2, #3
 80018a4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80018a8:	00cb      	lsls	r3, r1, #3
 80018aa:	462b      	mov	r3, r5
 80018ac:	3307      	adds	r3, #7
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	ebad 0d03 	sub.w	sp, sp, r3
 80018b6:	466b      	mov	r3, sp
 80018b8:	3300      	adds	r3, #0
 80018ba:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	//create struct and fill in data
	mavlink_file_transfer_protocol_t msgStruct;
	msgStruct.target_network = network_id;
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	f897 2216 	ldrb.w	r2, [r7, #534]	; 0x216
 80018c6:	701a      	strb	r2, [r3, #0]
	msgStruct.target_system = target_system;
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 80018d0:	705a      	strb	r2, [r3, #1]
	msgStruct.target_component = target_component;
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	f897 2214 	ldrb.w	r2, [r7, #532]	; 0x214
 80018da:	709a      	strb	r2, [r3, #2]
	memcpy(msgStruct.payload,payload_new, sizeof(payload_new));
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80018e4:	3303      	adds	r3, #3
 80018e6:	4611      	mov	r1, r2
 80018e8:	22fb      	movs	r2, #251	; 0xfb
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 faa2 	bl	8003e34 <memcpy>

	//encode and serialize
	mavlink_msg_file_transfer_protocol_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <MAV_send_File_Transfer_Protocol+0x158>)
 80018f2:	7818      	ldrb	r0, [r3, #0]
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <MAV_send_File_Transfer_Protocol+0x15c>)
 80018f6:	7819      	ldrb	r1, [r3, #0]
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <MAV_send_File_Transfer_Protocol+0x160>)
 80018fe:	f7ff fe9e 	bl	800163e <mavlink_msg_file_transfer_protocol_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 8001902:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001906:	490a      	ldr	r1, [pc, #40]	; (8001930 <MAV_send_File_Transfer_Protocol+0x160>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd52 	bl	80013b2 <mavlink_msg_to_send_buffer>

	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 800190e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001912:	b2aa      	uxth	r2, r5
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f80c 	bl	8001934 <Radio_Transmit_Raw>
 800191c:	46b5      	mov	sp, r6

}
 800191e:	bf00      	nop
 8001920:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001924:	46bd      	mov	sp, r7
 8001926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001928:	2000000c 	.word	0x2000000c
 800192c:	2000000d 	.word	0x2000000d
 8001930:	20001118 	.word	0x20001118

08001934 <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 8001940:	887a      	ldrh	r2, [r7, #2]
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <Radio_Transmit_Raw+0x24>)
 800194a:	f002 f892 	bl	8003a72 <HAL_UART_Transmit>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200010d8 	.word	0x200010d8

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_MspInit+0x5c>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_MspInit+0x5c>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6193      	str	r3, [r2, #24]
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_MspInit+0x5c>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_MspInit+0x5c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_MspInit+0x60>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_MspInit+0x60>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <HAL_I2C_MspInit+0x74>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d124      	bne.n	8001a2a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_I2C_MspInit+0x78>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_I2C_MspInit+0x78>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_I2C_MspInit+0x78>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fe:	2312      	movs	r3, #18
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <HAL_I2C_MspInit+0x7c>)
 8001a0e:	f000 faa1 	bl	8001f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_I2C_MspInit+0x78>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_I2C_MspInit+0x78>)
 8001a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_I2C_MspInit+0x78>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40005800 	.word	0x40005800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010c00 	.word	0x40010c00

08001a40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_TIM_PWM_MspInit+0x34>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10b      	bne.n	8001a6a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_TIM_PWM_MspInit+0x38>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_TIM_PWM_MspInit+0x38>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_TIM_PWM_MspInit+0x38>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40000800 	.word	0x40000800
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_TIM_MspPostInit+0x5c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d118      	bne.n	8001ace <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_TIM_MspPostInit+0x60>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_TIM_MspPostInit+0x60>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_TIM_MspPostInit+0x60>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ab4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_TIM_MspPostInit+0x64>)
 8001aca:	f000 fa43 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3720      	adds	r7, #32
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40000800 	.word	0x40000800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010c00 	.word	0x40010c00

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d131      	bne.n	8001b68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <HAL_UART_MspInit+0x94>)
 8001b4a:	f000 fa03 	bl	8001f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_UART_MspInit+0x94>)
 8001b64:	f000 f9f6 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010800 	.word	0x40010800

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <HardFault_Handler+0x4>

08001b8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <MemManage_Handler+0x4>

08001b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <BusFault_Handler+0x4>

08001b9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <UsageFault_Handler+0x4>

08001ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f8a2 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <SystemInit+0x5c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <SystemInit+0x5c>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <SystemInit+0x5c>)
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4911      	ldr	r1, [pc, #68]	; (8001c2c <SystemInit+0x5c>)
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <SystemInit+0x60>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <SystemInit+0x5c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <SystemInit+0x5c>)
 8001bf2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <SystemInit+0x5c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <SystemInit+0x5c>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <SystemInit+0x5c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <SystemInit+0x5c>)
 8001c0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <SystemInit+0x5c>)
 8001c16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SystemInit+0x64>)
 8001c1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c22:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	f8ff0000 	.word	0xf8ff0000
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c3a:	e003      	b.n	8001c44 <LoopCopyDataInit>

08001c3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c42:	3104      	adds	r1, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c4c:	d3f6      	bcc.n	8001c3c <CopyDataInit>
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c50:	e002      	b.n	8001c58 <LoopFillZerobss>

08001c52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c54:	f842 3b04 	str.w	r3, [r2], #4

08001c58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c5c:	d3f9      	bcc.n	8001c52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c5e:	f7ff ffb7 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c62:	f002 f8c3 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c66:	f7fe fce5 	bl	8000634 <main>
  bx lr
 8001c6a:	4770      	bx	lr
  ldr r3, =_sidata
 8001c6c:	08003fdc 	.word	0x08003fdc
  ldr r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c74:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8001c78:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 8001c7c:	200014a0 	.word	0x200014a0

08001c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC1_2_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_Init+0x28>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_Init+0x28>)
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 f929 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 f808 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca0:	f7ff fe5c 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40022000 	.word	0x40022000

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x54>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x58>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f933 	bl	8001f3a <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 f909 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x5c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000010 	.word	0x20000010
 8001d08:	20000018 	.word	0x20000018
 8001d0c:	20000014 	.word	0x20000014

08001d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_IncTick+0x1c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_IncTick+0x20>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <HAL_IncTick+0x20>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000018 	.word	0x20000018
 8001d30:	2000149c 	.word	0x2000149c

08001d34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <HAL_GetTick+0x10>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	2000149c 	.word	0x2000149c

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff fff0 	bl	8001d34 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_Delay+0x40>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffe0 	bl	8001d34 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000018 	.word	0x20000018

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff90 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff49 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff5e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff90 	bl	8001e44 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffb0 	bl	8001ea8 <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	; 0x2c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f66:	e127      	b.n	80021b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8116 	bne.w	80021b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d034      	beq.n	8001ff8 <HAL_GPIO_Init+0xa4>
 8001f8e:	2b12      	cmp	r3, #18
 8001f90:	d80d      	bhi.n	8001fae <HAL_GPIO_Init+0x5a>
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d02b      	beq.n	8001fee <HAL_GPIO_Init+0x9a>
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d804      	bhi.n	8001fa4 <HAL_GPIO_Init+0x50>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d031      	beq.n	8002002 <HAL_GPIO_Init+0xae>
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d01c      	beq.n	8001fdc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fa2:	e048      	b.n	8002036 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d043      	beq.n	8002030 <HAL_GPIO_Init+0xdc>
 8001fa8:	2b11      	cmp	r3, #17
 8001faa:	d01b      	beq.n	8001fe4 <HAL_GPIO_Init+0x90>
          break;
 8001fac:	e043      	b.n	8002036 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fae:	4a89      	ldr	r2, [pc, #548]	; (80021d4 <HAL_GPIO_Init+0x280>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d026      	beq.n	8002002 <HAL_GPIO_Init+0xae>
 8001fb4:	4a87      	ldr	r2, [pc, #540]	; (80021d4 <HAL_GPIO_Init+0x280>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d806      	bhi.n	8001fc8 <HAL_GPIO_Init+0x74>
 8001fba:	4a87      	ldr	r2, [pc, #540]	; (80021d8 <HAL_GPIO_Init+0x284>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d020      	beq.n	8002002 <HAL_GPIO_Init+0xae>
 8001fc0:	4a86      	ldr	r2, [pc, #536]	; (80021dc <HAL_GPIO_Init+0x288>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01d      	beq.n	8002002 <HAL_GPIO_Init+0xae>
          break;
 8001fc6:	e036      	b.n	8002036 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fc8:	4a85      	ldr	r2, [pc, #532]	; (80021e0 <HAL_GPIO_Init+0x28c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0xae>
 8001fce:	4a85      	ldr	r2, [pc, #532]	; (80021e4 <HAL_GPIO_Init+0x290>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d016      	beq.n	8002002 <HAL_GPIO_Init+0xae>
 8001fd4:	4a84      	ldr	r2, [pc, #528]	; (80021e8 <HAL_GPIO_Init+0x294>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0xae>
          break;
 8001fda:	e02c      	b.n	8002036 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e028      	b.n	8002036 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e023      	b.n	8002036 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e01e      	b.n	8002036 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e019      	b.n	8002036 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200a:	2304      	movs	r3, #4
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e012      	b.n	8002036 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	611a      	str	r2, [r3, #16]
          break;
 8002022:	e008      	b.n	8002036 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	615a      	str	r2, [r3, #20]
          break;
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2bff      	cmp	r3, #255	; 0xff
 800203a:	d801      	bhi.n	8002040 <HAL_GPIO_Init+0xec>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	e001      	b.n	8002044 <HAL_GPIO_Init+0xf0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2bff      	cmp	r3, #255	; 0xff
 800204a:	d802      	bhi.n	8002052 <HAL_GPIO_Init+0xfe>
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x104>
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	3b08      	subs	r3, #8
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	210f      	movs	r1, #15
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	401a      	ands	r2, r3
 800206a:	6a39      	ldr	r1, [r7, #32]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8096 	beq.w	80021b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_GPIO_Init+0x298>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_GPIO_Init+0x298>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6193      	str	r3, [r2, #24]
 8002092:	4b56      	ldr	r3, [pc, #344]	; (80021ec <HAL_GPIO_Init+0x298>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209e:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <HAL_GPIO_Init+0x29c>)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_GPIO_Init+0x2a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x19e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4a      	ldr	r2, [pc, #296]	; (80021f8 <HAL_GPIO_Init+0x2a4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x19a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a49      	ldr	r2, [pc, #292]	; (80021fc <HAL_GPIO_Init+0x2a8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x196>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a48      	ldr	r2, [pc, #288]	; (8002200 <HAL_GPIO_Init+0x2ac>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x192>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x1a0>
 80020e6:	2304      	movs	r3, #4
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x1a0>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x1a0>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x1a0>
 80020f2:	2300      	movs	r3, #0
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002104:	493a      	ldr	r1, [pc, #232]	; (80021f0 <HAL_GPIO_Init+0x29c>)
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4938      	ldr	r1, [pc, #224]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
 800212a:	e006      	b.n	800213a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	43db      	mvns	r3, r3
 8002134:	4933      	ldr	r1, [pc, #204]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002136:	4013      	ands	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	492e      	ldr	r1, [pc, #184]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	4929      	ldr	r1, [pc, #164]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 800215e:	4013      	ands	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	4924      	ldr	r1, [pc, #144]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
 800217a:	e006      	b.n	800218a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	43db      	mvns	r3, r3
 8002184:	491f      	ldr	r1, [pc, #124]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002186:	4013      	ands	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	491a      	ldr	r1, [pc, #104]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60cb      	str	r3, [r1, #12]
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4915      	ldr	r1, [pc, #84]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	3301      	adds	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f47f aed0 	bne.w	8001f68 <HAL_GPIO_Init+0x14>
  }
}
 80021c8:	bf00      	nop
 80021ca:	372c      	adds	r7, #44	; 0x2c
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	10210000 	.word	0x10210000
 80021d8:	10110000 	.word	0x10110000
 80021dc:	10120000 	.word	0x10120000
 80021e0:	10310000 	.word	0x10310000
 80021e4:	10320000 	.word	0x10320000
 80021e8:	10220000 	.word	0x10220000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	40010c00 	.word	0x40010c00
 80021fc:	40011000 	.word	0x40011000
 8002200:	40011400 	.word	0x40011400
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e10f      	b.n	800246a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff fbae 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	; 0x24
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800227c:	f001 f864 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8002280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a7b      	ldr	r2, [pc, #492]	; (8002474 <HAL_I2C_Init+0x23c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d807      	bhi.n	800229c <HAL_I2C_Init+0x64>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a7a      	ldr	r2, [pc, #488]	; (8002478 <HAL_I2C_Init+0x240>)
 8002290:	4293      	cmp	r3, r2
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e006      	b.n	80022aa <HAL_I2C_Init+0x72>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a77      	ldr	r2, [pc, #476]	; (800247c <HAL_I2C_Init+0x244>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	bf94      	ite	ls
 80022a4:	2301      	movls	r3, #1
 80022a6:	2300      	movhi	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0db      	b.n	800246a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a72      	ldr	r2, [pc, #456]	; (8002480 <HAL_I2C_Init+0x248>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9b      	lsrs	r3, r3, #18
 80022bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a64      	ldr	r2, [pc, #400]	; (8002474 <HAL_I2C_Init+0x23c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d802      	bhi.n	80022ec <HAL_I2C_Init+0xb4>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3301      	adds	r3, #1
 80022ea:	e009      	b.n	8002300 <HAL_I2C_Init+0xc8>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	4a63      	ldr	r2, [pc, #396]	; (8002484 <HAL_I2C_Init+0x24c>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	3301      	adds	r3, #1
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4956      	ldr	r1, [pc, #344]	; (8002474 <HAL_I2C_Init+0x23c>)
 800231c:	428b      	cmp	r3, r1
 800231e:	d80d      	bhi.n	800233c <HAL_I2C_Init+0x104>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e59      	subs	r1, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fbb1 f3f3 	udiv	r3, r1, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b04      	cmp	r3, #4
 8002336:	bf38      	it	cc
 8002338:	2304      	movcc	r3, #4
 800233a:	e04f      	b.n	80023dc <HAL_I2C_Init+0x1a4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d111      	bne.n	8002368 <HAL_I2C_Init+0x130>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e012      	b.n	800238e <HAL_I2C_Init+0x156>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e58      	subs	r0, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	0099      	lsls	r1, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	fbb0 f3f3 	udiv	r3, r0, r3
 800237e:	3301      	adds	r3, #1
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Init+0x15e>
 8002392:	2301      	movs	r3, #1
 8002394:	e022      	b.n	80023dc <HAL_I2C_Init+0x1a4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10e      	bne.n	80023bc <HAL_I2C_Init+0x184>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e58      	subs	r0, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	440b      	add	r3, r1
 80023ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ba:	e00f      	b.n	80023dc <HAL_I2C_Init+0x1a4>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1e58      	subs	r0, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	0099      	lsls	r1, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	6809      	ldr	r1, [r1, #0]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800240a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6911      	ldr	r1, [r2, #16]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68d2      	ldr	r2, [r2, #12]
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	000186a0 	.word	0x000186a0
 8002478:	001e847f 	.word	0x001e847f
 800247c:	003d08ff 	.word	0x003d08ff
 8002480:	431bde83 	.word	0x431bde83
 8002484:	10624dd3 	.word	0x10624dd3

08002488 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	460b      	mov	r3, r1
 8002496:	817b      	strh	r3, [r7, #10]
 8002498:	4613      	mov	r3, r2
 800249a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff fc4a 	bl	8001d34 <HAL_GetTick>
 80024a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	f040 80e0 	bne.w	8002670 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2319      	movs	r3, #25
 80024b6:	2201      	movs	r2, #1
 80024b8:	4970      	ldr	r1, [pc, #448]	; (800267c <HAL_I2C_Master_Transmit+0x1f4>)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fd5e 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
 80024c8:	e0d3      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_I2C_Master_Transmit+0x50>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e0cc      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ea>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d007      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0201 	orr.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2221      	movs	r2, #33	; 0x21
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2210      	movs	r2, #16
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	893a      	ldrh	r2, [r7, #8]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a50      	ldr	r2, [pc, #320]	; (8002680 <HAL_I2C_Master_Transmit+0x1f8>)
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002540:	8979      	ldrh	r1, [r7, #10]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	6a3a      	ldr	r2, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fbec 	bl	8002d24 <I2C_MasterRequestWrite>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e08d      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800256c:	e066      	b.n	800263c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	6a39      	ldr	r1, [r7, #32]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fdd8 	bl	8003128 <I2C_WaitOnTXEFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2b04      	cmp	r3, #4
 8002584:	d107      	bne.n	8002596 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e06b      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d11b      	bne.n	8002610 <HAL_I2C_Master_Transmit+0x188>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d017      	beq.n	8002610 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	6a39      	ldr	r1, [r7, #32]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fdc8 	bl	80031aa <I2C_WaitOnBTFFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e01a      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d194      	bne.n	800256e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e000      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	00100002 	.word	0x00100002
 8002680:	ffff0000 	.word	0xffff0000

08002684 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	461a      	mov	r2, r3
 8002690:	460b      	mov	r3, r1
 8002692:	817b      	strh	r3, [r7, #10]
 8002694:	4613      	mov	r3, r2
 8002696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff fb4c 	bl	8001d34 <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	f040 8213 	bne.w	8002ad2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	497e      	ldr	r1, [pc, #504]	; (80028b0 <HAL_I2C_Master_Receive+0x22c>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fc60 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	e206      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_I2C_Master_Receive+0x50>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e1ff      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d007      	beq.n	80026fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2222      	movs	r2, #34	; 0x22
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2210      	movs	r2, #16
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	893a      	ldrh	r2, [r7, #8]
 800272a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a5e      	ldr	r2, [pc, #376]	; (80028b4 <HAL_I2C_Master_Receive+0x230>)
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800273c:	8979      	ldrh	r1, [r7, #10]
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fb64 	bl	8002e10 <I2C_MasterRequestRead>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1c0      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d113      	bne.n	8002782 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e194      	b.n	8002aac <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b01      	cmp	r3, #1
 8002788:	d11d      	bne.n	80027c6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002798:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800279a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027c2:	b662      	cpsie	i
 80027c4:	e172      	b.n	8002aac <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d11d      	bne.n	800280a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027de:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002804:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002806:	b662      	cpsie	i
 8002808:	e150      	b.n	8002aac <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002830:	e13c      	b.n	8002aac <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b03      	cmp	r3, #3
 8002838:	f200 80f5 	bhi.w	8002a26 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	2b01      	cmp	r3, #1
 8002842:	d123      	bne.n	800288c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fcef 	bl	800322c <I2C_WaitOnRXNEFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e13d      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288a:	e10f      	b.n	8002aac <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	2b02      	cmp	r3, #2
 8002892:	d150      	bne.n	8002936 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	2200      	movs	r2, #0
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <HAL_I2C_Master_Receive+0x234>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fb6c 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e112      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
 80028ae:	bf00      	nop
 80028b0:	00100002 	.word	0x00100002
 80028b4:	ffff0000 	.word	0xffff0000
 80028b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028bc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028cc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002900:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002934:	e0ba      	b.n	8002aac <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2200      	movs	r2, #0
 800293e:	4967      	ldr	r1, [pc, #412]	; (8002adc <HAL_I2C_Master_Receive+0x458>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fb1b 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0c1      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	2200      	movs	r2, #0
 800299c:	494f      	ldr	r1, [pc, #316]	; (8002adc <HAL_I2C_Master_Receive+0x458>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 faec 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e092      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029bc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029f0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a24:	e042      	b.n	8002aac <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fbfe 	bl	800322c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e04c      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d118      	bne.n	8002aac <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f aebe 	bne.w	8002832 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	00010004 	.word	0x00010004

08002ae0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	460b      	mov	r3, r1
 8002aee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff f920 	bl	8001d34 <HAL_GetTick>
 8002af4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	f040 8105 	bne.w	8002d12 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2319      	movs	r3, #25
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4982      	ldr	r1, [pc, #520]	; (8002d1c <HAL_I2C_IsDeviceReady+0x23c>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fa32 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0f8      	b.n	8002d14 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_I2C_IsDeviceReady+0x50>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e0f1      	b.n	8002d14 <HAL_I2C_IsDeviceReady+0x234>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d007      	beq.n	8002b56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2224      	movs	r2, #36	; 0x24
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a6a      	ldr	r2, [pc, #424]	; (8002d20 <HAL_I2C_IsDeviceReady+0x240>)
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f9f0 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0b6      	b.n	8002d14 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f8bd 	bl	8001d34 <HAL_GetTick>
 8002bba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bea:	e025      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bec:	f7ff f8a2 	bl	8001d34 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d302      	bcc.n	8002c02 <HAL_I2C_IsDeviceReady+0x122>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22a0      	movs	r2, #160	; 0xa0
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2ba0      	cmp	r3, #160	; 0xa0
 8002c42:	d005      	beq.n	8002c50 <HAL_I2C_IsDeviceReady+0x170>
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <HAL_I2C_IsDeviceReady+0x170>
 8002c4a:	7dbb      	ldrb	r3, [r7, #22]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0cd      	beq.n	8002bec <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d129      	bne.n	8002cba <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2319      	movs	r3, #25
 8002c92:	2201      	movs	r2, #1
 8002c94:	4921      	ldr	r1, [pc, #132]	; (8002d1c <HAL_I2C_IsDeviceReady+0x23c>)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f970 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e036      	b.n	8002d14 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e02c      	b.n	8002d14 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	490f      	ldr	r1, [pc, #60]	; (8002d1c <HAL_I2C_IsDeviceReady+0x23c>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f94c 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e012      	b.n	8002d14 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	f4ff af3e 	bcc.w	8002b7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	00100002 	.word	0x00100002
 8002d20:	ffff0000 	.word	0xffff0000

08002d24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d006      	beq.n	8002d4e <I2C_MasterRequestWrite+0x2a>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d003      	beq.n	8002d4e <I2C_MasterRequestWrite+0x2a>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d4c:	d108      	bne.n	8002d60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e00b      	b.n	8002d78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	2b12      	cmp	r3, #18
 8002d66:	d107      	bne.n	8002d78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f8f9 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e035      	b.n	8002e00 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9c:	d108      	bne.n	8002db0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dac:	611a      	str	r2, [r3, #16]
 8002dae:	e01b      	b.n	8002de8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db0:	897b      	ldrh	r3, [r7, #10]
 8002db2:	11db      	asrs	r3, r3, #7
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 0306 	and.w	r3, r3, #6
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f063 030f 	orn	r3, r3, #15
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <I2C_MasterRequestWrite+0xe4>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f92b 	bl	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e010      	b.n	8002e00 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4907      	ldr	r1, [pc, #28]	; (8002e0c <I2C_MasterRequestWrite+0xe8>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f91b 	bl	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	00010008 	.word	0x00010008
 8002e0c:	00010002 	.word	0x00010002

08002e10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d006      	beq.n	8002e4a <I2C_MasterRequestRead+0x3a>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d003      	beq.n	8002e4a <I2C_MasterRequestRead+0x3a>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e48:	d108      	bne.n	8002e5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e00b      	b.n	8002e74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	2b11      	cmp	r3, #17
 8002e62:	d107      	bne.n	8002e74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f87b 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e06d      	b.n	8002f6c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e98:	d108      	bne.n	8002eac <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	e053      	b.n	8002f54 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	11db      	asrs	r3, r3, #7
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0306 	and.w	r3, r3, #6
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f063 030f 	orn	r3, r3, #15
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	492a      	ldr	r1, [pc, #168]	; (8002f74 <I2C_MasterRequestRead+0x164>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8ad 	bl	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e048      	b.n	8002f6c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4923      	ldr	r1, [pc, #140]	; (8002f78 <I2C_MasterRequestRead+0x168>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f89d 	bl	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e038      	b.n	8002f6c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f825 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e017      	b.n	8002f6c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f3c:	897b      	ldrh	r3, [r7, #10]
 8002f3e:	11db      	asrs	r3, r3, #7
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0306 	and.w	r3, r3, #6
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f063 030e 	orn	r3, r3, #14
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4907      	ldr	r1, [pc, #28]	; (8002f78 <I2C_MasterRequestRead+0x168>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f865 	bl	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	00010008 	.word	0x00010008
 8002f78:	00010002 	.word	0x00010002

08002f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8c:	e025      	b.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d021      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fecd 	bl	8001d34 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d116      	bne.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e023      	b.n	8003022 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d10d      	bne.n	8003000 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	e00c      	b.n	800301a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	429a      	cmp	r2, r3
 800301e:	d0b6      	beq.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003038:	e051      	b.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003048:	d123      	bne.n	8003092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003062:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e046      	b.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d021      	beq.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fe fe4b 	bl	8001d34 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e020      	b.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10c      	bne.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e00b      	b.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	43da      	mvns	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d18d      	bne.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003134:	e02d      	b.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f8ce 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e02d      	b.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d021      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fe fdf1 	bl	8001d34 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d116      	bne.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0220 	orr.w	r2, r3, #32
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e007      	b.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b80      	cmp	r3, #128	; 0x80
 800319e:	d1ca      	bne.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b6:	e02d      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f88d 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e02d      	b.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d021      	beq.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d0:	f7fe fdb0 	bl	8001d34 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d302      	bcc.n	80031e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d1ca      	bne.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003238:	e042      	b.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d119      	bne.n	800327c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e029      	b.n	80032d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327c:	f7fe fd5a 	bl	8001d34 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d1b5      	bne.n	800323a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d11b      	bne.n	8003328 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b02      	ldr	r3, [pc, #8]	; (8003344 <HAL_RCC_GetHCLKFreq+0x10>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	20000010 	.word	0x20000010

08003348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800334c:	f7ff fff2 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003350:	4601      	mov	r1, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4a03      	ldr	r2, [pc, #12]	; (800336c <HAL_RCC_GetPCLK1Freq+0x24>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08003fcc 	.word	0x08003fcc

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003374:	f7ff ffde 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003378:	4601      	mov	r1, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	0adb      	lsrs	r3, r3, #11
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4a03      	ldr	r2, [pc, #12]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003386:	5cd3      	ldrb	r3, [r2, r3]
 8003388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	08003fcc 	.word	0x08003fcc

08003398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e01d      	b.n	80033e6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe fb3e 	bl	8001a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 f8d0 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003406:	2302      	movs	r3, #2
 8003408:	e0b4      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x184>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	f200 809f 	bhi.w	8003560 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003422:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	0800345d 	.word	0x0800345d
 800342c:	08003561 	.word	0x08003561
 8003430:	08003561 	.word	0x08003561
 8003434:	08003561 	.word	0x08003561
 8003438:	0800349d 	.word	0x0800349d
 800343c:	08003561 	.word	0x08003561
 8003440:	08003561 	.word	0x08003561
 8003444:	08003561 	.word	0x08003561
 8003448:	080034df 	.word	0x080034df
 800344c:	08003561 	.word	0x08003561
 8003450:	08003561 	.word	0x08003561
 8003454:	08003561 	.word	0x08003561
 8003458:	0800351f 	.word	0x0800351f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f8ec 	bl	8003640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6999      	ldr	r1, [r3, #24]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	619a      	str	r2, [r3, #24]
      break;
 800349a:	e062      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f932 	bl	800370c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6999      	ldr	r1, [r3, #24]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	619a      	str	r2, [r3, #24]
      break;
 80034dc:	e041      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f97b 	bl	80037e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0208 	orr.w	r2, r2, #8
 80034f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0204 	bic.w	r2, r2, #4
 8003508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	61da      	str	r2, [r3, #28]
      break;
 800351c:	e021      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f9c5 	bl	80038b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69d9      	ldr	r1, [r3, #28]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	021a      	lsls	r2, r3, #8
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	61da      	str	r2, [r3, #28]
      break;
 800355e:	e000      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003560:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a29      	ldr	r2, [pc, #164]	; (8003634 <TIM_Base_SetConfig+0xb8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0x30>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0x30>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a26      	ldr	r2, [pc, #152]	; (8003638 <TIM_Base_SetConfig+0xbc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0x30>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a25      	ldr	r2, [pc, #148]	; (800363c <TIM_Base_SetConfig+0xc0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <TIM_Base_SetConfig+0xb8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0x62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0x62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <TIM_Base_SetConfig+0xbc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <TIM_Base_SetConfig+0xc0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a07      	ldr	r2, [pc, #28]	; (8003634 <TIM_Base_SetConfig+0xb8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800

08003640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 0302 	bic.w	r3, r3, #2
 8003688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <TIM_OC1_SetConfig+0xc8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10c      	bne.n	80036b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0308 	bic.w	r3, r3, #8
 80036a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <TIM_OC1_SetConfig+0xc8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d111      	bne.n	80036e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00

0800370c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0210 	bic.w	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0320 	bic.w	r3, r3, #32
 8003756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <TIM_OC2_SetConfig+0xd0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d10d      	bne.n	8003788 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <TIM_OC2_SetConfig+0xd0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d113      	bne.n	80037b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	40012c00 	.word	0x40012c00

080037e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <TIM_OC3_SetConfig+0xd0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10d      	bne.n	800385a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <TIM_OC3_SetConfig+0xd0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d113      	bne.n	800388a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40012c00 	.word	0x40012c00

080038b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	031b      	lsls	r3, r3, #12
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <TIM_OC4_SetConfig+0x98>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d109      	bne.n	8003928 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800391a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00

08003950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003964:	2302      	movs	r3, #2
 8003966:	e032      	b.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e03f      	b.n	8003a6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fe f870 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f90b 	bl	8003c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b088      	sub	sp, #32
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f040 8083 	bne.w	8003b9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_UART_Transmit+0x2e>
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e07b      	b.n	8003b9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Transmit+0x40>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e074      	b.n	8003b9c <HAL_UART_Transmit+0x12a>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe f934 	bl	8001d34 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ada:	e042      	b.n	8003b62 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d122      	bne.n	8003b3a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2200      	movs	r2, #0
 8003afc:	2180      	movs	r1, #128	; 0x80
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f850 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e046      	b.n	8003b9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	e017      	b.n	8003b62 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	e013      	b.n	8003b62 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f82d 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e023      	b.n	8003b9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	60ba      	str	r2, [r7, #8]
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1b7      	bne.n	8003adc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f814 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00a      	b.n	8003b9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	e02c      	b.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d028      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc4:	f7fe f8b6 	bl	8001d34 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d21d      	bcs.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003be2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e00f      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d0c3      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c72:	f023 030c 	bic.w	r3, r3, #12
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <UART_SetConfig+0x1ac>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d14e      	bne.n	8003d3e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7ff fb66 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8003ca4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009a      	lsls	r2, r3, #2
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	0119      	lsls	r1, r3, #4
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009a      	lsls	r2, r3, #2
 8003cd0:	441a      	add	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cdc:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003cde:	fba3 0302 	umull	r0, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2064      	movs	r0, #100	; 0x64
 8003ce6:	fb00 f303 	mul.w	r3, r0, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	3332      	adds	r3, #50	; 0x32
 8003cf0:	4a3d      	ldr	r2, [pc, #244]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	4419      	add	r1, r3
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	441a      	add	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d14:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003d16:	fba3 0302 	umull	r0, r3, r3, r2
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2064      	movs	r0, #100	; 0x64
 8003d1e:	fb00 f303 	mul.w	r3, r0, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	3332      	adds	r3, #50	; 0x32
 8003d28:	4a2f      	ldr	r2, [pc, #188]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	f003 020f 	and.w	r2, r3, #15
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	440a      	add	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003d3c:	e04d      	b.n	8003dda <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d3e:	f7ff fb03 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8003d42:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009a      	lsls	r2, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	4a23      	ldr	r2, [pc, #140]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	0119      	lsls	r1, r3, #4
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009a      	lsls	r2, r3, #2
 8003d6e:	441a      	add	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003d7c:	fba3 0302 	umull	r0, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	2064      	movs	r0, #100	; 0x64
 8003d84:	fb00 f303 	mul.w	r3, r0, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	3332      	adds	r3, #50	; 0x32
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9a:	4419      	add	r1, r3
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009a      	lsls	r2, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003db4:	fba3 0302 	umull	r0, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	2064      	movs	r0, #100	; 0x64
 8003dbc:	fb00 f303 	mul.w	r3, r0, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	3332      	adds	r3, #50	; 0x32
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <UART_SetConfig+0x1b0>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	f003 020f 	and.w	r2, r3, #15
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40013800 	.word	0x40013800
 8003de8:	51eb851f 	.word	0x51eb851f

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	2500      	movs	r5, #0
 8003df0:	4e0c      	ldr	r6, [pc, #48]	; (8003e24 <__libc_init_array+0x38>)
 8003df2:	4c0d      	ldr	r4, [pc, #52]	; (8003e28 <__libc_init_array+0x3c>)
 8003df4:	1ba4      	subs	r4, r4, r6
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	42a5      	cmp	r5, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	f000 f836 	bl	8003e6c <_init>
 8003e00:	2500      	movs	r5, #0
 8003e02:	4e0a      	ldr	r6, [pc, #40]	; (8003e2c <__libc_init_array+0x40>)
 8003e04:	4c0a      	ldr	r4, [pc, #40]	; (8003e30 <__libc_init_array+0x44>)
 8003e06:	1ba4      	subs	r4, r4, r6
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	42a5      	cmp	r5, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e14:	4798      	blx	r3
 8003e16:	3501      	adds	r5, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e1e:	4798      	blx	r3
 8003e20:	3501      	adds	r5, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	08003fd4 	.word	0x08003fd4
 8003e28:	08003fd4 	.word	0x08003fd4
 8003e2c:	08003fd4 	.word	0x08003fd4
 8003e30:	08003fd8 	.word	0x08003fd8

08003e34 <memcpy>:
 8003e34:	b510      	push	{r4, lr}
 8003e36:	1e43      	subs	r3, r0, #1
 8003e38:	440a      	add	r2, r1
 8003e3a:	4291      	cmp	r1, r2
 8003e3c:	d100      	bne.n	8003e40 <memcpy+0xc>
 8003e3e:	bd10      	pop	{r4, pc}
 8003e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e48:	e7f7      	b.n	8003e3a <memcpy+0x6>

08003e4a <memset>:
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d100      	bne.n	8003e54 <memset+0xa>
 8003e52:	4770      	bx	lr
 8003e54:	f803 1b01 	strb.w	r1, [r3], #1
 8003e58:	e7f9      	b.n	8003e4e <memset+0x4>

08003e5a <strcpy>:
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e60:	f803 2b01 	strb.w	r2, [r3], #1
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	d1f9      	bne.n	8003e5c <strcpy+0x2>
 8003e68:	4770      	bx	lr
	...

08003e6c <_init>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	bf00      	nop
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr

08003e78 <_fini>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr
