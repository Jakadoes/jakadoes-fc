
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002964  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b20  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003590  08003590  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003590  08003590  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000968  20000014  080035ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  080035ac  0002097c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d12e  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e94  00000000  00000000  0002d16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002f000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b15f  00000000  00000000  000307f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ea1  00000000  00000000  0004b94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9138  00000000  00000000  0005c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  001159a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a58 	.word	0x08002a58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002a58 	.word	0x08002a58

0800014c <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 8000152:	f001 fba1 	bl	8001898 <HAL_Init>
	MX_GPIO_Init();
 8000156:	f000 f8c5 	bl	80002e4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800015a:	f000 f899 	bl	8000290 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 800015e:	f000 f81b 	bl	8000198 <MX_TIM4_Init>
	//MAVlink stuff
	mavlink_system_t mavlink_system = {
 8000162:	4b09      	ldr	r3, [pc, #36]	; (8000188 <main+0x3c>)
 8000164:	881b      	ldrh	r3, [r3, #0]
 8000166:	81bb      	strh	r3, [r7, #12]
	    1, // System ID2 (1-255)
	    1  // Component ID (a MAV_COMPONENT value)
	};

	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]
	char tx_buffer[4] = "Hl\r\n";
 8000168:	4b08      	ldr	r3, [pc, #32]	; (800018c <main+0x40>)
 800016a:	60bb      	str	r3, [r7, #8]
	char rx_buffer[4] = "test";
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <main+0x44>)
 800016e:	607b      	str	r3, [r7, #4]

	//HAL_Delay(3000);//wait for ESC's to arm
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	2108      	movs	r1, #8
 8000174:	4807      	ldr	r0, [pc, #28]	; (8000194 <main+0x48>)
 8000176:	f001 fe51 	bl	8001e1c <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		//Radio_Transmit_Raw((uint8_t*) &rx_buffer, 4);
		//HAL_UART_Receive (&huart1,(uint8_t*) &rx_buffer, 4 ,100);
		//Radio_Recieve_Raw((uint8_t*) &rx_buffer, 4);
		//MAV_Send_Debug_Statement();
		MAV_Parse_Data();
 800017a:	f001 f93d 	bl	80013f8 <MAV_Parse_Data>
		HAL_Delay(100);
 800017e:	2064      	movs	r0, #100	; 0x64
 8000180:	f001 fbec 	bl	800195c <HAL_Delay>
	while(1){
 8000184:	e7f9      	b.n	800017a <main+0x2e>
 8000186:	bf00      	nop
 8000188:	08002a70 	.word	0x08002a70
 800018c:	0a0d6c48 	.word	0x0a0d6c48
 8000190:	74736574 	.word	0x74736574
 8000194:	40010c00 	.word	0x40010c00

08000198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b08a      	sub	sp, #40	; 0x28
 800019c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800019e:	f107 0320 	add.w	r3, r7, #32
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]
 80001b6:	615a      	str	r2, [r3, #20]
 80001b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80001ba:	4b33      	ldr	r3, [pc, #204]	; (8000288 <MX_TIM4_Init+0xf0>)
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <MX_TIM4_Init+0xf4>)
 80001be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 80001c0:	4b31      	ldr	r3, [pc, #196]	; (8000288 <MX_TIM4_Init+0xf0>)
 80001c2:	220a      	movs	r2, #10
 80001c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80001c6:	4b30      	ldr	r3, [pc, #192]	; (8000288 <MX_TIM4_Init+0xf0>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 80001cc:	4b2e      	ldr	r3, [pc, #184]	; (8000288 <MX_TIM4_Init+0xf0>)
 80001ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80001d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80001d4:	4b2c      	ldr	r3, [pc, #176]	; (8000288 <MX_TIM4_Init+0xf0>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001da:	4b2b      	ldr	r3, [pc, #172]	; (8000288 <MX_TIM4_Init+0xf0>)
 80001dc:	2200      	movs	r2, #0
 80001de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80001e0:	4829      	ldr	r0, [pc, #164]	; (8000288 <MX_TIM4_Init+0xf0>)
 80001e2:	f001 fe65 	bl	8001eb0 <HAL_TIM_PWM_Init>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80001ec:	f000 f8b8 	bl	8000360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80001f0:	2300      	movs	r3, #0
 80001f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80001f8:	f107 0320 	add.w	r3, r7, #32
 80001fc:	4619      	mov	r1, r3
 80001fe:	4822      	ldr	r0, [pc, #136]	; (8000288 <MX_TIM4_Init+0xf0>)
 8000200:	f002 f988 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800020a:	f000 f8a9 	bl	8000360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800020e:	2360      	movs	r3, #96	; 0x60
 8000210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 700;
 8000212:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800021c:	2300      	movs	r3, #0
 800021e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	4619      	mov	r1, r3
 8000226:	4818      	ldr	r0, [pc, #96]	; (8000288 <MX_TIM4_Init+0xf0>)
 8000228:	f001 fea0 	bl	8001f6c <HAL_TIM_PWM_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000232:	f000 f895 	bl	8000360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2204      	movs	r2, #4
 800023a:	4619      	mov	r1, r3
 800023c:	4812      	ldr	r0, [pc, #72]	; (8000288 <MX_TIM4_Init+0xf0>)
 800023e:	f001 fe95 	bl	8001f6c <HAL_TIM_PWM_ConfigChannel>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000248:	f000 f88a 	bl	8000360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2208      	movs	r2, #8
 8000250:	4619      	mov	r1, r3
 8000252:	480d      	ldr	r0, [pc, #52]	; (8000288 <MX_TIM4_Init+0xf0>)
 8000254:	f001 fe8a 	bl	8001f6c <HAL_TIM_PWM_ConfigChannel>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800025e:	f000 f87f 	bl	8000360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	220c      	movs	r2, #12
 8000266:	4619      	mov	r1, r3
 8000268:	4807      	ldr	r0, [pc, #28]	; (8000288 <MX_TIM4_Init+0xf0>)
 800026a:	f001 fe7f 	bl	8001f6c <HAL_TIM_PWM_ConfigChannel>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000274:	f000 f874 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <MX_TIM4_Init+0xf0>)
 800027a:	f001 fa09 	bl	8001690 <HAL_TIM_MspPostInit>

}
 800027e:	bf00      	nop
 8000280:	3728      	adds	r7, #40	; 0x28
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000520 	.word	0x20000520
 800028c:	40000800 	.word	0x40000800

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600*2;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f002 f968 	bl	800259c <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f845 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200005b4 	.word	0x200005b4
 80002e0:	40013800 	.word	0x40013800

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_GPIO_Init+0x74>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a16      	ldr	r2, [pc, #88]	; (8000358 <MX_GPIO_Init+0x74>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_GPIO_Init+0x74>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_GPIO_Init+0x74>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a10      	ldr	r2, [pc, #64]	; (8000358 <MX_GPIO_Init+0x74>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_GPIO_Init+0x74>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2108      	movs	r1, #8
 800032c:	480b      	ldr	r0, [pc, #44]	; (800035c <MX_GPIO_Init+0x78>)
 800032e:	f001 fd75 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000332:	2308      	movs	r3, #8
 8000334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x78>)
 800034a:	f001 fc0d 	bl	8001b68 <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010c00 	.word	0x40010c00

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	6039      	str	r1, [r7, #0]
 8000376:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b2da      	uxtb	r2, r3
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4053      	eors	r3, r2
 8000382:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	011b      	lsls	r3, r3, #4
 8000388:	b25a      	sxtb	r2, r3
 800038a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800038e:	4053      	eors	r3, r2
 8000390:	b25b      	sxtb	r3, r3
 8000392:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	0a1b      	lsrs	r3, r3, #8
 800039a:	b29b      	uxth	r3, r3
 800039c:	b21a      	sxth	r2, r3
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	021b      	lsls	r3, r3, #8
 80003a2:	b21b      	sxth	r3, r3
 80003a4:	4053      	eors	r3, r2
 80003a6:	b21a      	sxth	r2, r3
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	b21b      	sxth	r3, r3
 80003ae:	4053      	eors	r3, r2
 80003b0:	b21a      	sxth	r2, r3
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	091b      	lsrs	r3, r3, #4
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	b21b      	sxth	r3, r3
 80003ba:	4053      	eors	r3, r2
 80003bc:	b21b      	sxth	r3, r3
 80003be:	b29a      	uxth	r2, r3
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	801a      	strh	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003dc:	801a      	strh	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <mavlink_sha256_init+0x50>)
 8000400:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <mavlink_sha256_init+0x54>)
 8000406:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <mavlink_sha256_init+0x58>)
 800040c:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <mavlink_sha256_init+0x5c>)
 8000412:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <mavlink_sha256_init+0x60>)
 8000418:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a0b      	ldr	r2, [pc, #44]	; (800044c <mavlink_sha256_init+0x64>)
 800041e:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <mavlink_sha256_init+0x68>)
 8000424:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <mavlink_sha256_init+0x6c>)
 800042a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	6a09e667 	.word	0x6a09e667
 800043c:	bb67ae85 	.word	0xbb67ae85
 8000440:	3c6ef372 	.word	0x3c6ef372
 8000444:	a54ff53a 	.word	0xa54ff53a
 8000448:	510e527f 	.word	0x510e527f
 800044c:	9b05688c 	.word	0x9b05688c
 8000450:	1f83d9ab 	.word	0x1f83d9ab
 8000454:	5be0cd19 	.word	0x5be0cd19

08000458 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000458:	b480      	push	{r7}
 800045a:	b0cf      	sub	sp, #316	; 0x13c
 800045c:	af00      	add	r7, sp, #0
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	6018      	str	r0, [r3, #0]
 8000462:	463b      	mov	r3, r7
 8000464:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80004b6:	2300      	movs	r3, #0
 80004b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80004bc:	e011      	b.n	80004e2 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 80004be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	463a      	mov	r2, r7
 80004c6:	6812      	ldr	r2, [r2, #0]
 80004c8:	4413      	add	r3, r2
 80004ca:	6819      	ldr	r1, [r3, #0]
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80004d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80004d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80004dc:	3301      	adds	r3, #1
 80004de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80004e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	dde9      	ble.n	80004be <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80004ea:	2310      	movs	r3, #16
 80004ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80004f0:	e057      	b.n	80005a2 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80004f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80004f6:	1e9a      	subs	r2, r3, #2
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000500:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000508:	1e99      	subs	r1, r3, #2
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000512:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000516:	405a      	eors	r2, r3
 8000518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800051c:	1e99      	subs	r1, r3, #2
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000526:	0a9b      	lsrs	r3, r3, #10
 8000528:	405a      	eors	r2, r3
 800052a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800052e:	1fd9      	subs	r1, r3, #7
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000538:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800053a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800053e:	f1a3 010f 	sub.w	r1, r3, #15
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800054a:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800054e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000552:	f1a3 000f 	sub.w	r0, r3, #15
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800055e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000562:	4059      	eors	r1, r3
 8000564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000568:	f1a3 000f 	sub.w	r0, r3, #15
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000578:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800057a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800057e:	f1a3 0110 	sub.w	r1, r3, #16
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800058a:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800059c:	3301      	adds	r3, #1
 800059e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80005a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80005a6:	2b3f      	cmp	r3, #63	; 0x3f
 80005a8:	dda3      	ble.n	80004f2 <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80005b0:	e076      	b.n	80006a0 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80005b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80005b6:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80005ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80005be:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80005c2:	405a      	eors	r2, r3
 80005c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80005c8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80005cc:	405a      	eors	r2, r3
 80005ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80005d2:	441a      	add	r2, r3
 80005d4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80005d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80005dc:	4019      	ands	r1, r3
 80005de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80005e2:	43d8      	mvns	r0, r3
 80005e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80005e8:	4003      	ands	r3, r0
 80005ea:	404b      	eors	r3, r1
 80005ec:	441a      	add	r2, r3
 80005ee:	4955      	ldr	r1, [pc, #340]	; (8000744 <mavlink_sha256_calc+0x2ec>)
 80005f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80005f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005f8:	441a      	add	r2, r3
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000606:	4413      	add	r3, r2
 8000608:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800060c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000610:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000614:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000618:	ea4f 3373 	mov.w	r3, r3, ror #13
 800061c:	405a      	eors	r2, r3
 800061e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000622:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000626:	405a      	eors	r2, r3
 8000628:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800062c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000630:	4059      	eors	r1, r3
 8000632:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000636:	4019      	ands	r1, r3
 8000638:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800063c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000640:	4003      	ands	r3, r0
 8000642:	404b      	eors	r3, r1
 8000644:	4413      	add	r3, r2
 8000646:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 800064a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800064e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000652:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000656:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 800065a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800065e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000662:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000666:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800066a:	4413      	add	r3, r2
 800066c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000678:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800067c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000680:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000684:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000688:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800068c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000690:	4413      	add	r3, r2
 8000692:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800069a:	3301      	adds	r3, #1
 800069c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006a4:	2b3f      	cmp	r3, #63	; 0x3f
 80006a6:	dd84      	ble.n	80005b2 <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80006b2:	441a      	add	r2, r3
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	609a      	str	r2, [r3, #8]
    B += BB;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	68da      	ldr	r2, [r3, #12]
 80006c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80006c4:	441a      	add	r2, r3
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	60da      	str	r2, [r3, #12]
    C += CC;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	691a      	ldr	r2, [r3, #16]
 80006d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80006d6:	441a      	add	r2, r3
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	611a      	str	r2, [r3, #16]
    D += DD;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80006e8:	441a      	add	r2, r3
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	615a      	str	r2, [r3, #20]
    E += EE;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	699a      	ldr	r2, [r3, #24]
 80006f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006fa:	441a      	add	r2, r3
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	619a      	str	r2, [r3, #24]
    F += FF;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	69da      	ldr	r2, [r3, #28]
 8000708:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800070c:	441a      	add	r2, r3
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	61da      	str	r2, [r3, #28]
    G += GG;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6a1a      	ldr	r2, [r3, #32]
 800071a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800071e:	441a      	add	r2, r3
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	621a      	str	r2, [r3, #32]
    H += HH;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800072c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000730:	441a      	add	r2, r3
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000738:	bf00      	nop
 800073a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	08002a74 	.word	0x08002a74

08000748 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	; 0x70
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	441a      	add	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000772:	429a      	cmp	r2, r3
 8000774:	d904      	bls.n	8000780 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000788:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 800078a:	e054      	b.n	8000836 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 800078c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000792:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000798:	429a      	cmp	r2, r3
 800079a:	d201      	bcs.n	80007a0 <mavlink_sha256_update+0x58>
            l = len;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80007a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a8:	4413      	add	r3, r2
 80007aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 f93f 	bl	8002a32 <memcpy>
	offset += l;
 80007b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b8:	4413      	add	r3, r2
 80007ba:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 80007bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007c0:	4413      	add	r3, r2
 80007c2:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80007cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007ce:	2b40      	cmp	r3, #64	; 0x40
 80007d0:	d131      	bne.n	8000836 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3328      	adds	r3, #40	; 0x28
 80007d6:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	663b      	str	r3, [r7, #96]	; 0x60
 80007dc:	e020      	b.n	8000820 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80007de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80007e4:	4413      	add	r3, r2
 80007e6:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80007e8:	f107 0210 	add.w	r2, r7, #16
 80007ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80007f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007f6:	78da      	ldrb	r2, [r3, #3]
 80007f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007fa:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80007fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007fe:	3301      	adds	r3, #1
 8000800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000802:	7892      	ldrb	r2, [r2, #2]
 8000804:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000808:	3302      	adds	r3, #2
 800080a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800080c:	7852      	ldrb	r2, [r2, #1]
 800080e:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000812:	3303      	adds	r3, #3
 8000814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 800081a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081c:	3301      	adds	r3, #1
 800081e:	663b      	str	r3, [r7, #96]	; 0x60
 8000820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000822:	2b0f      	cmp	r3, #15
 8000824:	dddb      	ble.n	80007de <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff fe13 	bl	8000458 <mavlink_sha256_calc>
	    offset = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1a7      	bne.n	800078c <mavlink_sha256_update+0x44>
	}
    }
}
 800083c:	bf00      	nop
 800083e:	3770      	adds	r7, #112	; 0x70
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b098      	sub	sp, #96	; 0x60
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000858:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800085a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800085c:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000864:	3301      	adds	r3, #1
 8000866:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3308      	adds	r3, #8
 800086c:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	3301      	adds	r3, #1
 8000878:	2247      	movs	r2, #71	; 0x47
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f002 f8e3 	bl	8002a48 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000888:	3307      	adds	r3, #7
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000890:	440b      	add	r3, r1
 8000892:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	0a1a      	lsrs	r2, r3, #8
 800089c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800089e:	3306      	adds	r3, #6
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008a6:	440b      	add	r3, r1
 80008a8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	0c1a      	lsrs	r2, r3, #16
 80008b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008b4:	3305      	adds	r3, #5
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008bc:	440b      	add	r3, r1
 80008be:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	0e1a      	lsrs	r2, r3, #24
 80008c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008ca:	3304      	adds	r3, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008d2:	440b      	add	r3, r1
 80008d4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008de:	3303      	adds	r3, #3
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008e6:	440b      	add	r3, r1
 80008e8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	0a1a      	lsrs	r2, r3, #8
 80008f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008f4:	3302      	adds	r3, #2
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008fc:	440b      	add	r3, r1
 80008fe:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	0c1a      	lsrs	r2, r3, #16
 8000908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800090a:	3301      	adds	r3, #1
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000912:	440b      	add	r3, r1
 8000914:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	0e1b      	lsrs	r3, r3, #24
 800091e:	b2d9      	uxtb	r1, r3
 8000920:	f107 020c 	add.w	r2, r7, #12
 8000924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000926:	4413      	add	r3, r2
 8000928:	460a      	mov	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800092c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800092e:	f103 0208 	add.w	r2, r3, #8
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff05 	bl	8000748 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800093e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000940:	78da      	ldrb	r2, [r3, #3]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800094c:	7892      	ldrb	r2, [r2, #2]
 800094e:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	3302      	adds	r3, #2
 8000954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000956:	7852      	ldrb	r2, [r2, #1]
 8000958:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	3303      	adds	r3, #3
 800095e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	3304      	adds	r3, #4
 8000968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800096a:	79d2      	ldrb	r2, [r2, #7]
 800096c:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	3305      	adds	r3, #5
 8000972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000974:	7992      	ldrb	r2, [r2, #6]
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	3760      	adds	r7, #96	; 0x60
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <mavlink_get_channel_status+0x24>)
 8000996:	4413      	add	r3, r2
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200004c0 	.word	0x200004c0

080009a8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f240 1223 	movw	r2, #291	; 0x123
 80009b8:	fb02 f303 	mul.w	r3, r2, r3
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <mavlink_get_channel_buffer+0x24>)
 80009be:	4413      	add	r3, r2
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000034 	.word	0x20000034

080009d0 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 80009d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80009d4:	b0aa      	sub	sp, #168	; 0xa8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <mavlink_signature_check+0x18>
		return true;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e123      	b.n	8000c30 <mavlink_signature_check+0x260>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3302      	adds	r3, #2
 80009ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80009f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 80009fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009fe:	3307      	adds	r3, #7
 8000a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8000a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fced 	bl	80003e8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f103 0110 	add.w	r1, r3, #16
 8000a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a18:	2220      	movs	r2, #32
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe94 	bl	8000748 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	78db      	ldrb	r3, [r3, #3]
 8000a24:	330a      	adds	r3, #10
 8000a26:	461a      	mov	r2, r3
 8000a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe89 	bl	8000748 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8000a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a40:	2202      	movs	r2, #2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe80 	bl	8000748 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8000a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe78 	bl	8000748 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8000a58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff feee 	bl	8000844 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2206      	movs	r2, #6
 8000a6e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 ffce 	bl	8002a14 <memcmp>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <mavlink_signature_check+0xb2>
		return false;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e0d6      	b.n	8000c30 <mavlink_signature_check+0x260>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8000a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	f04f 0400 	mov.w	r4, #0
 8000a94:	e9c7 3406 	strd	r3, r4, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8000a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a9c:	1c59      	adds	r1, r3, #1
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	2206      	movs	r2, #6
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 ffc4 	bl	8002a32 <memcpy>

	if (signing_streams == NULL) {
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d101      	bne.n	8000ab4 <mavlink_signature_check+0xe4>
		return false;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e0bd      	b.n	8000c30 <mavlink_signature_check+0x260>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000aba:	e02b      	b.n	8000b14 <mavlink_signature_check+0x144>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	79d9      	ldrb	r1, [r3, #7]
 8000ac0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	4413      	add	r3, r2
 8000acc:	4403      	add	r3, r0
 8000ace:	3303      	adds	r3, #3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	d119      	bne.n	8000b0a <mavlink_signature_check+0x13a>
		    msg->compid == signing_streams->stream[i].compid &&
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7a19      	ldrb	r1, [r3, #8]
 8000ada:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000ade:	68b8      	ldr	r0, [r7, #8]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4403      	add	r3, r0
 8000ae8:	3304      	adds	r3, #4
 8000aea:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000aec:	4299      	cmp	r1, r3
 8000aee:	d10c      	bne.n	8000b0a <mavlink_signature_check+0x13a>
		    link_id == signing_streams->stream[i].link_id) {
 8000af0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	4613      	mov	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4413      	add	r3, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	3302      	adds	r3, #2
 8000b00:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8000b02:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d00b      	beq.n	8000b22 <mavlink_signature_check+0x152>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000b0a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3cd      	bcc.n	8000abc <mavlink_signature_check+0xec>
 8000b20:	e000      	b.n	8000b24 <mavlink_signature_check+0x154>
			break;
 8000b22:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d143      	bne.n	8000bb8 <mavlink_signature_check+0x1e8>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d901      	bls.n	8000b3c <mavlink_signature_check+0x16c>
			// over max number of streams
			return false;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e079      	b.n	8000c30 <mavlink_signature_check+0x260>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8000b3c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000b40:	493e      	ldr	r1, [pc, #248]	; (8000c3c <mavlink_signature_check+0x26c>)
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	eb11 0b03 	adds.w	fp, r1, r3
 8000b4a:	eb42 0c04 	adc.w	ip, r2, r4
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f103 0408 	add.w	r4, r3, #8
 8000b54:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000b58:	45a4      	cmp	ip, r4
 8000b5a:	bf08      	it	eq
 8000b5c:	459b      	cmpeq	fp, r3
 8000b5e:	d201      	bcs.n	8000b64 <mavlink_signature_check+0x194>
			return false;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e065      	b.n	8000c30 <mavlink_signature_check+0x260>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8000b64:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	79d8      	ldrb	r0, [r3, #7]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	3303      	adds	r3, #3
 8000b78:	4602      	mov	r2, r0
 8000b7a:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8000b7c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7a18      	ldrb	r0, [r3, #8]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	3304      	adds	r3, #4
 8000b90:	4602      	mov	r2, r0
 8000b92:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8000b94:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000ba8:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	801a      	strh	r2, [r3, #0]
 8000bb6:	e01d      	b.n	8000bf4 <mavlink_signature_check+0x224>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	f04f 0400 	mov.w	r4, #0
 8000bc0:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8000bc4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000bc8:	4613      	mov	r3, r2
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	1d59      	adds	r1, r3, #5
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2206      	movs	r2, #6
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 ff29 	bl	8002a32 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8000be0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000be4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000be8:	42a2      	cmp	r2, r4
 8000bea:	bf08      	it	eq
 8000bec:	4299      	cmpeq	r1, r3
 8000bee:	d301      	bcc.n	8000bf4 <mavlink_signature_check+0x224>
			// repeating old timestamp
			return false;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e01d      	b.n	8000c30 <mavlink_signature_check+0x260>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8000bf4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	4413      	add	r3, r2
 8000c02:	1d58      	adds	r0, r3, #5
 8000c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c08:	3301      	adds	r3, #1
 8000c0a:	2206      	movs	r2, #6
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f001 ff10 	bl	8002a32 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8000c12:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8000c1c:	42a2      	cmp	r2, r4
 8000c1e:	bf08      	it	eq
 8000c20:	4299      	cmpeq	r1, r3
 8000c22:	d204      	bcs.n	8000c2e <mavlink_signature_check+0x25e>
		signing->timestamp = tstamp.t64;
 8000c24:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	}
	return true;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	37a8      	adds	r7, #168	; 0xa8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000c3a:	bf00      	nop
 8000c3c:	005b8d80 	.word	0x005b8d80

08000c40 <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	709a      	strb	r2, [r3, #2]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8000c6a:	f107 030e 	add.w	r3, r7, #14
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fbad 	bl	80003ce <crc_init>
	msg->checksum = crcTmp;
 8000c74:	89fa      	ldrh	r2, [r7, #14]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	801a      	strh	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8000c96:	f107 020e 	add.w	r2, r7, #14
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fb64 	bl	800036c <crc_accumulate>
	msg->checksum = checksum;
 8000ca4:	89fa      	ldrh	r2, [r7, #14]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	801a      	strh	r2, [r3, #0]
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	23d6      	movs	r3, #214	; 0xd6
 8000cc2:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8000cc4:	e025      	b.n	8000d12 <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4413      	add	r3, r2
 8000ccc:	3301      	adds	r3, #1
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8000cd2:	491e      	ldr	r1, [pc, #120]	; (8000d4c <mavlink_get_msg_entry+0x98>)
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d203      	bcs.n	8000cf0 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
                continue;
 8000cee:	e010      	b.n	8000d12 <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8000cf0:	4916      	ldr	r1, [pc, #88]	; (8000d4c <mavlink_get_msg_entry+0x98>)
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d902      	bls.n	8000d0c <mavlink_get_msg_entry+0x58>
                low = mid;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	617b      	str	r3, [r7, #20]
                continue;
 8000d0a:	e002      	b.n	8000d12 <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	617b      	str	r3, [r7, #20]
            break;
 8000d10:	e003      	b.n	8000d1a <mavlink_get_msg_entry+0x66>
        while (low < high) {
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3d5      	bcc.n	8000cc6 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8000d1a:	490c      	ldr	r1, [pc, #48]	; (8000d4c <mavlink_get_msg_entry+0x98>)
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d001      	beq.n	8000d34 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e006      	b.n	8000d42 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <mavlink_get_msg_entry+0x98>)
 8000d40:	4413      	add	r3, r2
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	371c      	adds	r7, #28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	08002b74 	.word	0x08002b74

08000d50 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	78db      	ldrb	r3, [r3, #3]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	f200 826e 	bhi.w	8001250 <mavlink_frame_char_buffer+0x500>
 8000d74:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <mavlink_frame_char_buffer+0x2c>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000dbd 	.word	0x08000dbd
 8000d80:	08000dbd 	.word	0x08000dbd
 8000d84:	08000e1b 	.word	0x08000e1b
 8000d88:	08000e81 	.word	0x08000e81
 8000d8c:	08000eb9 	.word	0x08000eb9
 8000d90:	08000ed1 	.word	0x08000ed1
 8000d94:	08000ee9 	.word	0x08000ee9
 8000d98:	08000f01 	.word	0x08000f01
 8000d9c:	08000f19 	.word	0x08000f19
 8000da0:	08000f73 	.word	0x08000f73
 8000da4:	08000fbf 	.word	0x08000fbf
 8000da8:	0800101b 	.word	0x0800101b
 8000dac:	08001053 	.word	0x08001053
 8000db0:	080010df 	.word	0x080010df
 8000db4:	080010df 	.word	0x080010df
 8000db8:	0800119b 	.word	0x0800119b
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2bfd      	cmp	r3, #253	; 0xfd
 8000dc0:	d113      	bne.n	8000dea <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	7b1b      	ldrb	r3, [r3, #12]
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff ff3b 	bl	8000c5e <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8000de8:	e229      	b.n	800123e <mavlink_frame_char_buffer+0x4ee>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2bfe      	cmp	r3, #254	; 0xfe
 8000dee:	f040 8226 	bne.w	800123e <mavlink_frame_char_buffer+0x4ee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2202      	movs	r2, #2
 8000df6:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	7b1b      	ldrb	r3, [r3, #12]
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ff23 	bl	8000c5e <mavlink_start_checksum>
		break;
 8000e18:	e211      	b.n	800123e <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00f      	beq.n	8000e42 <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	3301      	adds	r3, #1
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8000e2e:	68b8      	ldr	r0, [r7, #8]
 8000e30:	f7ff ff06 	bl	8000c40 <_mav_parse_error>
			status->msg_received = 0;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8000e40:	e206      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
			rxmsg->len = c;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4619      	mov	r1, r3
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f7ff ff15 	bl	8000c82 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	7b1b      	ldrb	r3, [r3, #12]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d009      	beq.n	8000e78 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2205      	movs	r2, #5
 8000e74:	70da      	strb	r2, [r3, #3]
		break;
 8000e76:	e1eb      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	70da      	strb	r2, [r3, #3]
		break;
 8000e7e:	e1e7      	b.n	8001250 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	791b      	ldrb	r3, [r3, #4]
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8000e92:	68b8      	ldr	r0, [r7, #8]
 8000e94:	f7ff fed4 	bl	8000c40 <_mav_parse_error>
			status->msg_received = 0;
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	70da      	strb	r2, [r3, #3]
			break;
 8000ea4:	e1d4      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
		}
		mavlink_update_checksum(rxmsg, c);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff fee9 	bl	8000c82 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	70da      	strb	r2, [r3, #3]
		break;
 8000eb6:	e1cb      	b.n	8001250 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff fedd 	bl	8000c82 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2205      	movs	r2, #5
 8000ecc:	70da      	strb	r2, [r3, #3]
		break;
 8000ece:	e1bf      	b.n	8001250 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fed1 	bl	8000c82 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2206      	movs	r2, #6
 8000ee4:	70da      	strb	r2, [r3, #3]
		break;
 8000ee6:	e1b3      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff fec5 	bl	8000c82 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2207      	movs	r2, #7
 8000efc:	70da      	strb	r2, [r3, #3]
		break;
 8000efe:	e1a7      	b.n	8001250 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff feb9 	bl	8000c82 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2208      	movs	r2, #8
 8000f14:	70da      	strb	r2, [r3, #3]
		break;
 8000f16:	e19b      	b.n	8001250 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	b2d9      	uxtb	r1, r3
 8000f22:	2000      	movs	r0, #0
 8000f24:	4301      	orrs	r1, r0
 8000f26:	7251      	strb	r1, [r2, #9]
 8000f28:	0a19      	lsrs	r1, r3, #8
 8000f2a:	b2c9      	uxtb	r1, r1
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	4301      	orrs	r1, r0
 8000f30:	7291      	strb	r1, [r2, #10]
 8000f32:	0c1b      	lsrs	r3, r3, #16
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fe9e 	bl	8000c82 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	7b1b      	ldrb	r3, [r3, #12]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	78db      	ldrb	r3, [r3, #3]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	220b      	movs	r2, #11
 8000f5e:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8000f60:	e176      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	220c      	movs	r2, #12
 8000f66:	70da      	strb	r2, [r3, #3]
		break;
 8000f68:	e172      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2209      	movs	r2, #9
 8000f6e:	70da      	strb	r2, [r3, #3]
		break;
 8000f70:	e16e      	b.n	8001250 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	7a5a      	ldrb	r2, [r3, #9]
 8000f76:	7a99      	ldrb	r1, [r3, #10]
 8000f78:	0209      	lsls	r1, r1, #8
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	7adb      	ldrb	r3, [r3, #11]
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	4313      	orrs	r3, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	b2d1      	uxtb	r1, r2
 8000f92:	2000      	movs	r0, #0
 8000f94:	4301      	orrs	r1, r0
 8000f96:	7259      	strb	r1, [r3, #9]
 8000f98:	0a11      	lsrs	r1, r2, #8
 8000f9a:	b2c9      	uxtb	r1, r1
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	7299      	strb	r1, [r3, #10]
 8000fa2:	0c12      	lsrs	r2, r2, #16
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fe66 	bl	8000c82 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	220a      	movs	r2, #10
 8000fba:	70da      	strb	r2, [r3, #3]
		break;
 8000fbc:	e148      	b.n	8001250 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	7a5a      	ldrb	r2, [r3, #9]
 8000fc2:	7a99      	ldrb	r1, [r3, #10]
 8000fc4:	0209      	lsls	r1, r1, #8
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	7adb      	ldrb	r3, [r3, #11]
 8000fca:	041b      	lsls	r3, r3, #16
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	b2d1      	uxtb	r1, r2
 8000fde:	2000      	movs	r0, #0
 8000fe0:	4301      	orrs	r1, r0
 8000fe2:	7259      	strb	r1, [r3, #9]
 8000fe4:	0a11      	lsrs	r1, r2, #8
 8000fe6:	b2c9      	uxtb	r1, r1
 8000fe8:	2000      	movs	r0, #0
 8000fea:	4301      	orrs	r1, r0
 8000fec:	7299      	strb	r1, [r3, #10]
 8000fee:	0c12      	lsrs	r2, r2, #16
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff fe40 	bl	8000c82 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	220b      	movs	r2, #11
 800100e:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001010:	e11e      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	220c      	movs	r2, #12
 8001016:	70da      	strb	r2, [r3, #3]
		break;
 8001018:	e11a      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f103 020c 	add.w	r2, r3, #12
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	1c59      	adds	r1, r3, #1
 8001026:	b2c8      	uxtb	r0, r1
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	7108      	strb	r0, [r1, #4]
 800102c:	4413      	add	r3, r2
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4619      	mov	r1, r3
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff fe23 	bl	8000c82 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	791a      	ldrb	r2, [r3, #4]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	78db      	ldrb	r3, [r3, #3]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 80fc 	bne.w	8001242 <mavlink_frame_char_buffer+0x4f2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	220c      	movs	r2, #12
 800104e:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001050:	e0f7      	b.n	8001242 <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	7a5a      	ldrb	r2, [r3, #9]
 8001056:	7a99      	ldrb	r1, [r3, #10]
 8001058:	0209      	lsls	r1, r1, #8
 800105a:	430a      	orrs	r2, r1
 800105c:	7adb      	ldrb	r3, [r3, #11]
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	4313      	orrs	r3, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fe26 	bl	8000cb4 <mavlink_get_msg_entry>
 8001068:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <mavlink_frame_char_buffer+0x326>
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	e000      	b.n	8001078 <mavlink_frame_char_buffer+0x328>
 8001076:	2300      	movs	r3, #0
 8001078:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	4619      	mov	r1, r3
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff fdff 	bl	8000c82 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	429a      	cmp	r2, r3
 8001090:	d003      	beq.n	800109a <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	220e      	movs	r2, #14
 8001096:	70da      	strb	r2, [r3, #3]
 8001098:	e002      	b.n	80010a0 <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	220d      	movs	r2, #13
 800109e:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 80cb 	beq.w	8001246 <mavlink_frame_char_buffer+0x4f6>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	791a      	ldrb	r2, [r3, #4]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	799b      	ldrb	r3, [r3, #6]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f080 80c4 	bcs.w	8001246 <mavlink_frame_char_buffer+0x4f6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	330c      	adds	r3, #12
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	7912      	ldrb	r2, [r2, #4]
 80010c6:	1898      	adds	r0, r3, r2
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	799b      	ldrb	r3, [r3, #6]
 80010cc:	461a      	mov	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	f001 fcb6 	bl	8002a48 <memset>
		}
		break;
 80010dc:	e0b3      	b.n	8001246 <mavlink_frame_char_buffer+0x4f6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	78db      	ldrb	r3, [r3, #3]
 80010e2:	2b0e      	cmp	r3, #14
 80010e4:	d008      	beq.n	80010f8 <mavlink_frame_char_buffer+0x3a8>
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d003      	beq.n	8001100 <mavlink_frame_char_buffer+0x3b0>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2202      	movs	r2, #2
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e002      	b.n	8001106 <mavlink_frame_char_buffer+0x3b6>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00e      	beq.n	8001138 <mavlink_frame_char_buffer+0x3e8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	220f      	movs	r2, #15
 800111e:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	220d      	movs	r2, #13
 8001124:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	f000 808d 	beq.w	800124a <mavlink_frame_char_buffer+0x4fa>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001136:	e088      	b.n	800124a <mavlink_frame_char_buffer+0x4fa>
			if (status->signing &&
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d01f      	beq.n	8001180 <mavlink_frame_char_buffer+0x430>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8001146:	2b00      	cmp	r3, #0
 8001148:	d013      	beq.n	8001172 <mavlink_frame_char_buffer+0x422>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	7a59      	ldrb	r1, [r3, #9]
 8001154:	7a98      	ldrb	r0, [r3, #10]
 8001156:	0200      	lsls	r0, r0, #8
 8001158:	4301      	orrs	r1, r0
 800115a:	7adb      	ldrb	r3, [r3, #11]
 800115c:	041b      	lsls	r3, r3, #16
 800115e:	430b      	orrs	r3, r1
 8001160:	4619      	mov	r1, r3
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	4790      	blx	r2
 8001166:	4603      	mov	r3, r0
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <mavlink_frame_char_buffer+0x430>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d002      	beq.n	8001180 <mavlink_frame_char_buffer+0x430>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2203      	movs	r2, #3
 800117e:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2201      	movs	r2, #1
 8001184:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d05e      	beq.n	800124a <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800118c:	f240 1223 	movw	r2, #291	; 0x123
 8001190:	68f9      	ldr	r1, [r7, #12]
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	f001 fc4d 	bl	8002a32 <memcpy>
		break;
 8001198:	e057      	b.n	800124a <mavlink_frame_char_buffer+0x4fa>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	7b5b      	ldrb	r3, [r3, #13]
 800119e:	f1c3 030d 	rsb	r3, r3, #13
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	7b5b      	ldrb	r3, [r3, #13]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	7b5b      	ldrb	r3, [r3, #13]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d146      	bne.n	800124e <mavlink_frame_char_buffer+0x4fe>
			// we have the whole signature, check it is OK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	6918      	ldr	r0, [r3, #16]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc00 	bl	80009d0 <mavlink_signature_check>
 80011d0:	4603      	mov	r3, r0
 80011d2:	77fb      	strb	r3, [r7, #31]
			if (!sig_ok &&
 80011d4:	7ffb      	ldrb	r3, [r7, #31]
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d017      	beq.n	8001210 <mavlink_frame_char_buffer+0x4c0>
			   	(status->signing->accept_unsigned_callback &&
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d012      	beq.n	8001210 <mavlink_frame_char_buffer+0x4c0>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	7a59      	ldrb	r1, [r3, #9]
 80011f4:	7a98      	ldrb	r0, [r3, #10]
 80011f6:	0200      	lsls	r0, r0, #8
 80011f8:	4301      	orrs	r1, r0
 80011fa:	7adb      	ldrb	r3, [r3, #11]
 80011fc:	041b      	lsls	r3, r3, #16
 80011fe:	430b      	orrs	r3, r1
 8001200:	4619      	mov	r1, r3
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	4790      	blx	r2
 8001206:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <mavlink_frame_char_buffer+0x4c0>
				// accepted via application level override
				sig_ok = true;
 800120c:	2301      	movs	r3, #1
 800120e:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <mavlink_frame_char_buffer+0x4ce>
				status->msg_received = MAVLINK_FRAMING_OK;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e002      	b.n	8001224 <mavlink_frame_char_buffer+0x4d4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2203      	movs	r2, #3
 8001222:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2201      	movs	r2, #1
 8001228:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00e      	beq.n	800124e <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001230:	f240 1223 	movw	r2, #291	; 0x123
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f001 fbfb 	bl	8002a32 <memcpy>
			}
		}
		break;
 800123c:	e007      	b.n	800124e <mavlink_frame_char_buffer+0x4fe>
		break;
 800123e:	bf00      	nop
 8001240:	e006      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
		break;
 8001242:	bf00      	nop
 8001244:	e004      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
		break;
 8001246:	bf00      	nop
 8001248:	e002      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
		break;
 800124a:	bf00      	nop
 800124c:	e000      	b.n	8001250 <mavlink_frame_char_buffer+0x500>
		break;
 800124e:	bf00      	nop
	}

	bufferIndex++;
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3301      	adds	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d110      	bne.n	8001280 <mavlink_frame_char_buffer+0x530>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	799a      	ldrb	r2, [r3, #6]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	891b      	ldrh	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <mavlink_frame_char_buffer+0x524>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2200      	movs	r2, #0
 8001272:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	891b      	ldrh	r3, [r3, #8]
 8001278:	3301      	adds	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <mavlink_frame_char_buffer+0x53e>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	78da      	ldrb	r2, [r3, #3]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01a      	beq.n	80012ca <mavlink_frame_char_buffer+0x57a>
           r_mavlink_status->parse_state = status->parse_state;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	78da      	ldrb	r2, [r3, #3]
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	791a      	ldrb	r2, [r3, #4]
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	795b      	ldrb	r3, [r3, #5]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ae:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	891a      	ldrh	r2, [r3, #8]
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	7b1a      	ldrb	r2, [r3, #12]
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2200      	movs	r2, #0
 80012ce:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d110      	bne.n	80012fa <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00d      	beq.n	80012fa <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	781b      	ldrb	r3, [r3, #0]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop

08001308 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af02      	add	r7, sp, #8
 800130e:	60ba      	str	r2, [r7, #8]
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	460b      	mov	r3, r1
 8001318:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fb43 	bl	80009a8 <mavlink_get_channel_buffer>
 8001322:	4604      	mov	r4, r0
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb2a 	bl	8000980 <mavlink_get_channel_status>
 800132c:	4601      	mov	r1, r0
 800132e:	7bba      	ldrb	r2, [r7, #14]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fd0a 	bl	8000d50 <mavlink_frame_char_buffer>
 800133c:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}

08001346 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b088      	sub	sp, #32
 800134a:	af00      	add	r7, sp, #0
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	460b      	mov	r3, r1
 8001356:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001358:	7bb9      	ldrb	r1, [r7, #14]
 800135a:	7bf8      	ldrb	r0, [r7, #15]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f7ff ffd2 	bl	8001308 <mavlink_frame_char>
 8001364:	4603      	mov	r3, r0
 8001366:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d002      	beq.n	8001374 <mavlink_parse_char+0x2e>
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d120      	bne.n	80013b6 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fb16 	bl	80009a8 <mavlink_get_channel_buffer>
 800137c:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fafd 	bl	8000980 <mavlink_get_channel_status>
 8001386:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001388:	6978      	ldr	r0, [r7, #20]
 800138a:	f7ff fc59 	bl	8000c40 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2201      	movs	r2, #1
 8001398:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	2bfd      	cmp	r3, #253	; 0xfd
 800139e:	d108      	bne.n	80013b2 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2202      	movs	r2, #2
 80013a4:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2200      	movs	r2, #0
 80013aa:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80013ac:	69b8      	ldr	r0, [r7, #24]
 80013ae:	f7ff fc56 	bl	8000c5e <mavlink_start_checksum>
	    }
	    return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <mavlink_parse_char+0x72>
    }
    return msg_received;
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <mavlink_msg_rc_channels_scaled_decode>:
 *
 * @param msg The message to decode
 * @param rc_channels_scaled C-struct to decode the message contents into
 */
static inline void mavlink_msg_rc_channels_scaled_decode(const mavlink_message_t* msg, mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
    rc_channels_scaled->chan7_scaled = mavlink_msg_rc_channels_scaled_get_chan7_scaled(msg);
    rc_channels_scaled->chan8_scaled = mavlink_msg_rc_channels_scaled_get_chan8_scaled(msg);
    rc_channels_scaled->port = mavlink_msg_rc_channels_scaled_get_port(msg);
    rc_channels_scaled->rssi = mavlink_msg_rc_channels_scaled_get_rssi(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN? msg->len : MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	78db      	ldrb	r3, [r3, #3]
 80013ce:	2b16      	cmp	r3, #22
 80013d0:	bf28      	it	cs
 80013d2:	2316      	movcs	r3, #22
 80013d4:	73fb      	strb	r3, [r7, #15]
        memset(rc_channels_scaled, 0, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
 80013d6:	2216      	movs	r2, #22
 80013d8:	2100      	movs	r1, #0
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f001 fb34 	bl	8002a48 <memset>
    memcpy(rc_channels_scaled, _MAV_PAYLOAD(msg), len);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	330c      	adds	r3, #12
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	4619      	mov	r1, r3
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f001 fb22 	bl	8002a32 <memcpy>
#endif
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <MAV_Parse_Data>:
//uint8_t PROPER_STX = 0xFF;
uint8_t test[5] = {0xFE, 0xFE, 0xFE, 0xFE, 0xFE};
char rx_buffer_mav[279];
uint8_t byte_arr[279];

void MAV_Parse_Data(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	char test[4] = "yayy";
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <MAV_Parse_Data+0x94>)
 8001400:	603b      	str	r3, [r7, #0]
	Radio_Recieve_Raw(&byte_arr, sizeof(byte_arr));
 8001402:	f240 1117 	movw	r1, #279	; 0x117
 8001406:	4822      	ldr	r0, [pc, #136]	; (8001490 <MAV_Parse_Data+0x98>)
 8001408:	f000 f8dc 	bl	80015c4 <Radio_Recieve_Raw>
	//Radio_Transmit_Raw(&byte_arr, sizeof(byte_arr));
	//Radio_Transmit_Raw(&"msgid", 4);

	for(int i=0;i<279;i++)
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	e034      	b.n	800147c <MAV_Parse_Data+0x84>
	{
		 if (mavlink_parse_char(chan, byte_arr[i], &msg, &status))//if any mavlink message is sent
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MAV_Parse_Data+0x9c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b2d8      	uxtb	r0, r3
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <MAV_Parse_Data+0x98>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	7819      	ldrb	r1, [r3, #0]
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MAV_Parse_Data+0xa0>)
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <MAV_Parse_Data+0xa4>)
 8001424:	f7ff ff8f 	bl	8001346 <mavlink_parse_char>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d023      	beq.n	8001476 <MAV_Parse_Data+0x7e>
			 //Radio_Transmit_Raw(&test, 4);
			 //MAV_Send_Debug_Statement_Default();
			 //MAV_Send_Debug_Statement("msgid", msg.msgid); //WARNING: UNCOMMENTING THIS MAY CAUSE SOME OF THE OTHER MESSAGE TO NOT SEND
			 //printf("Received message with ID %d, sequence: %d from component %d of system %d\n", msg.msgid, msg.seq, msg.compid, msg.sysid);
			 // ... DECODE THE MESSAGE PAYLOAD HERE ...
			 switch (msg.msgid)
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MAV_Parse_Data+0xa4>)
 8001430:	7a5a      	ldrb	r2, [r3, #9]
 8001432:	7a99      	ldrb	r1, [r3, #10]
 8001434:	0209      	lsls	r1, r1, #8
 8001436:	430a      	orrs	r2, r1
 8001438:	7adb      	ldrb	r3, [r3, #11]
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	4313      	orrs	r3, r2
 800143e:	2b22      	cmp	r3, #34	; 0x22
 8001440:	d000      	beq.n	8001444 <MAV_Parse_Data+0x4c>
			 		 //set motor speed
			 		 Motor_Set_Speed_All(rc_channels_scaled_msg.chan1_scaled, rc_channels_scaled_msg.chan2_scaled, rc_channels_scaled_msg.chan3_scaled, rc_channels_scaled_msg.chan4_scaled);
			 		 break;
			 	 }
			 }
			 break;
 8001442:	e01f      	b.n	8001484 <MAV_Parse_Data+0x8c>
			 		mavlink_msg_rc_channels_scaled_decode(&msg, &rc_channels_scaled_msg);
 8001444:	4916      	ldr	r1, [pc, #88]	; (80014a0 <MAV_Parse_Data+0xa8>)
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <MAV_Parse_Data+0xa4>)
 8001448:	f7ff ffba 	bl	80013c0 <mavlink_msg_rc_channels_scaled_decode>
			 		 Motor_Arm();
 800144c:	f000 f82a 	bl	80014a4 <Motor_Arm>
			 		 Motor_Set_Speed_All(rc_channels_scaled_msg.chan1_scaled, rc_channels_scaled_msg.chan2_scaled, rc_channels_scaled_msg.chan3_scaled, rc_channels_scaled_msg.chan4_scaled);
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MAV_Parse_Data+0xa8>)
 8001452:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MAV_Parse_Data+0xa8>)
 800145a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800145e:	4619      	mov	r1, r3
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MAV_Parse_Data+0xa8>)
 8001462:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001466:	461a      	mov	r2, r3
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <MAV_Parse_Data+0xa8>)
 800146a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800146e:	f000 f87d 	bl	800156c <Motor_Set_Speed_All>
			 		 break;
 8001472:	bf00      	nop
			 break;
 8001474:	e006      	b.n	8001484 <MAV_Parse_Data+0x8c>
	for(int i=0;i<279;i++)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3301      	adds	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8001482:	ddc6      	ble.n	8001412 <MAV_Parse_Data+0x1a>
	     }
	}
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	79796179 	.word	0x79796179
 8001490:	20000860 	.word	0x20000860
 8001494:	20000030 	.word	0x20000030
 8001498:	20000848 	.word	0x20000848
 800149c:	200005f4 	.word	0x200005f4
 80014a0:	20000830 	.word	0x20000830

080014a4 <Motor_Arm>:

TIM_HandleTypeDef htim4;
uint8_t timChannels[] = {TIM_CHANNEL_1,TIM_CHANNEL_2,TIM_CHANNEL_3,TIM_CHANNEL_4};

void Motor_Arm()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	//ARM PWM Signals
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014aa:	2100      	movs	r1, #0
 80014ac:	480a      	ldr	r0, [pc, #40]	; (80014d8 <Motor_Arm+0x34>)
 80014ae:	f000 fd2b 	bl	8001f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014b2:	2104      	movs	r1, #4
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <Motor_Arm+0x34>)
 80014b6:	f000 fd27 	bl	8001f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80014ba:	2108      	movs	r1, #8
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <Motor_Arm+0x34>)
 80014be:	f000 fd23 	bl	8001f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014c2:	210c      	movs	r1, #12
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <Motor_Arm+0x34>)
 80014c6:	f000 fd1f 	bl	8001f08 <HAL_TIM_PWM_Start>

	uint16_t pulse_width = 7;
 80014ca:	2307      	movs	r3, #7
 80014cc:	80fb      	strh	r3, [r7, #6]
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000520 	.word	0x20000520

080014dc <Motor_Set_Speed_Single>:

void Motor_Set_Speed_Single(uint8_t MotorNum, int16_t speed_scaled)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	4613      	mov	r3, r2
 80014ea:	80bb      	strh	r3, [r7, #4]
	//input: (0 to 1000), this gets converted to between 800 and 1600
	int16_t speed_converted = 8*(speed_scaled/10) + 800;
 80014ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <Motor_Set_Speed_Single+0x84>)
 80014f2:	fb82 1203 	smull	r1, r2, r2, r3
 80014f6:	1092      	asrs	r2, r2, #2
 80014f8:	17db      	asrs	r3, r3, #31
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	3364      	adds	r3, #100	; 0x64
 8001500:	b29b      	uxth	r3, r3
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4a16      	ldr	r2, [pc, #88]	; (8001564 <Motor_Set_Speed_Single+0x88>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d105      	bne.n	800151e <Motor_Set_Speed_Single+0x42>
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <Motor_Set_Speed_Single+0x8c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800151c:	e01a      	b.n	8001554 <Motor_Set_Speed_Single+0x78>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <Motor_Set_Speed_Single+0x88>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d105      	bne.n	8001534 <Motor_Set_Speed_Single+0x58>
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <Motor_Set_Speed_Single+0x8c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001532:	e00f      	b.n	8001554 <Motor_Set_Speed_Single+0x78>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <Motor_Set_Speed_Single+0x88>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	2b08      	cmp	r3, #8
 800153c:	d105      	bne.n	800154a <Motor_Set_Speed_Single+0x6e>
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <Motor_Set_Speed_Single+0x8c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001548:	e004      	b.n	8001554 <Motor_Set_Speed_Single+0x78>
	__HAL_TIM_SET_COMPARE(&htim4, timChannels[MotorNum], speed_converted);
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <Motor_Set_Speed_Single+0x8c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	66666667 	.word	0x66666667
 8001564:	20000000 	.word	0x20000000
 8001568:	20000520 	.word	0x20000520

0800156c <Motor_Set_Speed_All>:

void Motor_Set_Speed_All(int16_t speed_scaled1, int16_t speed_scaled2, int16_t speed_scaled3, int16_t speed_scaled4)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4623      	mov	r3, r4
 800157c:	80fb      	strh	r3, [r7, #6]
 800157e:	4603      	mov	r3, r0
 8001580:	80bb      	strh	r3, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	803b      	strh	r3, [r7, #0]
	Motor_Set_Speed_Single(1, speed_scaled1);
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	4619      	mov	r1, r3
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ffa3 	bl	80014dc <Motor_Set_Speed_Single>
	Motor_Set_Speed_Single(2, speed_scaled2);
 8001596:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159a:	4619      	mov	r1, r3
 800159c:	2002      	movs	r0, #2
 800159e:	f7ff ff9d 	bl	80014dc <Motor_Set_Speed_Single>
	Motor_Set_Speed_Single(3, speed_scaled3);
 80015a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015a6:	4619      	mov	r1, r3
 80015a8:	2003      	movs	r0, #3
 80015aa:	f7ff ff97 	bl	80014dc <Motor_Set_Speed_Single>
	Motor_Set_Speed_Single(4, speed_scaled4);
 80015ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015b2:	4619      	mov	r1, r3
 80015b4:	2004      	movs	r0, #4
 80015b6:	f7ff ff91 	bl	80014dc <Motor_Set_Speed_Single>
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}
	...

080015c4 <Radio_Recieve_Raw>:

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
}
void Radio_Recieve_Raw(uint8_t* messageDestination, int numBytesToRecieve){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive (&huart1,messageDestination, numBytesToRecieve , RADIO_RX_TIMEOUT);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <Radio_Recieve_Raw+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <Radio_Recieve_Raw+0x28>)
 80015da:	f001 f82c 	bl	8002636 <HAL_UART_Receive>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000004 	.word	0x20000004
 80015ec:	200005b4 	.word	0x200005b4

080015f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_MspInit+0x5c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_MspInit+0x5c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x5c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x5c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_MspInit+0x60>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_MspInit+0x60>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000

08001654 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_TIM_PWM_MspInit+0x34>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d10b      	bne.n	800167e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_TIM_PWM_MspInit+0x38>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_TIM_PWM_MspInit+0x38>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_TIM_PWM_MspInit+0x38>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40000800 	.word	0x40000800
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_TIM_MspPostInit+0x5c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d118      	bne.n	80016e2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_TIM_MspPostInit+0x60>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_TIM_MspPostInit+0x60>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_TIM_MspPostInit+0x60>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <HAL_TIM_MspPostInit+0x64>)
 80016de:	f000 fa43 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40000800 	.word	0x40000800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010c00 	.word	0x40010c00

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <HAL_UART_MspInit+0x8c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d131      	bne.n	800177c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_UART_MspInit+0x90>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <HAL_UART_MspInit+0x90>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_UART_MspInit+0x90>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_UART_MspInit+0x90>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_UART_MspInit+0x90>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_UART_MspInit+0x90>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800174c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <HAL_UART_MspInit+0x94>)
 800175e:	f000 fa03 	bl	8001b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <HAL_UART_MspInit+0x94>)
 8001778:	f000 f9f6 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40013800 	.word	0x40013800
 8001788:	40021000 	.word	0x40021000
 800178c:	40010800 	.word	0x40010800

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <HardFault_Handler+0x4>

080017a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <BusFault_Handler+0x4>

080017ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <UsageFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f8a2 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <SystemInit+0x5c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <SystemInit+0x5c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <SystemInit+0x5c>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4911      	ldr	r1, [pc, #68]	; (8001840 <SystemInit+0x5c>)
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <SystemInit+0x60>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <SystemInit+0x5c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <SystemInit+0x5c>)
 8001806:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800180a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <SystemInit+0x5c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SystemInit+0x5c>)
 8001816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <SystemInit+0x5c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <SystemInit+0x5c>)
 8001822:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001826:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SystemInit+0x5c>)
 800182a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800182e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SystemInit+0x64>)
 8001832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001836:	609a      	str	r2, [r3, #8]
#endif 
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000
 8001844:	f8ff0000 	.word	0xf8ff0000
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800184c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800184e:	e003      	b.n	8001858 <LoopCopyDataInit>

08001850 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001852:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001854:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001856:	3104      	adds	r1, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800185c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800185e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001860:	d3f6      	bcc.n	8001850 <CopyDataInit>
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001864:	e002      	b.n	800186c <LoopFillZerobss>

08001866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001868:	f842 3b04 	str.w	r3, [r2], #4

0800186c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800186e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001870:	d3f9      	bcc.n	8001866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001872:	f7ff ffb7 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f001 f8a9 	bl	80029cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7fe fc67 	bl	800014c <main>
  bx lr
 800187e:	4770      	bx	lr
  ldr r3, =_sidata
 8001880:	08003598 	.word	0x08003598
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001888:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 800188c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001890:	2000097c 	.word	0x2000097c

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x28>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x28>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f929 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe9c 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f933 	bl	8001b4e <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 f909 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000008 	.word	0x20000008
 800191c:	20000010 	.word	0x20000010
 8001920:	2000000c 	.word	0x2000000c

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x1c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_IncTick+0x20>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <HAL_IncTick+0x20>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000010 	.word	0x20000010
 8001944:	20000978 	.word	0x20000978

08001948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000978 	.word	0x20000978

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fff0 	bl	8001948 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_Delay+0x40>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffe0 	bl	8001948 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000010 	.word	0x20000010

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff90 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff49 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff5e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffb0 	bl	8001abc <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b08b      	sub	sp, #44	; 0x2c
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e127      	b.n	8001dcc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8116 	bne.w	8001dc6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b12      	cmp	r3, #18
 8001ba0:	d034      	beq.n	8001c0c <HAL_GPIO_Init+0xa4>
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d80d      	bhi.n	8001bc2 <HAL_GPIO_Init+0x5a>
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x9a>
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d804      	bhi.n	8001bb8 <HAL_GPIO_Init+0x50>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d031      	beq.n	8001c16 <HAL_GPIO_Init+0xae>
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d01c      	beq.n	8001bf0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bb6:	e048      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d043      	beq.n	8001c44 <HAL_GPIO_Init+0xdc>
 8001bbc:	2b11      	cmp	r3, #17
 8001bbe:	d01b      	beq.n	8001bf8 <HAL_GPIO_Init+0x90>
          break;
 8001bc0:	e043      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bc2:	4a89      	ldr	r2, [pc, #548]	; (8001de8 <HAL_GPIO_Init+0x280>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d026      	beq.n	8001c16 <HAL_GPIO_Init+0xae>
 8001bc8:	4a87      	ldr	r2, [pc, #540]	; (8001de8 <HAL_GPIO_Init+0x280>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d806      	bhi.n	8001bdc <HAL_GPIO_Init+0x74>
 8001bce:	4a87      	ldr	r2, [pc, #540]	; (8001dec <HAL_GPIO_Init+0x284>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d020      	beq.n	8001c16 <HAL_GPIO_Init+0xae>
 8001bd4:	4a86      	ldr	r2, [pc, #536]	; (8001df0 <HAL_GPIO_Init+0x288>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01d      	beq.n	8001c16 <HAL_GPIO_Init+0xae>
          break;
 8001bda:	e036      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bdc:	4a85      	ldr	r2, [pc, #532]	; (8001df4 <HAL_GPIO_Init+0x28c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0xae>
 8001be2:	4a85      	ldr	r2, [pc, #532]	; (8001df8 <HAL_GPIO_Init+0x290>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d016      	beq.n	8001c16 <HAL_GPIO_Init+0xae>
 8001be8:	4a84      	ldr	r2, [pc, #528]	; (8001dfc <HAL_GPIO_Init+0x294>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0xae>
          break;
 8001bee:	e02c      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e028      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e023      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	3308      	adds	r3, #8
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e01e      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	330c      	adds	r3, #12
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e019      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e012      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	611a      	str	r2, [r3, #16]
          break;
 8001c36:	e008      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	615a      	str	r2, [r3, #20]
          break;
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2bff      	cmp	r3, #255	; 0xff
 8001c4e:	d801      	bhi.n	8001c54 <HAL_GPIO_Init+0xec>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	e001      	b.n	8001c58 <HAL_GPIO_Init+0xf0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d802      	bhi.n	8001c66 <HAL_GPIO_Init+0xfe>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x104>
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	210f      	movs	r1, #15
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	6a39      	ldr	r1, [r7, #32]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 8096 	beq.w	8001dc6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9a:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_GPIO_Init+0x298>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <HAL_GPIO_Init+0x298>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_GPIO_Init+0x298>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb2:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_GPIO_Init+0x29c>)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x2a0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x19e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_GPIO_Init+0x2a4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x19a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a49      	ldr	r2, [pc, #292]	; (8001e10 <HAL_GPIO_Init+0x2a8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x196>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a48      	ldr	r2, [pc, #288]	; (8001e14 <HAL_GPIO_Init+0x2ac>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x192>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x1a0>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x1a0>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x1a0>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x1a0>
 8001d06:	2300      	movs	r3, #0
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d18:	493a      	ldr	r1, [pc, #232]	; (8001e04 <HAL_GPIO_Init+0x29c>)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d32:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4938      	ldr	r1, [pc, #224]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	4933      	ldr	r1, [pc, #204]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	492e      	ldr	r1, [pc, #184]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4929      	ldr	r1, [pc, #164]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4924      	ldr	r1, [pc, #144]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	491f      	ldr	r1, [pc, #124]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	491a      	ldr	r1, [pc, #104]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60cb      	str	r3, [r1, #12]
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4915      	ldr	r1, [pc, #84]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f aed0 	bne.w	8001b7c <HAL_GPIO_Init+0x14>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	372c      	adds	r7, #44	; 0x2c
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	10210000 	.word	0x10210000
 8001dec:	10110000 	.word	0x10110000
 8001df0:	10120000 	.word	0x10120000
 8001df4:	10310000 	.word	0x10310000
 8001df8:	10320000 	.word	0x10320000
 8001dfc:	10220000 	.word	0x10220000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40010c00 	.word	0x40010c00
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40011400 	.word	0x40011400
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000008 	.word	0x20000008

08001e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e64:	f7ff fff2 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e68:	4601      	mov	r1, r0
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08003588 	.word	0x08003588

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e90:	4601      	mov	r1, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08003588 	.word	0x08003588

08001eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e01d      	b.n	8001efe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fbbc 	bl	8001654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f000 f902 	bl	80020f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	6839      	ldr	r1, [r7, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fad6 	bl	80024cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_TIM_PWM_Start+0x60>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d107      	bne.n	8001f3a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d007      	beq.n	8001f5c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40012c00 	.word	0x40012c00

08001f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e0b4      	b.n	80020f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	f200 809f 	bhi.w	80020dc <HAL_TIM_PWM_ConfigChannel+0x170>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fd9 	.word	0x08001fd9
 8001fa8:	080020dd 	.word	0x080020dd
 8001fac:	080020dd 	.word	0x080020dd
 8001fb0:	080020dd 	.word	0x080020dd
 8001fb4:	08002019 	.word	0x08002019
 8001fb8:	080020dd 	.word	0x080020dd
 8001fbc:	080020dd 	.word	0x080020dd
 8001fc0:	080020dd 	.word	0x080020dd
 8001fc4:	0800205b 	.word	0x0800205b
 8001fc8:	080020dd 	.word	0x080020dd
 8001fcc:	080020dd 	.word	0x080020dd
 8001fd0:	080020dd 	.word	0x080020dd
 8001fd4:	0800209b 	.word	0x0800209b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f8ec 	bl	80021bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0208 	orr.w	r2, r2, #8
 8001ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6999      	ldr	r1, [r3, #24]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	619a      	str	r2, [r3, #24]
      break;
 8002016:	e062      	b.n	80020de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f932 	bl	8002288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6999      	ldr	r1, [r3, #24]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	021a      	lsls	r2, r3, #8
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	619a      	str	r2, [r3, #24]
      break;
 8002058:	e041      	b.n	80020de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f97b 	bl	800235c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0208 	orr.w	r2, r2, #8
 8002074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0204 	bic.w	r2, r2, #4
 8002084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69d9      	ldr	r1, [r3, #28]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	61da      	str	r2, [r3, #28]
      break;
 8002098:	e021      	b.n	80020de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 f9c5 	bl	8002430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69d9      	ldr	r1, [r3, #28]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	61da      	str	r2, [r3, #28]
      break;
 80020da:	e000      	b.n	80020de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80020dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <TIM_Base_SetConfig+0xb8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00b      	beq.n	8002128 <TIM_Base_SetConfig+0x30>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d007      	beq.n	8002128 <TIM_Base_SetConfig+0x30>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <TIM_Base_SetConfig+0xbc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0x30>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <TIM_Base_SetConfig+0xc0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d108      	bne.n	800213a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <TIM_Base_SetConfig+0xb8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00b      	beq.n	800215a <TIM_Base_SetConfig+0x62>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d007      	beq.n	800215a <TIM_Base_SetConfig+0x62>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <TIM_Base_SetConfig+0xbc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d003      	beq.n	800215a <TIM_Base_SetConfig+0x62>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <TIM_Base_SetConfig+0xc0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d108      	bne.n	800216c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <TIM_Base_SetConfig+0xb8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d103      	bne.n	80021a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	615a      	str	r2, [r3, #20]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800

080021bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f023 0201 	bic.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f023 0302 	bic.w	r3, r3, #2
 8002204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <TIM_OC1_SetConfig+0xc8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d10c      	bne.n	8002232 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0308 	bic.w	r3, r3, #8
 800221e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a13      	ldr	r2, [pc, #76]	; (8002284 <TIM_OC1_SetConfig+0xc8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d111      	bne.n	800225e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	621a      	str	r2, [r3, #32]
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40012c00 	.word	0x40012c00

08002288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0210 	bic.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0320 	bic.w	r3, r3, #32
 80022d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <TIM_OC2_SetConfig+0xd0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10d      	bne.n	8002304 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <TIM_OC2_SetConfig+0xd0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d113      	bne.n	8002334 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800231a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	621a      	str	r2, [r3, #32]
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40012c00 	.word	0x40012c00

0800235c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <TIM_OC3_SetConfig+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10d      	bne.n	80023d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <TIM_OC3_SetConfig+0xd0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d113      	bne.n	8002406 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	621a      	str	r2, [r3, #32]
}
 8002420:	bf00      	nop
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00

08002430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800245e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800247a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	031b      	lsls	r3, r3, #12
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <TIM_OC4_SetConfig+0x98>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	621a      	str	r2, [r3, #32]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40012c00 	.word	0x40012c00

080024cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2201      	movs	r2, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	401a      	ands	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e032      	b.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002564:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4313      	orrs	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e03f      	b.n	800262e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff f898 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f919 	bl	8002818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b088      	sub	sp, #32
 800263a:	af02      	add	r7, sp, #8
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	f040 8090 	bne.w	8002778 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_UART_Receive+0x2e>
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e088      	b.n	800277a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_UART_Receive+0x40>
 8002672:	2302      	movs	r3, #2
 8002674:	e081      	b.n	800277a <HAL_UART_Receive+0x144>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2222      	movs	r2, #34	; 0x22
 8002688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800268c:	f7ff f95c 	bl	8001948 <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800269e:	e05c      	b.n	800275a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	d12b      	bne.n	8002710 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	2120      	movs	r1, #32
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f85d 	bl	8002782 <UART_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e053      	b.n	800277a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3302      	adds	r3, #2
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	e030      	b.n	800275a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	b29a      	uxth	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3301      	adds	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	e024      	b.n	800275a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	2120      	movs	r1, #32
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f831 	bl	8002782 <UART_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e027      	b.n	800277a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	60ba      	str	r2, [r7, #8]
 800273e:	b2ca      	uxtb	r2, r1
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e00a      	b.n	800275a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d19d      	bne.n	80026a0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002792:	e02c      	b.n	80027ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d028      	beq.n	80027ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80027a2:	f7ff f8d1 	bl	8001948 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d21d      	bcs.n	80027ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e00f      	b.n	800280e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4013      	ands	r3, r2
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	429a      	cmp	r2, r3
 800280a:	d0c3      	beq.n	8002794 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002852:	f023 030c 	bic.w	r3, r3, #12
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	430b      	orrs	r3, r1
 800285e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <UART_SetConfig+0x1ac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d14e      	bne.n	800291e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002880:	f7ff fb02 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8002884:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	4a4a      	ldr	r2, [pc, #296]	; (80029c8 <UART_SetConfig+0x1b0>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	0119      	lsls	r1, r3, #4
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028bc:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <UART_SetConfig+0x1b0>)
 80028be:	fba3 0302 	umull	r0, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2064      	movs	r0, #100	; 0x64
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	3332      	adds	r3, #50	; 0x32
 80028d0:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <UART_SetConfig+0x1b0>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	4419      	add	r1, r3
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f4:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <UART_SetConfig+0x1b0>)
 80028f6:	fba3 0302 	umull	r0, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	3332      	adds	r3, #50	; 0x32
 8002908:	4a2f      	ldr	r2, [pc, #188]	; (80029c8 <UART_SetConfig+0x1b0>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	440a      	add	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800291c:	e04d      	b.n	80029ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800291e:	f7ff fa9f 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 8002922:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009a      	lsls	r2, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <UART_SetConfig+0x1b0>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	0119      	lsls	r1, r3, #4
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009a      	lsls	r2, r3, #2
 800294e:	441a      	add	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	fbb2 f2f3 	udiv	r2, r2, r3
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <UART_SetConfig+0x1b0>)
 800295c:	fba3 0302 	umull	r0, r3, r3, r2
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	2064      	movs	r0, #100	; 0x64
 8002964:	fb00 f303 	mul.w	r3, r0, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	3332      	adds	r3, #50	; 0x32
 800296e:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <UART_SetConfig+0x1b0>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297a:	4419      	add	r1, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <UART_SetConfig+0x1b0>)
 8002994:	fba3 0302 	umull	r0, r3, r3, r2
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	2064      	movs	r0, #100	; 0x64
 800299c:	fb00 f303 	mul.w	r3, r0, r3
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	3332      	adds	r3, #50	; 0x32
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <UART_SetConfig+0x1b0>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	f003 020f 	and.w	r2, r3, #15
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	440a      	add	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40013800 	.word	0x40013800
 80029c8:	51eb851f 	.word	0x51eb851f

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	2500      	movs	r5, #0
 80029d0:	4e0c      	ldr	r6, [pc, #48]	; (8002a04 <__libc_init_array+0x38>)
 80029d2:	4c0d      	ldr	r4, [pc, #52]	; (8002a08 <__libc_init_array+0x3c>)
 80029d4:	1ba4      	subs	r4, r4, r6
 80029d6:	10a4      	asrs	r4, r4, #2
 80029d8:	42a5      	cmp	r5, r4
 80029da:	d109      	bne.n	80029f0 <__libc_init_array+0x24>
 80029dc:	f000 f83c 	bl	8002a58 <_init>
 80029e0:	2500      	movs	r5, #0
 80029e2:	4e0a      	ldr	r6, [pc, #40]	; (8002a0c <__libc_init_array+0x40>)
 80029e4:	4c0a      	ldr	r4, [pc, #40]	; (8002a10 <__libc_init_array+0x44>)
 80029e6:	1ba4      	subs	r4, r4, r6
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	42a5      	cmp	r5, r4
 80029ec:	d105      	bne.n	80029fa <__libc_init_array+0x2e>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029f4:	4798      	blx	r3
 80029f6:	3501      	adds	r5, #1
 80029f8:	e7ee      	b.n	80029d8 <__libc_init_array+0xc>
 80029fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029fe:	4798      	blx	r3
 8002a00:	3501      	adds	r5, #1
 8002a02:	e7f2      	b.n	80029ea <__libc_init_array+0x1e>
 8002a04:	08003590 	.word	0x08003590
 8002a08:	08003590 	.word	0x08003590
 8002a0c:	08003590 	.word	0x08003590
 8002a10:	08003594 	.word	0x08003594

08002a14 <memcmp>:
 8002a14:	b530      	push	{r4, r5, lr}
 8002a16:	2400      	movs	r4, #0
 8002a18:	42a2      	cmp	r2, r4
 8002a1a:	d101      	bne.n	8002a20 <memcmp+0xc>
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	e007      	b.n	8002a30 <memcmp+0x1c>
 8002a20:	5d03      	ldrb	r3, [r0, r4]
 8002a22:	3401      	adds	r4, #1
 8002a24:	190d      	adds	r5, r1, r4
 8002a26:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8002a2a:	42ab      	cmp	r3, r5
 8002a2c:	d0f4      	beq.n	8002a18 <memcmp+0x4>
 8002a2e:	1b58      	subs	r0, r3, r5
 8002a30:	bd30      	pop	{r4, r5, pc}

08002a32 <memcpy>:
 8002a32:	b510      	push	{r4, lr}
 8002a34:	1e43      	subs	r3, r0, #1
 8002a36:	440a      	add	r2, r1
 8002a38:	4291      	cmp	r1, r2
 8002a3a:	d100      	bne.n	8002a3e <memcpy+0xc>
 8002a3c:	bd10      	pop	{r4, pc}
 8002a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a46:	e7f7      	b.n	8002a38 <memcpy+0x6>

08002a48 <memset>:
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4402      	add	r2, r0
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d100      	bne.n	8002a52 <memset+0xa>
 8002a50:	4770      	bx	lr
 8002a52:	f803 1b01 	strb.w	r1, [r3], #1
 8002a56:	e7f9      	b.n	8002a4c <memset+0x4>

08002a58 <_init>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr

08002a64 <_fini>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr
