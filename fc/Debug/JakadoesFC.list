
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003964  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b84  08003b84  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b84  08003b84  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b84  08003b84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000010  08003b9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ac  08003b9c  000214ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff97  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000224e  00000000  00000000  0002ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  00032220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  000331f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008731  00000000  00000000  000340e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000114c0  00000000  00000000  0003c811  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba3a5  00000000  00000000  0004dcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042dc  00000000  00000000  001080f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a58 	.word	0x08003a58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003a58 	.word	0x08003a58

0800014c <I2c_IsDeviceReady>:
I2C_HandleTypeDef hi2c2;
#define I2C_TRIALS_DEFAULT 40
#define I2C_TIMEOUT_DEFAULT 2000

uint8_t I2c_IsDeviceReady(uint8_t Address)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	b29b      	uxth	r3, r3
 800015a:	005b      	lsls	r3, r3, #1
 800015c:	81fb      	strh	r3, [r7, #14]
	//uint16_t devAddress = 0b0000000001110111;
	uint8_t test[2];
	//test[1] = devAddress & 0xff;
	//test[0] = devAddress >>8;
	//Radio_Transmit_Raw(&test, 2);
	return HAL_I2C_IsDeviceReady(&hi2c2, devAddress, I2C_TRIALS_DEFAULT, I2C_TIMEOUT_DEFAULT);
 800015e:	89f9      	ldrh	r1, [r7, #14]
 8000160:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000164:	2228      	movs	r2, #40	; 0x28
 8000166:	4804      	ldr	r0, [pc, #16]	; (8000178 <I2c_IsDeviceReady+0x2c>)
 8000168:	f002 fab8 	bl	80026dc <HAL_I2C_IsDeviceReady>
 800016c:	4603      	mov	r3, r0
}
 800016e:	4618      	mov	r0, r3
 8000170:	3710      	adds	r7, #16
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	2000103c 	.word	0x2000103c

0800017c <I2c_Master_Transmit>:

void I2c_Master_Transmit(uint8_t Address, uint8_t* message, uint16_t messageSize)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af02      	add	r7, sp, #8
 8000182:	4603      	mov	r3, r0
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	71fb      	strb	r3, [r7, #7]
 8000188:	4613      	mov	r3, r2
 800018a:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left once before use (check HAL documentation)
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	b29b      	uxth	r3, r3
 8000190:	005b      	lsls	r3, r3, #1
 8000192:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, devAddress, message, messageSize, I2C_TIMEOUT_DEFAULT);
 8000194:	88ba      	ldrh	r2, [r7, #4]
 8000196:	89f9      	ldrh	r1, [r7, #14]
 8000198:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	4613      	mov	r3, r2
 80001a0:	683a      	ldr	r2, [r7, #0]
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <I2c_Master_Transmit+0x34>)
 80001a4:	f001 ff6e 	bl	8002084 <HAL_I2C_Master_Transmit>
}
 80001a8:	bf00      	nop
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	2000103c 	.word	0x2000103c

080001b4 <I2c_Master_Receive>:

void I2c_Master_Receive(uint8_t Address, uint8_t* messageDestination, uint16_t messageSize)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	4603      	mov	r3, r0
 80001bc:	6039      	str	r1, [r7, #0]
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	005b      	lsls	r3, r3, #1
 80001ca:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Receive(&hi2c2, devAddress, messageDestination, messageSize, I2C_TIMEOUT_DEFAULT);
 80001cc:	88ba      	ldrh	r2, [r7, #4]
 80001ce:	89f9      	ldrh	r1, [r7, #14]
 80001d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	4613      	mov	r3, r2
 80001d8:	683a      	ldr	r2, [r7, #0]
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <I2c_Master_Receive+0x34>)
 80001dc:	f002 f850 	bl	8002280 <HAL_I2C_Master_Receive>
}
 80001e0:	bf00      	nop
 80001e2:	3710      	adds	r7, #16
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	2000103c 	.word	0x2000103c

080001ec <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 80001f2:	f001 fb45 	bl	8001880 <HAL_Init>
	MX_USART1_UART_Init();
 80001f6:	f000 f907 	bl	8000408 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 80001fa:	f000 f889 	bl	8000310 <MX_TIM4_Init>
	MX_I2C2_Init();
 80001fe:	f000 f859 	bl	80002b4 <MX_I2C2_Init>
	MX_GPIO_Init();
 8000202:	f000 f92b 	bl	800045c <MX_GPIO_Init>
	Mpu_Wake();
 8000206:	f001 f8fa 	bl	80013fe <Mpu_Wake>
	//    1  // Component ID (a MAV_COMPONENT value)
	//};
	//Motor_Arm();
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]

	uint8_t payload_test[10] = {1,2,3,4,5,6,7,8,9,10};
 800020a:	4a27      	ldr	r2, [pc, #156]	; (80002a8 <main+0xbc>)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000210:	c303      	stmia	r3!, {r0, r1}
 8000212:	801a      	strh	r2, [r3, #0]
	//uint8_t payload_test[10];
	for (uint8_t i=0; i<10;i++)
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]
 8000218:	e00b      	b.n	8000232 <main+0x46>
	{
		payload_test[i] = i+1;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	7bfa      	ldrb	r2, [r7, #15]
 800021e:	3201      	adds	r2, #1
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	f107 0110 	add.w	r1, r7, #16
 8000226:	440b      	add	r3, r1
 8000228:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i=0; i<10;i++)
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	3301      	adds	r3, #1
 8000230:	73fb      	strb	r3, [r7, #15]
 8000232:	7bfb      	ldrb	r3, [r7, #15]
 8000234:	2b09      	cmp	r3, #9
 8000236:	d9f0      	bls.n	800021a <main+0x2e>
	}
	//uint8_t test[5] = {0x55, 0x55, 0x55, 0x55, 0x55};
	//uint8_t baro_flag = 5;
	cam_photo_rx_buffer[10] = 0x44;
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <main+0xc0>)
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	729a      	strb	r2, [r3, #10]
	cam_photo_rx_buffer[11] = 0x55;
 800023e:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <main+0xc0>)
 8000240:	2255      	movs	r2, #85	; 0x55
 8000242:	72da      	strb	r2, [r3, #11]
	cam_photo_rx_buffer[12] = 0x66;
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <main+0xc0>)
 8000246:	2266      	movs	r2, #102	; 0x66
 8000248:	731a      	strb	r2, [r3, #12]
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	2108      	movs	r1, #8
 800024e:	4818      	ldr	r0, [pc, #96]	; (80002b0 <main+0xc4>)
 8000250:	f001 fdd8 	bl	8001e04 <HAL_GPIO_WritePin>
		//uint8_t mpu_status = Mpu_Is_Ready();
		//Radio_Transmit_Raw(&mpu_status, 1);
		//****start of MPU test code****
		//uint8_t mpu_status = Mpu_Is_Ready();
		//Radio_Transmit_Raw(&mpu_status, 1);
		if(Mpu_Is_Ready() == HAL_OK)
 8000254:	f001 f8c6 	bl	80013e4 <Mpu_Is_Ready>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d11f      	bne.n	800029e <main+0xb2>
		{
			Mpu_Get_Acc_Data(MPU_AXIS_X);
 800025e:	2000      	movs	r0, #0
 8000260:	f001 f910 	bl	8001484 <Mpu_Get_Acc_Data>
			HAL_Delay(5);
 8000264:	2005      	movs	r0, #5
 8000266:	f001 fb6d 	bl	8001944 <HAL_Delay>
			Mpu_Get_Acc_Data(MPU_AXIS_Y);
 800026a:	2001      	movs	r0, #1
 800026c:	f001 f90a 	bl	8001484 <Mpu_Get_Acc_Data>
			HAL_Delay(5);
 8000270:	2005      	movs	r0, #5
 8000272:	f001 fb67 	bl	8001944 <HAL_Delay>
			Mpu_Get_Acc_Data(MPU_AXIS_Z);
 8000276:	2002      	movs	r0, #2
 8000278:	f001 f904 	bl	8001484 <Mpu_Get_Acc_Data>
			HAL_Delay(5);
 800027c:	2005      	movs	r0, #5
 800027e:	f001 fb61 	bl	8001944 <HAL_Delay>
			Mpu_Get_Gyro_Data(MPU_AXIS_X);
 8000282:	2000      	movs	r0, #0
 8000284:	f001 f8d8 	bl	8001438 <Mpu_Get_Gyro_Data>
			HAL_Delay(5);
 8000288:	2005      	movs	r0, #5
 800028a:	f001 fb5b 	bl	8001944 <HAL_Delay>
			Mpu_Get_Gyro_Data(MPU_AXIS_Y);
 800028e:	2001      	movs	r0, #1
 8000290:	f001 f8d2 	bl	8001438 <Mpu_Get_Gyro_Data>
			HAL_Delay(5);
 8000294:	2005      	movs	r0, #5
 8000296:	f001 fb55 	bl	8001944 <HAL_Delay>
			//Mpu_Get_Gyro_Data(MPU_AXIS_Z);
			//uint8_t buff[2];
			//Helper_Int16arr_To_Int8arr(&mpu_acc, 1, &buff);
			//Radio_Transmit_Raw(&buff, 2);
			//HAL_Delay(200);
			MAV_Send_Raw_Imu();
 800029a:	f001 f823 	bl	80012e4 <MAV_Send_Raw_Imu>
		}

		HAL_Delay(50);
 800029e:	2032      	movs	r0, #50	; 0x32
 80002a0:	f001 fb50 	bl	8001944 <HAL_Delay>
		if(Mpu_Is_Ready() == HAL_OK)
 80002a4:	e7d6      	b.n	8000254 <main+0x68>
 80002a6:	bf00      	nop
 80002a8:	08003a70 	.word	0x08003a70
 80002ac:	2000002c 	.word	0x2000002c
 80002b0:	40010c00 	.word	0x40010c00

080002b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_I2C2_Init+0x50>)
 80002ba:	4a13      	ldr	r2, [pc, #76]	; (8000308 <MX_I2C2_Init+0x54>)
 80002bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_I2C2_Init+0x50>)
 80002c0:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_I2C2_Init+0x58>)
 80002c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_I2C2_Init+0x50>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_I2C2_Init+0x50>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_I2C2_Init+0x50>)
 80002d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <MX_I2C2_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_I2C2_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <MX_I2C2_Init+0x50>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_I2C2_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_I2C2_Init+0x50>)
 80002f2:	f001 fd9f 	bl	8001e34 <HAL_I2C_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002fc:	f000 f900 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000103c 	.word	0x2000103c
 8000308:	40005800 	.word	0x40005800
 800030c:	000186a0 	.word	0x000186a0

08000310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000316:	f107 0320 	add.w	r3, r7, #32
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
 800032e:	615a      	str	r2, [r3, #20]
 8000330:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000332:	4b33      	ldr	r3, [pc, #204]	; (8000400 <MX_TIM4_Init+0xf0>)
 8000334:	4a33      	ldr	r2, [pc, #204]	; (8000404 <MX_TIM4_Init+0xf4>)
 8000336:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000338:	4b31      	ldr	r3, [pc, #196]	; (8000400 <MX_TIM4_Init+0xf0>)
 800033a:	220a      	movs	r2, #10
 800033c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033e:	4b30      	ldr	r3, [pc, #192]	; (8000400 <MX_TIM4_Init+0xf0>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 8000344:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <MX_TIM4_Init+0xf0>)
 8000346:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800034a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034c:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <MX_TIM4_Init+0xf0>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <MX_TIM4_Init+0xf0>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000358:	4829      	ldr	r0, [pc, #164]	; (8000400 <MX_TIM4_Init+0xf0>)
 800035a:	f002 fe1b 	bl	8002f94 <HAL_TIM_PWM_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000364:	f000 f8cc 	bl	8000500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036c:	2300      	movs	r3, #0
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000370:	f107 0320 	add.w	r3, r7, #32
 8000374:	4619      	mov	r1, r3
 8000376:	4822      	ldr	r0, [pc, #136]	; (8000400 <MX_TIM4_Init+0xf0>)
 8000378:	f003 f8e8 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000382:	f000 f8bd 	bl	8000500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000386:	2360      	movs	r3, #96	; 0x60
 8000388:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 800038a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800038e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <MX_TIM4_Init+0xf0>)
 80003a0:	f002 fe24 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80003aa:	f000 f8a9 	bl	8000500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2204      	movs	r2, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4812      	ldr	r0, [pc, #72]	; (8000400 <MX_TIM4_Init+0xf0>)
 80003b6:	f002 fe19 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80003c0:	f000 f89e 	bl	8000500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2208      	movs	r2, #8
 80003c8:	4619      	mov	r1, r3
 80003ca:	480d      	ldr	r0, [pc, #52]	; (8000400 <MX_TIM4_Init+0xf0>)
 80003cc:	f002 fe0e 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80003d6:	f000 f893 	bl	8000500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	220c      	movs	r2, #12
 80003de:	4619      	mov	r1, r3
 80003e0:	4807      	ldr	r0, [pc, #28]	; (8000400 <MX_TIM4_Init+0xf0>)
 80003e2:	f002 fe03 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80003ec:	f000 f888 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80003f0:	4803      	ldr	r0, [pc, #12]	; (8000400 <MX_TIM4_Init+0xf0>)
 80003f2:	f001 f941 	bl	8001678 <HAL_TIM_MspPostInit>

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	; 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200010a4 	.word	0x200010a4
 8000404:	40000800 	.word	0x40000800

08000408 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <MX_USART1_UART_Init+0x50>)
 8000410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2*57600;
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000440:	f003 f8c8 	bl	80035d4 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044a:	f000 f859 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200010e4 	.word	0x200010e4
 8000458:	40013800 	.word	0x40013800

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0308 	add.w	r3, r7, #8
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <MX_GPIO_Init+0x98>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <MX_GPIO_Init+0x98>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <MX_GPIO_Init+0x98>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000488:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_GPIO_Init+0x98>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a19      	ldr	r2, [pc, #100]	; (80004f4 <MX_GPIO_Init+0x98>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <MX_GPIO_Init+0x98>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0308 	and.w	r3, r3, #8
 800049c:	603b      	str	r3, [r7, #0]
 800049e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	4814      	ldr	r0, [pc, #80]	; (80004f8 <MX_GPIO_Init+0x9c>)
 80004a6:	f001 fcad 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2108      	movs	r1, #8
 80004ae:	4813      	ldr	r0, [pc, #76]	; (80004fc <MX_GPIO_Init+0xa0>)
 80004b0:	f001 fca8 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2302      	movs	r3, #2
 80004c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	4619      	mov	r1, r3
 80004ca:	480b      	ldr	r0, [pc, #44]	; (80004f8 <MX_GPIO_Init+0x9c>)
 80004cc:	f001 fb40 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004d0:	2308      	movs	r3, #8
 80004d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4619      	mov	r1, r3
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_GPIO_Init+0xa0>)
 80004e8:	f001 fb32 	bl	8001b50 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800
 80004fc:	40010c00 	.word	0x40010c00

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4053      	eors	r3, r2
 8000522:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	011b      	lsls	r3, r3, #4
 8000528:	b25a      	sxtb	r2, r3
 800052a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800052e:	4053      	eors	r3, r2
 8000530:	b25b      	sxtb	r3, r3
 8000532:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	b29b      	uxth	r3, r3
 800053c:	b21a      	sxth	r2, r3
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	b21b      	sxth	r3, r3
 8000544:	4053      	eors	r3, r2
 8000546:	b21a      	sxth	r2, r3
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	00db      	lsls	r3, r3, #3
 800054c:	b21b      	sxth	r3, r3
 800054e:	4053      	eors	r3, r2
 8000550:	b21a      	sxth	r2, r3
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	091b      	lsrs	r3, r3, #4
 8000556:	b2db      	uxtb	r3, r3
 8000558:	b21b      	sxth	r3, r3
 800055a:	4053      	eors	r3, r2
 800055c:	b21b      	sxth	r3, r3
 800055e:	b29a      	uxth	r2, r3
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	801a      	strh	r2, [r3, #0]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057c:	801a      	strh	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000594:	f107 030e 	add.w	r3, r7, #14
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffe8 	bl	800056e <crc_init>
	while (length--) {
 800059e:	e009      	b.n	80005b4 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f107 020e 	add.w	r2, r7, #14
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffac 	bl	800050c <crc_accumulate>
	while (length--) {
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	807a      	strh	r2, [r7, #2]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f0      	bne.n	80005a0 <crc_calculate+0x18>
        }
        return crcTmp;
 80005be:	89fb      	ldrh	r3, [r7, #14]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	4613      	mov	r3, r2
 80005d4:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	617b      	str	r3, [r7, #20]
	while (length--) {
 80005da:	e007      	b.n	80005ec <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	617a      	str	r2, [r7, #20]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	68f9      	ldr	r1, [r7, #12]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff90 	bl	800050c <crc_accumulate>
	while (length--) {
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	80fa      	strh	r2, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f2      	bne.n	80005dc <crc_accumulate_buffer+0x14>
        }
}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <mavlink_sha256_init+0x50>)
 8000618:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <mavlink_sha256_init+0x54>)
 800061e:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <mavlink_sha256_init+0x58>)
 8000624:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <mavlink_sha256_init+0x5c>)
 800062a:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <mavlink_sha256_init+0x60>)
 8000630:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <mavlink_sha256_init+0x64>)
 8000636:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <mavlink_sha256_init+0x68>)
 800063c:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <mavlink_sha256_init+0x6c>)
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	6a09e667 	.word	0x6a09e667
 8000654:	bb67ae85 	.word	0xbb67ae85
 8000658:	3c6ef372 	.word	0x3c6ef372
 800065c:	a54ff53a 	.word	0xa54ff53a
 8000660:	510e527f 	.word	0x510e527f
 8000664:	9b05688c 	.word	0x9b05688c
 8000668:	1f83d9ab 	.word	0x1f83d9ab
 800066c:	5be0cd19 	.word	0x5be0cd19

08000670 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000670:	b480      	push	{r7}
 8000672:	b0cf      	sub	sp, #316	; 0x13c
 8000674:	af00      	add	r7, sp, #0
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	6018      	str	r0, [r3, #0]
 800067a:	463b      	mov	r3, r7
 800067c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006d4:	e011      	b.n	80006fa <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 80006d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	463a      	mov	r2, r7
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80006ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80006f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006f4:	3301      	adds	r3, #1
 80006f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	dde9      	ble.n	80006d6 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 8000702:	2310      	movs	r3, #16
 8000704:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000708:	e057      	b.n	80007ba <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800070a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800070e:	1e9a      	subs	r2, r3, #2
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000718:	ea4f 4273 	mov.w	r2, r3, ror #17
 800071c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000720:	1e99      	subs	r1, r3, #2
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800072a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800072e:	405a      	eors	r2, r3
 8000730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000734:	1e99      	subs	r1, r3, #2
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800073e:	0a9b      	lsrs	r3, r3, #10
 8000740:	405a      	eors	r2, r3
 8000742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000746:	1fd9      	subs	r1, r3, #7
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000750:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000756:	f1a3 010f 	sub.w	r1, r3, #15
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000762:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800076a:	f1a3 000f 	sub.w	r0, r3, #15
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000776:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800077a:	4059      	eors	r1, r3
 800077c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000780:	f1a3 000f 	sub.w	r0, r3, #15
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000790:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000796:	f1a3 0110 	sub.w	r1, r3, #16
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007a2:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80007ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80007b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b4:	3301      	adds	r3, #1
 80007b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007be:	2b3f      	cmp	r3, #63	; 0x3f
 80007c0:	dda3      	ble.n	800070a <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007c8:	e076      	b.n	80008b8 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80007ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007ce:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80007d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007d6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80007da:	405a      	eors	r2, r3
 80007dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007e0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80007e4:	405a      	eors	r2, r3
 80007e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007ea:	441a      	add	r2, r3
 80007ec:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80007f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007f4:	4019      	ands	r1, r3
 80007f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007fa:	43d8      	mvns	r0, r3
 80007fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000800:	4003      	ands	r3, r0
 8000802:	404b      	eors	r3, r1
 8000804:	441a      	add	r2, r3
 8000806:	4955      	ldr	r1, [pc, #340]	; (800095c <mavlink_sha256_calc+0x2ec>)
 8000808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800080c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000810:	441a      	add	r2, r3
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800081a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800081e:	4413      	add	r3, r2
 8000820:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000824:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000828:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800082c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000830:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000834:	405a      	eors	r2, r3
 8000836:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800083a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800083e:	405a      	eors	r2, r3
 8000840:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000848:	4059      	eors	r1, r3
 800084a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800084e:	4019      	ands	r1, r3
 8000850:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000858:	4003      	ands	r3, r0
 800085a:	404b      	eors	r3, r1
 800085c:	4413      	add	r3, r2
 800085e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000862:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000866:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800086a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800086e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000872:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000876:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800087a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800087e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000882:	4413      	add	r3, r2
 8000884:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800088c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000890:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000898:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800089c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80008a0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80008a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008a8:	4413      	add	r3, r2
 80008aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80008ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008b2:	3301      	adds	r3, #1
 80008b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008bc:	2b3f      	cmp	r3, #63	; 0x3f
 80008be:	dd84      	ble.n	80007ca <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008ca:	441a      	add	r2, r3
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	609a      	str	r2, [r3, #8]
    B += BB;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80008dc:	441a      	add	r2, r3
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	60da      	str	r2, [r3, #12]
    C += CC;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	691a      	ldr	r2, [r3, #16]
 80008ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008ee:	441a      	add	r2, r3
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	611a      	str	r2, [r3, #16]
    D += DD;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000900:	441a      	add	r2, r3
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	615a      	str	r2, [r3, #20]
    E += EE;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000912:	441a      	add	r2, r3
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	619a      	str	r2, [r3, #24]
    F += FF;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69da      	ldr	r2, [r3, #28]
 8000920:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000924:	441a      	add	r2, r3
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	61da      	str	r2, [r3, #28]
    G += GG;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6a1a      	ldr	r2, [r3, #32]
 8000932:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000936:	441a      	add	r2, r3
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	621a      	str	r2, [r3, #32]
    H += HH;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000944:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000948:	441a      	add	r2, r3
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000950:	bf00      	nop
 8000952:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	08003a7c 	.word	0x08003a7c

08000960 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	; 0x70
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	441a      	add	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800098a:	429a      	cmp	r2, r3
 800098c:	d904      	bls.n	8000998 <mavlink_sha256_update+0x38>
	++m->sz[1];
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800099a:	08db      	lsrs	r3, r3, #3
 800099c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009a0:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80009a2:	e054      	b.n	8000a4e <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 80009a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009a6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80009aa:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d201      	bcs.n	80009b8 <mavlink_sha256_update+0x58>
            l = len;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80009be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c0:	4413      	add	r3, r2
 80009c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 f832 	bl	8003a30 <memcpy>
	offset += l;
 80009cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80009ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009d0:	4413      	add	r3, r2
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 80009d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80009d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009d8:	4413      	add	r3, r2
 80009da:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80009e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e6:	2b40      	cmp	r3, #64	; 0x40
 80009e8:	d131      	bne.n	8000a4e <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3328      	adds	r3, #40	; 0x28
 80009ee:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80009f0:	2300      	movs	r3, #0
 80009f2:	663b      	str	r3, [r7, #96]	; 0x60
 80009f4:	e020      	b.n	8000a38 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80009f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009fc:	4413      	add	r3, r2
 80009fe:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000a00:	f107 0210 	add.w	r2, r7, #16
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a0e:	78da      	ldrb	r2, [r3, #3]
 8000a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a12:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a16:	3301      	adds	r3, #1
 8000a18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a1a:	7892      	ldrb	r2, [r2, #2]
 8000a1c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a20:	3302      	adds	r3, #2
 8000a22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a24:	7852      	ldrb	r2, [r2, #1]
 8000a26:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a2a:	3303      	adds	r3, #3
 8000a2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a34:	3301      	adds	r3, #1
 8000a36:	663b      	str	r3, [r7, #96]	; 0x60
 8000a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	dddb      	ble.n	80009f6 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff fe13 	bl	8000670 <mavlink_sha256_calc>
	    offset = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1a7      	bne.n	80009a4 <mavlink_sha256_update+0x44>
	}
    }
}
 8000a54:	bf00      	nop
 8000a56:	3770      	adds	r7, #112	; 0x70
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b098      	sub	sp, #96	; 0x60
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a70:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a74:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3308      	adds	r3, #8
 8000a84:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3301      	adds	r3, #1
 8000a90:	2247      	movs	r2, #71	; 0x47
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 ffd6 	bl	8003a46 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aa0:	3307      	adds	r3, #7
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aa8:	440b      	add	r3, r1
 8000aaa:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	0a1a      	lsrs	r2, r3, #8
 8000ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ab6:	3306      	adds	r3, #6
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000abe:	440b      	add	r3, r1
 8000ac0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	0c1a      	lsrs	r2, r3, #16
 8000aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000acc:	3305      	adds	r3, #5
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ad4:	440b      	add	r3, r1
 8000ad6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	0e1a      	lsrs	r2, r3, #24
 8000ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aea:	440b      	add	r3, r1
 8000aec:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000af6:	3303      	adds	r3, #3
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000afe:	440b      	add	r3, r1
 8000b00:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	0a1a      	lsrs	r2, r3, #8
 8000b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b14:	440b      	add	r3, r1
 8000b16:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	0c1a      	lsrs	r2, r3, #16
 8000b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	0e1b      	lsrs	r3, r3, #24
 8000b36:	b2d9      	uxtb	r1, r3
 8000b38:	f107 020c 	add.w	r2, r7, #12
 8000b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b3e:	4413      	add	r3, r2
 8000b40:	460a      	mov	r2, r1
 8000b42:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b46:	f103 0208 	add.w	r2, r3, #8
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff05 	bl	8000960 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b58:	78da      	ldrb	r2, [r3, #3]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b64:	7892      	ldrb	r2, [r2, #2]
 8000b66:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b6e:	7852      	ldrb	r2, [r2, #1]
 8000b70:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3303      	adds	r3, #3
 8000b76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3304      	adds	r3, #4
 8000b80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b82:	79d2      	ldrb	r2, [r2, #7]
 8000b84:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	3305      	adds	r3, #5
 8000b8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b8c:	7992      	ldrb	r2, [r2, #6]
 8000b8e:	701a      	strb	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	3760      	adds	r7, #96	; 0x60
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <mavlink_get_channel_status+0x24>)
 8000bae:	4413      	add	r3, r2
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000fcc 	.word	0x20000fcc

08000bc0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b0a1      	sub	sp, #132	; 0x84
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <mavlink_sign_packet+0x20>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <mavlink_sign_packet+0x24>
	    return 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e051      	b.n	8000c88 <mavlink_sign_packet+0xc8>
	}
	signature[0] = signing->link_id;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	785a      	ldrb	r2, [r3, #1]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f103 0408 	add.w	r4, r3, #8
 8000bf2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000bf6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f107 0110 	add.w	r1, r7, #16
 8000c02:	2206      	movs	r2, #6
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 ff13 	bl	8003a30 <memcpy>
	signing->timestamp++;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000c10:	1c4b      	adds	r3, r1, #1
 8000c12:	f142 0400 	adc.w	r4, r2, #0
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fced 	bl	8000600 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f103 0110 	add.w	r1, r3, #16
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	2220      	movs	r2, #32
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe94 	bl	8000960 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000c38:	78fa      	ldrb	r2, [r7, #3]
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe8d 	bl	8000960 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000c46:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe84 	bl	8000960 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fe7c 	bl	8000960 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fe75 	bl	8000960 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1dda      	adds	r2, r3, #7
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff feeb 	bl	8000a5c <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000c86:	230d      	movs	r3, #13
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3784      	adds	r7, #132	; 0x84
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd90      	pop	{r4, r7, pc}

08000c90 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c9c:	e002      	b.n	8000ca4 <_mav_trim_payload+0x14>
		length--;
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d906      	bls.n	8000cb8 <_mav_trim_payload+0x28>
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0f2      	beq.n	8000c9e <_mav_trim_payload+0xe>
	}
	return length;
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	b08f      	sub	sp, #60	; 0x3c
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	72fb      	strb	r3, [r7, #11]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7b1b      	ldrb	r3, [r3, #12]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000cea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00c      	beq.n	8000d12 <mavlink_finalize_message_buffer+0x4e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <mavlink_finalize_message_buffer+0x4e>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <mavlink_finalize_message_buffer+0x4e>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <mavlink_finalize_message_buffer+0x50>
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000d18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8000d24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <mavlink_finalize_message_buffer+0x6c>
 8000d2c:	230d      	movs	r3, #13
 8000d2e:	e000      	b.n	8000d32 <mavlink_finalize_message_buffer+0x6e>
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8000d36:	230a      	movs	r3, #10
 8000d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8000d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	22fe      	movs	r2, #254	; 0xfe
 8000d48:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d50:	e002      	b.n	8000d58 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	22fd      	movs	r2, #253	; 0xfd
 8000d56:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000d58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10a      	bne.n	8000d76 <mavlink_finalize_message_buffer+0xb2>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	330c      	adds	r3, #12
 8000d64:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff90 	bl	8000c90 <_mav_trim_payload>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	e001      	b.n	8000d7a <mavlink_finalize_message_buffer+0xb6>
 8000d76:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	7afa      	ldrb	r2, [r7, #11]
 8000d82:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	7aba      	ldrb	r2, [r7, #10]
 8000d88:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8000d90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	791b      	ldrb	r3, [r3, #4]
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2200      	movs	r2, #0
 8000daa:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	799a      	ldrb	r2, [r3, #6]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	78db      	ldrb	r3, [r3, #3]
 8000dca:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8000dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d013      	beq.n	8000dfc <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	799b      	ldrb	r3, [r3, #6]
 8000dd8:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	79db      	ldrb	r3, [r3, #7]
 8000dde:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	7a1b      	ldrb	r3, [r3, #8]
 8000de4:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	7a5a      	ldrb	r2, [r3, #9]
 8000dea:	7a99      	ldrb	r1, [r3, #10]
 8000dec:	0209      	lsls	r1, r1, #8
 8000dee:	430a      	orrs	r2, r1
 8000df0:	7adb      	ldrb	r3, [r3, #11]
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	777b      	strb	r3, [r7, #29]
 8000dfa:	e030      	b.n	8000e5e <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	791b      	ldrb	r3, [r3, #4]
 8000e00:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	795b      	ldrb	r3, [r3, #5]
 8000e06:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	799b      	ldrb	r3, [r3, #6]
 8000e0c:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	79db      	ldrb	r3, [r3, #7]
 8000e12:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	7a1b      	ldrb	r3, [r3, #8]
 8000e18:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	7a5a      	ldrb	r2, [r3, #9]
 8000e1e:	7a99      	ldrb	r1, [r3, #10]
 8000e20:	0209      	lsls	r1, r1, #8
 8000e22:	430a      	orrs	r2, r1
 8000e24:	7adb      	ldrb	r3, [r3, #11]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	7a5a      	ldrb	r2, [r3, #9]
 8000e32:	7a99      	ldrb	r1, [r3, #10]
 8000e34:	0209      	lsls	r1, r1, #8
 8000e36:	430a      	orrs	r2, r1
 8000e38:	7adb      	ldrb	r3, [r3, #11]
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	7a5a      	ldrb	r2, [r3, #9]
 8000e4a:	7a99      	ldrb	r1, [r3, #10]
 8000e4c:	0209      	lsls	r1, r1, #8
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	7adb      	ldrb	r3, [r3, #11]
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	4313      	orrs	r3, r2
 8000e56:	141b      	asrs	r3, r3, #16
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8000e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb89 	bl	8000588 <crc_calculate>
 8000e76:	4603      	mov	r3, r0
 8000e78:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f103 010c 	add.w	r1, r3, #12
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f107 0316 	add.w	r3, r7, #22
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb9c 	bl	80005c8 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8000e90:	f107 0216 	add.w	r2, r7, #22
 8000e94:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fb36 	bl	800050c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000ea0:	8af9      	ldrh	r1, [r7, #22]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	330c      	adds	r3, #12
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	78d2      	ldrb	r2, [r2, #3]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2ca      	uxtb	r2, r1
 8000eae:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f103 020c 	add.w	r2, r3, #12
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	78db      	ldrb	r3, [r3, #3]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b2ca      	uxtb	r2, r1
 8000ec6:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8000ec8:	8afa      	ldrh	r2, [r7, #22]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8000ece:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d01a      	beq.n	8000f0c <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000ee8:	68f9      	ldr	r1, [r7, #12]
 8000eea:	310c      	adds	r1, #12
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8000ef0:	4401      	add	r1, r0
 8000ef2:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000ef6:	f107 0018 	add.w	r0, r7, #24
 8000efa:	9102      	str	r1, [sp, #8]
 8000efc:	9201      	str	r2, [sp, #4]
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4633      	mov	r3, r6
 8000f02:	4602      	mov	r2, r0
 8000f04:	4629      	mov	r1, r5
 8000f06:	4620      	mov	r0, r4
 8000f08:	f7ff fe5a 	bl	8000bc0 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3302      	adds	r3, #2
 8000f28:	b29b      	uxth	r3, r3
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	372c      	adds	r7, #44	; 0x2c
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f32 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b088      	sub	sp, #32
 8000f36:	af04      	add	r7, sp, #16
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4603      	mov	r3, r0
 8000f42:	70fb      	strb	r3, [r7, #3]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70bb      	strb	r3, [r7, #2]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000f4c:	787b      	ldrb	r3, [r7, #1]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fe22 	bl	8000b98 <mavlink_get_channel_status>
 8000f54:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	78f9      	ldrb	r1, [r7, #3]
 8000f5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	7f3b      	ldrb	r3, [r7, #28]
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	7e3b      	ldrb	r3, [r7, #24]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff feaa 	bl	8000cc4 <mavlink_finalize_message_buffer>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af04      	add	r7, sp, #16
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70bb      	strb	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8000f94:	78ba      	ldrb	r2, [r7, #2]
 8000f96:	78f9      	ldrb	r1, [r7, #3]
 8000f98:	7d3b      	ldrb	r3, [r7, #20]
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	7c3b      	ldrb	r3, [r7, #16]
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffc3 	bl	8000f32 <mavlink_finalize_message_chan>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	78db      	ldrb	r3, [r3, #3]
 8000fc4:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	2bfe      	cmp	r3, #254	; 0xfe
 8000fcc:	d13a      	bne.n	8001044 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	789a      	ldrb	r2, [r3, #2]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	7992      	ldrb	r2, [r2, #6]
 8000fee:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3303      	adds	r3, #3
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	79d2      	ldrb	r2, [r2, #7]
 8000ff8:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	7a12      	ldrb	r2, [r2, #8]
 8001002:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	7a5a      	ldrb	r2, [r3, #9]
 8001008:	7a99      	ldrb	r1, [r3, #10]
 800100a:	0209      	lsls	r1, r1, #8
 800100c:	430a      	orrs	r2, r1
 800100e:	7adb      	ldrb	r3, [r3, #11]
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	4313      	orrs	r3, r2
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3305      	adds	r3, #5
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	1d98      	adds	r0, r3, #6
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f103 010c 	add.w	r1, r3, #12
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	461a      	mov	r2, r3
 800102e:	f002 fcff 	bl	8003a30 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	78d2      	ldrb	r2, [r2, #3]
 8001038:	4413      	add	r3, r2
 800103a:	3301      	adds	r3, #1
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e06c      	b.n	800111e <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	330c      	adds	r3, #12
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe1f 	bl	8000c90 <_mav_trim_payload>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001056:	2309      	movs	r3, #9
 8001058:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	789a      	ldrb	r2, [r3, #2]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3301      	adds	r3, #1
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3302      	adds	r3, #2
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	7912      	ldrb	r2, [r2, #4]
 8001072:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3303      	adds	r3, #3
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	7952      	ldrb	r2, [r2, #5]
 800107c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3304      	adds	r3, #4
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	7992      	ldrb	r2, [r2, #6]
 8001086:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3305      	adds	r3, #5
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	79d2      	ldrb	r2, [r2, #7]
 8001090:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3306      	adds	r3, #6
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	7a12      	ldrb	r2, [r2, #8]
 800109a:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	7a5a      	ldrb	r2, [r3, #9]
 80010a0:	7a99      	ldrb	r1, [r3, #10]
 80010a2:	0209      	lsls	r1, r1, #8
 80010a4:	430a      	orrs	r2, r1
 80010a6:	7adb      	ldrb	r3, [r3, #11]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	4313      	orrs	r3, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3307      	adds	r3, #7
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	7a5a      	ldrb	r2, [r3, #9]
 80010ba:	7a99      	ldrb	r1, [r3, #10]
 80010bc:	0209      	lsls	r1, r1, #8
 80010be:	430a      	orrs	r2, r1
 80010c0:	7adb      	ldrb	r3, [r3, #11]
 80010c2:	041b      	lsls	r3, r3, #16
 80010c4:	4313      	orrs	r3, r2
 80010c6:	121a      	asrs	r2, r3, #8
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3308      	adds	r3, #8
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	7a5a      	ldrb	r2, [r3, #9]
 80010d4:	7a99      	ldrb	r1, [r3, #10]
 80010d6:	0209      	lsls	r1, r1, #8
 80010d8:	430a      	orrs	r2, r1
 80010da:	7adb      	ldrb	r3, [r3, #11]
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	4313      	orrs	r3, r2
 80010e0:	141a      	asrs	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3309      	adds	r3, #9
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f103 000a 	add.w	r0, r3, #10
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	330c      	adds	r3, #12
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	4619      	mov	r1, r3
 80010f8:	f002 fc9a 	bl	8003a30 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80010fc:	7dba      	ldrb	r2, [r7, #22]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4413      	add	r3, r2
 8001102:	3301      	adds	r3, #1
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	791b      	ldrb	r3, [r3, #4]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <mavlink_msg_to_send_buffer+0x164>
 8001116:	230d      	movs	r3, #13
 8001118:	e000      	b.n	800111c <mavlink_msg_to_send_buffer+0x166>
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	b2da      	uxtb	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	b29a      	uxth	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	3301      	adds	r3, #1
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1c98      	adds	r0, r3, #2
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800114c:	7dfa      	ldrb	r2, [r7, #23]
 800114e:	4619      	mov	r1, r3
 8001150:	f002 fc6e 	bl	8003a30 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	b29a      	uxth	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29a      	uxth	r2, r3
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	b29b      	uxth	r3, r3
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	3303      	adds	r3, #3
 800116a:	b29b      	uxth	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <mavlink_msg_raw_imu_pack>:
 * @param temperature [cdegC] Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag, uint8_t id, int16_t temperature)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b08d      	sub	sp, #52	; 0x34
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	603a      	str	r2, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	460b      	mov	r3, r1
 8001182:	71bb      	strb	r3, [r7, #6]
    _mav_put_int16_t(buf, 27, temperature);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RAW_IMU_LEN);
#else
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
 8001184:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001188:	e9c7 3402 	strd	r3, r4, [r7, #8]
    packet.xacc = xacc;
 800118c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001190:	823b      	strh	r3, [r7, #16]
    packet.yacc = yacc;
 8001192:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001196:	827b      	strh	r3, [r7, #18]
    packet.zacc = zacc;
 8001198:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800119c:	82bb      	strh	r3, [r7, #20]
    packet.xgyro = xgyro;
 800119e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80011a2:	82fb      	strh	r3, [r7, #22]
    packet.ygyro = ygyro;
 80011a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011a8:	833b      	strh	r3, [r7, #24]
    packet.zgyro = zgyro;
 80011aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011ae:	837b      	strh	r3, [r7, #26]
    packet.xmag = xmag;
 80011b0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80011b4:	83bb      	strh	r3, [r7, #28]
    packet.ymag = ymag;
 80011b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80011ba:	83fb      	strh	r3, [r7, #30]
    packet.zmag = zmag;
 80011bc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80011c0:	843b      	strh	r3, [r7, #32]
    packet.id = id;
 80011c2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80011c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    packet.temperature = temperature;
 80011ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011ce:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	330c      	adds	r3, #12
 80011d6:	f107 0108 	add.w	r1, r7, #8
 80011da:	221d      	movs	r2, #29
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fc27 	bl	8003a30 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_RAW_IMU;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f042 021b 	orr.w	r2, r2, #27
 80011ea:	725a      	strb	r2, [r3, #9]
 80011ec:	2200      	movs	r2, #0
 80011ee:	729a      	strb	r2, [r3, #10]
 80011f0:	2200      	movs	r2, #0
 80011f2:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RAW_IMU_MIN_LEN, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
 80011f4:	79ba      	ldrb	r2, [r7, #6]
 80011f6:	79f9      	ldrb	r1, [r7, #7]
 80011f8:	2390      	movs	r3, #144	; 0x90
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	231d      	movs	r3, #29
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	231a      	movs	r3, #26
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff feb9 	bl	8000f7a <mavlink_finalize_message>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	372c      	adds	r7, #44	; 0x2c
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}

08001212 <mavlink_msg_raw_imu_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param raw_imu C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 8001212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001214:	b099      	sub	sp, #100	; 0x64
 8001216:	af0e      	add	r7, sp, #56	; 0x38
 8001218:	623a      	str	r2, [r7, #32]
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	4603      	mov	r3, r0
 800121e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001222:	460b      	mov	r3, r1
 8001224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag, raw_imu->id, raw_imu->temperature);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001234:	b218      	sxth	r0, r3
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800123c:	b21c      	sxth	r4, r3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001244:	b21d      	sxth	r5, r3
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800124c:	b21e      	sxth	r6, r3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001254:	b21b      	sxth	r3, r3
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800125e:	fa0f fc83 	sxth.w	ip, r3
 8001262:	4663      	mov	r3, ip
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800126c:	fa0f fc83 	sxth.w	ip, r3
 8001270:	4663      	mov	r3, ip
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800127a:	fa0f fc83 	sxth.w	ip, r3
 800127e:	4663      	mov	r3, ip
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001288:	fa0f fc83 	sxth.w	ip, r3
 800128c:	4663      	mov	r3, ip
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8001296:	4663      	mov	r3, ip
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f9b3 301b 	ldrsh.w	r3, [r3, #27]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	f897 e026 	ldrb.w	lr, [r7, #38]	; 0x26
 80012a6:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 80012aa:	930c      	str	r3, [sp, #48]	; 0x30
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	930a      	str	r3, [sp, #40]	; 0x28
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	9309      	str	r3, [sp, #36]	; 0x24
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	9308      	str	r3, [sp, #32]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	9307      	str	r3, [sp, #28]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	9306      	str	r3, [sp, #24]
 80012c4:	9605      	str	r6, [sp, #20]
 80012c6:	9504      	str	r5, [sp, #16]
 80012c8:	9403      	str	r4, [sp, #12]
 80012ca:	9002      	str	r0, [sp, #8]
 80012cc:	e9cd 1200 	strd	r1, r2, [sp]
 80012d0:	6a3a      	ldr	r2, [r7, #32]
 80012d2:	4671      	mov	r1, lr
 80012d4:	4660      	mov	r0, ip
 80012d6:	f7ff ff4d 	bl	8001174 <mavlink_msg_raw_imu_pack>
 80012da:	4603      	mov	r3, r0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	372c      	adds	r7, #44	; 0x2c
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e4 <MAV_Send_Raw_Imu>:
	     }//end if
	}//end for
}

void MAV_Send_Raw_Imu()
{//sends IMU data through radio to ground station
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	b08d      	sub	sp, #52	; 0x34
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	466b      	mov	r3, sp
 80012ec:	461e      	mov	r6, r3
	//Radio_Transmit_Raw(&test2, 1);
	//HAL_Delay(500);
	//Radio_Transmit_Raw(&test, 1);
	//create buffer of proper length
	//int PACKET_STATIC_SIZE = 10 + 3 + payload_len + 2; //mavlink[FTP header + payload]mavlink
	int PACKET_STATIC_SIZE = 10 + 29 + 2 ; //mavlink[imu data ]mavlink
 80012ee:	2329      	movs	r3, #41	; 0x29
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t buffer[PACKET_STATIC_SIZE];
 80012f2:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80012f4:	1e6b      	subs	r3, r5, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f8:	462b      	mov	r3, r5
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f04f 0400 	mov.w	r4, #0
 8001308:	00d4      	lsls	r4, r2, #3
 800130a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800130e:	00cb      	lsls	r3, r1, #3
 8001310:	462b      	mov	r3, r5
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f04f 0400 	mov.w	r4, #0
 8001320:	00d4      	lsls	r4, r2, #3
 8001322:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001326:	00cb      	lsls	r3, r1, #3
 8001328:	462b      	mov	r3, r5
 800132a:	3307      	adds	r3, #7
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	ebad 0d03 	sub.w	sp, sp, r3
 8001334:	466b      	mov	r3, sp
 8001336:	3300      	adds	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
	//test = 0x22;
	//Radio_Transmit_Raw(&test, 1);
	//create struct and fill in data
	mavlink_raw_imu_t msgStruct;
	msgStruct.time_usec = (uint64_t) 0x3333333333333333;
 800133a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 8001344:	60bb      	str	r3, [r7, #8]
	//test = 0x33;
	//Radio_Transmit_Raw(&test, 1);
	//msgStruct.yacc  = mpu_acc[MPU_AXIS_Y];
	//msgStruct.zacc  = mpu_acc[MPU_AXIS_Z];
	//HAL_Delay(500);
	msgStruct.xacc  = (int16_t)mpu_acc[MPU_AXIS_X];
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MAV_Send_Raw_Imu+0xec>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b21b      	sxth	r3, r3
 800134c:	81bb      	strh	r3, [r7, #12]
	msgStruct.yacc  = (int16_t)mpu_acc[MPU_AXIS_Y];
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MAV_Send_Raw_Imu+0xec>)
 8001350:	885b      	ldrh	r3, [r3, #2]
 8001352:	b21b      	sxth	r3, r3
 8001354:	81fb      	strh	r3, [r7, #14]
	msgStruct.zacc  = (int16_t)mpu_acc[MPU_AXIS_Z];
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MAV_Send_Raw_Imu+0xec>)
 8001358:	889b      	ldrh	r3, [r3, #4]
 800135a:	b21b      	sxth	r3, r3
 800135c:	823b      	strh	r3, [r7, #16]
	msgStruct.xgyro = (int16_t)mpu_gyro[MPU_AXIS_X];
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MAV_Send_Raw_Imu+0xf0>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b21b      	sxth	r3, r3
 8001364:	827b      	strh	r3, [r7, #18]
	msgStruct.ygyro = (int16_t)mpu_gyro[MPU_AXIS_Y];
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MAV_Send_Raw_Imu+0xf0>)
 8001368:	885b      	ldrh	r3, [r3, #2]
 800136a:	b21b      	sxth	r3, r3
 800136c:	82bb      	strh	r3, [r7, #20]
	msgStruct.zgyro = (int16_t)mpu_gyro[MPU_AXIS_Z];
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MAV_Send_Raw_Imu+0xf0>)
 8001370:	889b      	ldrh	r3, [r3, #4]
 8001372:	b21b      	sxth	r3, r3
 8001374:	82fb      	strh	r3, [r7, #22]
	msgStruct.xmag  = (int16_t)0x1111;
 8001376:	f241 1311 	movw	r3, #4369	; 0x1111
 800137a:	833b      	strh	r3, [r7, #24]
	msgStruct.ymag  = (int16_t)0x1111;
 800137c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001380:	837b      	strh	r3, [r7, #26]
	msgStruct.zmag  = (int16_t)0x1111;
 8001382:	f241 1311 	movw	r3, #4369	; 0x1111
 8001386:	83bb      	strh	r3, [r7, #28]
	msgStruct.id    = (uint8_t)0x11;
 8001388:	2311      	movs	r3, #17
 800138a:	77bb      	strb	r3, [r7, #30]
	msgStruct.temperature = (int16_t)0x1111;
 800138c:	2300      	movs	r3, #0
 800138e:	f043 0311 	orr.w	r3, r3, #17
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	2300      	movs	r3, #0
 8001396:	f043 0311 	orr.w	r3, r3, #17
 800139a:	f887 3020 	strb.w	r3, [r7, #32]
	//test = 0x44;
	//Radio_Transmit_Raw(&test, 1);
	//memcpy(msgStruct.payload,payload_new, sizeof(payload_new));

	//encode and serialize
	mavlink_msg_raw_imu_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MAV_Send_Raw_Imu+0xf4>)
 80013a0:	7818      	ldrb	r0, [r3, #0]
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MAV_Send_Raw_Imu+0xf8>)
 80013a4:	7819      	ldrb	r1, [r3, #0]
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <MAV_Send_Raw_Imu+0xfc>)
 80013aa:	f7ff ff32 	bl	8001212 <mavlink_msg_raw_imu_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	490b      	ldr	r1, [pc, #44]	; (80013e0 <MAV_Send_Raw_Imu+0xfc>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fdff 	bl	8000fb6 <mavlink_msg_to_send_buffer>
	//test = 0x55;
	//Radio_Transmit_Raw(&test, 1);
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	b2aa      	uxth	r2, r5
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f8b6 	bl	8001530 <Radio_Transmit_Raw>
 80013c4:	46b5      	mov	sp, r6
}
 80013c6:	bf00      	nop
 80013c8:	3734      	adds	r7, #52	; 0x34
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000102c 	.word	0x2000102c
 80013d4:	20001034 	.word	0x20001034
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000001 	.word	0x20000001
 80013e0:	20001124 	.word	0x20001124

080013e4 <Mpu_Is_Ready>:
uint8_t mpu_setting_buffer[1];
uint16_t mpu_gyro[3] = {0};//stored data as [x,y,z]
uint16_t mpu_acc[3] = {0};//stored data as [x,y,z]

uint8_t Mpu_Is_Ready()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	//returns HAL address
	uint8_t mpu_ready_status = I2c_IsDeviceReady(MPU_I2C_ADDRESS);
 80013ea:	2068      	movs	r0, #104	; 0x68
 80013ec:	f7fe feae 	bl	800014c <I2c_IsDeviceReady>
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
	return mpu_ready_status;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <Mpu_Wake>:

void Mpu_Wake()
{//set initial configs on power management 1 register
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
	//power settings
	uint8_t pwr_config = 0b00000001;
 8001404:	2301      	movs	r3, #1
 8001406:	71fb      	strb	r3, [r7, #7]
	Mpu_Write(MPU_REG_PWR_MGMT_1, pwr_config);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4619      	mov	r1, r3
 800140c:	206b      	movs	r0, #107	; 0x6b
 800140e:	f000 f85f 	bl	80014d0 <Mpu_Write>
	//accelerometer settings
	uint8_t acc_config = 0b00000000;//set full scale range
 8001412:	2300      	movs	r3, #0
 8001414:	71bb      	strb	r3, [r7, #6]
	Mpu_Write(MPU_REG_ACC_CONFIG, acc_config);
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	4619      	mov	r1, r3
 800141a:	201c      	movs	r0, #28
 800141c:	f000 f858 	bl	80014d0 <Mpu_Write>
	//gyrometer settings
	uint8_t gyro_config = 0b00000000;//set full scale range
 8001420:	2300      	movs	r3, #0
 8001422:	717b      	strb	r3, [r7, #5]
	Mpu_Write(MPU_REG_GYRO_CONFIG, gyro_config);
 8001424:	797b      	ldrb	r3, [r7, #5]
 8001426:	4619      	mov	r1, r3
 8001428:	201b      	movs	r0, #27
 800142a:	f000 f851 	bl	80014d0 <Mpu_Write>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <Mpu_Get_Gyro_Data>:

void Mpu_Get_Gyro_Data(uint8_t gyro_axis)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	uint8_t command = MPU_REG_GYRO_X + 2*gyro_axis;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	3343      	adds	r3, #67	; 0x43
 800144a:	73fb      	strb	r3, [r7, #15]
	Mpu_Read(command, &mpu_gyro_buffer);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	490b      	ldr	r1, [pc, #44]	; (800147c <Mpu_Get_Gyro_Data+0x44>)
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f854 	bl	80014fe <Mpu_Read>
	mpu_gyro[gyro_axis] = (((uint16_t) mpu_gyro_buffer[0])<<8) + ((uint16_t) mpu_gyro_buffer[1]);
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <Mpu_Get_Gyro_Data+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b299      	uxth	r1, r3
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <Mpu_Get_Gyro_Data+0x44>)
 8001462:	785b      	ldrb	r3, [r3, #1]
 8001464:	b29a      	uxth	r2, r3
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	440a      	add	r2, r1
 800146a:	b291      	uxth	r1, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <Mpu_Get_Gyro_Data+0x48>)
 800146e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000109c 	.word	0x2000109c
 8001480:	20001034 	.word	0x20001034

08001484 <Mpu_Get_Acc_Data>:
void Mpu_Get_Acc_Data(uint8_t acc_axis)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	uint8_t command = MPU_REG_ACC_X + 2*acc_axis;
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	333b      	adds	r3, #59	; 0x3b
 8001496:	73fb      	strb	r3, [r7, #15]
	Mpu_Read(command, &mpu_acc_buffer);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	490b      	ldr	r1, [pc, #44]	; (80014c8 <Mpu_Get_Acc_Data+0x44>)
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f82e 	bl	80014fe <Mpu_Read>
	//data is high byte first
	//Radio_Transmit_Raw(&mpu_acc_buffer, 2);
	//HAL_Delay(1000);
	mpu_acc[acc_axis] = (((uint16_t) mpu_acc_buffer[0])<<8) + ((uint16_t) mpu_acc_buffer[1]);
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <Mpu_Get_Acc_Data+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b299      	uxth	r1, r3
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <Mpu_Get_Acc_Data+0x44>)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	440a      	add	r2, r1
 80014b6:	b291      	uxth	r1, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <Mpu_Get_Acc_Data+0x48>)
 80014ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200010a0 	.word	0x200010a0
 80014cc:	2000102c 	.word	0x2000102c

080014d0 <Mpu_Write>:

void Mpu_Write(uint8_t regNum, uint8_t writeValue)
{//input: register number to access, value to write to that register
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
	uint8_t command[2];//see write sequence in data sheet
	command[0] = regNum;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	733b      	strb	r3, [r7, #12]
	command[1] = writeValue;
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	737b      	strb	r3, [r7, #13]
	I2c_Master_Transmit(MPU_I2C_ADDRESS, &command, 2);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2202      	movs	r2, #2
 80014ee:	4619      	mov	r1, r3
 80014f0:	2068      	movs	r0, #104	; 0x68
 80014f2:	f7fe fe43 	bl	800017c <I2c_Master_Transmit>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <Mpu_Read>:

void Mpu_Read(uint8_t regNum, uint8_t* buffer )
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	6039      	str	r1, [r7, #0]
 8001508:	71fb      	strb	r3, [r7, #7]
	uint8_t command = regNum;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	73fb      	strb	r3, [r7, #15]
	I2c_Master_Transmit(MPU_I2C_ADDRESS, &command, 1);//request register
 800150e:	f107 030f 	add.w	r3, r7, #15
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	2068      	movs	r0, #104	; 0x68
 8001518:	f7fe fe30 	bl	800017c <I2c_Master_Transmit>
	I2c_Master_Receive(MPU_I2C_ADDRESS, buffer, 2);
 800151c:	2202      	movs	r2, #2
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	2068      	movs	r0, #104	; 0x68
 8001522:	f7fe fe47 	bl	80001b4 <I2c_Master_Receive>

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <Radio_Transmit_Raw+0x24>)
 8001546:	f002 f892 	bl	800366e <HAL_UART_Transmit>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200010e4 	.word	0x200010e4

08001558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_MspInit+0x5c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_MspInit+0x5c>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x5c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x5c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x5c>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_MspInit+0x60>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_MspInit+0x60>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000

080015bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_I2C_MspInit+0x74>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d124      	bne.n	8001626 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_I2C_MspInit+0x78>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_I2C_MspInit+0x78>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_I2C_MspInit+0x78>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fa:	2312      	movs	r3, #18
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <HAL_I2C_MspInit+0x7c>)
 800160a:	f000 faa1 	bl	8001b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_I2C_MspInit+0x78>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_I2C_MspInit+0x78>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_I2C_MspInit+0x78>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40005800 	.word	0x40005800
 8001634:	40021000 	.word	0x40021000
 8001638:	40010c00 	.word	0x40010c00

0800163c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_TIM_PWM_MspInit+0x34>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10b      	bne.n	8001666 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_TIM_PWM_MspInit+0x38>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_TIM_PWM_MspInit+0x38>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_TIM_PWM_MspInit+0x38>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40000800 	.word	0x40000800
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_TIM_MspPostInit+0x5c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d118      	bne.n	80016ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_TIM_MspPostInit+0x60>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_TIM_MspPostInit+0x60>)
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_TIM_MspPostInit+0x60>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_TIM_MspPostInit+0x64>)
 80016c6:	f000 fa43 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40000800 	.word	0x40000800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010c00 	.word	0x40010c00

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <HAL_UART_MspInit+0x8c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d131      	bne.n	8001764 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_UART_MspInit+0x90>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <HAL_UART_MspInit+0x90>)
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_UART_MspInit+0x90>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_UART_MspInit+0x90>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_UART_MspInit+0x90>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_UART_MspInit+0x90>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <HAL_UART_MspInit+0x94>)
 8001746:	f000 fa03 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800174a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_UART_MspInit+0x94>)
 8001760:	f000 f9f6 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013800 	.word	0x40013800
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <HardFault_Handler+0x4>

0800178a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <BusFault_Handler+0x4>

08001796 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 f8a2 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <SystemInit+0x5c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <SystemInit+0x5c>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <SystemInit+0x5c>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4911      	ldr	r1, [pc, #68]	; (8001828 <SystemInit+0x5c>)
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <SystemInit+0x60>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <SystemInit+0x5c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <SystemInit+0x5c>)
 80017ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <SystemInit+0x5c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SystemInit+0x5c>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <SystemInit+0x5c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <SystemInit+0x5c>)
 800180a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800180e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SystemInit+0x5c>)
 8001812:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001816:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SystemInit+0x64>)
 800181a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	f8ff0000 	.word	0xf8ff0000
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001834:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001836:	e003      	b.n	8001840 <LoopCopyDataInit>

08001838 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800183a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800183c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800183e:	3104      	adds	r1, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001840:	480a      	ldr	r0, [pc, #40]	; (800186c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001844:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001846:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001848:	d3f6      	bcc.n	8001838 <CopyDataInit>
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800184c:	e002      	b.n	8001854 <LoopFillZerobss>

0800184e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001850:	f842 3b04 	str.w	r3, [r2], #4

08001854 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001856:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001858:	d3f9      	bcc.n	800184e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800185a:	f7ff ffb7 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185e:	f002 f8c3 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001862:	f7fe fcc3 	bl	80001ec <main>
  bx lr
 8001866:	4770      	bx	lr
  ldr r3, =_sidata
 8001868:	08003b8c 	.word	0x08003b8c
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001870:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001874:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001878:	200014ac 	.word	0x200014ac

0800187c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC1_2_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x28>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x28>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f929 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fe5c 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f933 	bl	8001b36 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f909 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000004 	.word	0x20000004
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000008 	.word	0x20000008

0800190c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_IncTick+0x1c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x20>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_IncTick+0x20>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	2000000c 	.word	0x2000000c
 800192c:	200014a8 	.word	0x200014a8

08001930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <HAL_GetTick+0x10>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	200014a8 	.word	0x200014a8

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fff0 	bl	8001930 <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_Delay+0x40>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffe0 	bl	8001930 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000000c 	.word	0x2000000c

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff90 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff49 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff5e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff90 	bl	8001a40 <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5f 	bl	80019ec <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffb0 	bl	8001aa4 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e127      	b.n	8001db4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b64:	2201      	movs	r2, #1
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8116 	bne.w	8001dae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d034      	beq.n	8001bf4 <HAL_GPIO_Init+0xa4>
 8001b8a:	2b12      	cmp	r3, #18
 8001b8c:	d80d      	bhi.n	8001baa <HAL_GPIO_Init+0x5a>
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d02b      	beq.n	8001bea <HAL_GPIO_Init+0x9a>
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d804      	bhi.n	8001ba0 <HAL_GPIO_Init+0x50>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d031      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d01c      	beq.n	8001bd8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9e:	e048      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d043      	beq.n	8001c2c <HAL_GPIO_Init+0xdc>
 8001ba4:	2b11      	cmp	r3, #17
 8001ba6:	d01b      	beq.n	8001be0 <HAL_GPIO_Init+0x90>
          break;
 8001ba8:	e043      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001baa:	4a89      	ldr	r2, [pc, #548]	; (8001dd0 <HAL_GPIO_Init+0x280>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d026      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bb0:	4a87      	ldr	r2, [pc, #540]	; (8001dd0 <HAL_GPIO_Init+0x280>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d806      	bhi.n	8001bc4 <HAL_GPIO_Init+0x74>
 8001bb6:	4a87      	ldr	r2, [pc, #540]	; (8001dd4 <HAL_GPIO_Init+0x284>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d020      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bbc:	4a86      	ldr	r2, [pc, #536]	; (8001dd8 <HAL_GPIO_Init+0x288>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01d      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
          break;
 8001bc2:	e036      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bc4:	4a85      	ldr	r2, [pc, #532]	; (8001ddc <HAL_GPIO_Init+0x28c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bca:	4a85      	ldr	r2, [pc, #532]	; (8001de0 <HAL_GPIO_Init+0x290>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d016      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bd0:	4a84      	ldr	r2, [pc, #528]	; (8001de4 <HAL_GPIO_Init+0x294>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
          break;
 8001bd6:	e02c      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e028      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	3304      	adds	r3, #4
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e023      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e01e      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e019      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c06:	2304      	movs	r3, #4
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e012      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c14:	2308      	movs	r3, #8
 8001c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	611a      	str	r2, [r3, #16]
          break;
 8001c1e:	e008      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c20:	2308      	movs	r3, #8
 8001c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	615a      	str	r2, [r3, #20]
          break;
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2bff      	cmp	r3, #255	; 0xff
 8001c36:	d801      	bhi.n	8001c3c <HAL_GPIO_Init+0xec>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	e001      	b.n	8001c40 <HAL_GPIO_Init+0xf0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2bff      	cmp	r3, #255	; 0xff
 8001c46:	d802      	bhi.n	8001c4e <HAL_GPIO_Init+0xfe>
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x104>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3b08      	subs	r3, #8
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	401a      	ands	r2, r3
 8001c66:	6a39      	ldr	r1, [r7, #32]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8096 	beq.w	8001dae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c82:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_GPIO_Init+0x298>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_GPIO_Init+0x298>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <HAL_GPIO_Init+0x298>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c9a:	4a54      	ldr	r2, [pc, #336]	; (8001dec <HAL_GPIO_Init+0x29c>)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x19e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x19a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x196>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a48      	ldr	r2, [pc, #288]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x192>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x1a0>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x1a0>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x1a0>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x1a0>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d00:	493a      	ldr	r1, [pc, #232]	; (8001dec <HAL_GPIO_Init+0x29c>)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4938      	ldr	r1, [pc, #224]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d28:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4933      	ldr	r1, [pc, #204]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	492e      	ldr	r1, [pc, #184]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4929      	ldr	r1, [pc, #164]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d6a:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	4924      	ldr	r1, [pc, #144]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	491f      	ldr	r1, [pc, #124]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	491a      	ldr	r1, [pc, #104]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60cb      	str	r3, [r1, #12]
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4915      	ldr	r1, [pc, #84]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f aed0 	bne.w	8001b64 <HAL_GPIO_Init+0x14>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	372c      	adds	r7, #44	; 0x2c
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	10210000 	.word	0x10210000
 8001dd4:	10110000 	.word	0x10110000
 8001dd8:	10120000 	.word	0x10120000
 8001ddc:	10310000 	.word	0x10310000
 8001de0:	10320000 	.word	0x10320000
 8001de4:	10220000 	.word	0x10220000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40010800 	.word	0x40010800
 8001df4:	40010c00 	.word	0x40010c00
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	40011400 	.word	0x40011400
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e10f      	b.n	8002066 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fbae 	bl	80015bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e78:	f001 f864 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a7b      	ldr	r2, [pc, #492]	; (8002070 <HAL_I2C_Init+0x23c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d807      	bhi.n	8001e98 <HAL_I2C_Init+0x64>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a7a      	ldr	r2, [pc, #488]	; (8002074 <HAL_I2C_Init+0x240>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf94      	ite	ls
 8001e90:	2301      	movls	r3, #1
 8001e92:	2300      	movhi	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e006      	b.n	8001ea6 <HAL_I2C_Init+0x72>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a77      	ldr	r2, [pc, #476]	; (8002078 <HAL_I2C_Init+0x244>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	bf94      	ite	ls
 8001ea0:	2301      	movls	r3, #1
 8001ea2:	2300      	movhi	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0db      	b.n	8002066 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a72      	ldr	r2, [pc, #456]	; (800207c <HAL_I2C_Init+0x248>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0c9b      	lsrs	r3, r3, #18
 8001eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a64      	ldr	r2, [pc, #400]	; (8002070 <HAL_I2C_Init+0x23c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_I2C_Init+0xb4>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	e009      	b.n	8001efc <HAL_I2C_Init+0xc8>
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	4a63      	ldr	r2, [pc, #396]	; (8002080 <HAL_I2C_Init+0x24c>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	3301      	adds	r3, #1
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4956      	ldr	r1, [pc, #344]	; (8002070 <HAL_I2C_Init+0x23c>)
 8001f18:	428b      	cmp	r3, r1
 8001f1a:	d80d      	bhi.n	8001f38 <HAL_I2C_Init+0x104>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e59      	subs	r1, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	bf38      	it	cc
 8001f34:	2304      	movcc	r3, #4
 8001f36:	e04f      	b.n	8001fd8 <HAL_I2C_Init+0x1a4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d111      	bne.n	8001f64 <HAL_I2C_Init+0x130>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e012      	b.n	8001f8a <HAL_I2C_Init+0x156>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	0099      	lsls	r1, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Init+0x15e>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e022      	b.n	8001fd8 <HAL_I2C_Init+0x1a4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10e      	bne.n	8001fb8 <HAL_I2C_Init+0x184>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e58      	subs	r0, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	440b      	add	r3, r1
 8001fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	e00f      	b.n	8001fd8 <HAL_I2C_Init+0x1a4>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e58      	subs	r0, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	0099      	lsls	r1, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	6809      	ldr	r1, [r1, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69da      	ldr	r2, [r3, #28]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6911      	ldr	r1, [r2, #16]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68d2      	ldr	r2, [r2, #12]
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	000186a0 	.word	0x000186a0
 8002074:	001e847f 	.word	0x001e847f
 8002078:	003d08ff 	.word	0x003d08ff
 800207c:	431bde83 	.word	0x431bde83
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	461a      	mov	r2, r3
 8002090:	460b      	mov	r3, r1
 8002092:	817b      	strh	r3, [r7, #10]
 8002094:	4613      	mov	r3, r2
 8002096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff fc4a 	bl	8001930 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	f040 80e0 	bne.w	800226c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2319      	movs	r3, #25
 80020b2:	2201      	movs	r2, #1
 80020b4:	4970      	ldr	r1, [pc, #448]	; (8002278 <HAL_I2C_Master_Transmit+0x1f4>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fd5e 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
 80020c4:	e0d3      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_I2C_Master_Transmit+0x50>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e0cc      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d007      	beq.n	80020fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2221      	movs	r2, #33	; 0x21
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2210      	movs	r2, #16
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	893a      	ldrh	r2, [r7, #8]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a50      	ldr	r2, [pc, #320]	; (800227c <HAL_I2C_Master_Transmit+0x1f8>)
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800213c:	8979      	ldrh	r1, [r7, #10]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fbec 	bl	8002920 <I2C_MasterRequestWrite>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e08d      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002168:	e066      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fdd8 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b04      	cmp	r3, #4
 8002180:	d107      	bne.n	8002192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d11b      	bne.n	800220c <HAL_I2C_Master_Transmit+0x188>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d017      	beq.n	800220c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	6a39      	ldr	r1, [r7, #32]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fdc8 	bl	8002da6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2b04      	cmp	r3, #4
 8002222:	d107      	bne.n	8002234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e01a      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d194      	bne.n	800216a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e000      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
  }
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	00100002 	.word	0x00100002
 800227c:	ffff0000 	.word	0xffff0000

08002280 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	817b      	strh	r3, [r7, #10]
 8002290:	4613      	mov	r3, r2
 8002292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fb4c 	bl	8001930 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f040 8213 	bne.w	80026ce <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2319      	movs	r3, #25
 80022ae:	2201      	movs	r2, #1
 80022b0:	497e      	ldr	r1, [pc, #504]	; (80024ac <HAL_I2C_Master_Receive+0x22c>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fc60 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e206      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Master_Receive+0x50>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e1ff      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d007      	beq.n	80022f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2222      	movs	r2, #34	; 0x22
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <HAL_I2C_Master_Receive+0x230>)
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fb64 	bl	8002a0c <I2C_MasterRequestRead>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1c0      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	623b      	str	r3, [r7, #32]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e194      	b.n	80026a8 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	2b01      	cmp	r3, #1
 8002384:	d11d      	bne.n	80023c2 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002394:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002396:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023be:	b662      	cpsie	i
 80023c0:	e172      	b.n	80026a8 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d11d      	bne.n	8002406 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023da:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002400:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002402:	b662      	cpsie	i
 8002404:	e150      	b.n	80026a8 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800242c:	e13c      	b.n	80026a8 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	2b03      	cmp	r3, #3
 8002434:	f200 80f5 	bhi.w	8002622 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	2b01      	cmp	r3, #1
 800243e:	d123      	bne.n	8002488 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fcef 	bl	8002e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e13d      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002486:	e10f      	b.n	80026a8 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	2b02      	cmp	r3, #2
 800248e:	d150      	bne.n	8002532 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	2200      	movs	r2, #0
 8002498:	4906      	ldr	r1, [pc, #24]	; (80024b4 <HAL_I2C_Master_Receive+0x234>)
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fb6c 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e112      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
 80024aa:	bf00      	nop
 80024ac:	00100002 	.word	0x00100002
 80024b0:	ffff0000 	.word	0xffff0000
 80024b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024b8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024fc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002530:	e0ba      	b.n	80026a8 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	2200      	movs	r2, #0
 800253a:	4967      	ldr	r1, [pc, #412]	; (80026d8 <HAL_I2C_Master_Receive+0x458>)
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fb1b 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0c1      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800255c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	2200      	movs	r2, #0
 8002598:	494f      	ldr	r1, [pc, #316]	; (80026d8 <HAL_I2C_Master_Receive+0x458>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 faec 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e092      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025ec:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002620:	e042      	b.n	80026a8 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fbfe 	bl	8002e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e04c      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d118      	bne.n	80026a8 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f aebe 	bne.w	800242e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	00010004 	.word	0x00010004

080026dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff f920 	bl	8001930 <HAL_GetTick>
 80026f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b20      	cmp	r3, #32
 8002700:	f040 8105 	bne.w	800290e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2319      	movs	r3, #25
 800270a:	2201      	movs	r2, #1
 800270c:	4982      	ldr	r1, [pc, #520]	; (8002918 <HAL_I2C_IsDeviceReady+0x23c>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa32 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
 800271c:	e0f8      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_I2C_IsDeviceReady+0x50>
 8002728:	2302      	movs	r3, #2
 800272a:	e0f1      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x234>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d007      	beq.n	8002752 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2224      	movs	r2, #36	; 0x24
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a6a      	ldr	r2, [pc, #424]	; (800291c <HAL_I2C_IsDeviceReady+0x240>)
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002784:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f9f0 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0b6      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff f8bd 	bl	8001930 <HAL_GetTick>
 80027b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	bf0c      	ite	eq
 80027c6:	2301      	moveq	r3, #1
 80027c8:	2300      	movne	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027e6:	e025      	b.n	8002834 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027e8:	f7ff f8a2 	bl	8001930 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d302      	bcc.n	80027fe <HAL_I2C_IsDeviceReady+0x122>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	22a0      	movs	r2, #160	; 0xa0
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2ba0      	cmp	r3, #160	; 0xa0
 800283e:	d005      	beq.n	800284c <HAL_I2C_IsDeviceReady+0x170>
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_I2C_IsDeviceReady+0x170>
 8002846:	7dbb      	ldrb	r3, [r7, #22]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0cd      	beq.n	80027e8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d129      	bne.n	80028b6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002870:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2319      	movs	r3, #25
 800288e:	2201      	movs	r2, #1
 8002890:	4921      	ldr	r1, [pc, #132]	; (8002918 <HAL_I2C_IsDeviceReady+0x23c>)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f970 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e036      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e02c      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2319      	movs	r3, #25
 80028d6:	2201      	movs	r2, #1
 80028d8:	490f      	ldr	r1, [pc, #60]	; (8002918 <HAL_I2C_IsDeviceReady+0x23c>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f94c 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e012      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f4ff af3e 	bcc.w	8002776 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	00100002 	.word	0x00100002
 800291c:	ffff0000 	.word	0xffff0000

08002920 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	460b      	mov	r3, r1
 800292e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d006      	beq.n	800294a <I2C_MasterRequestWrite+0x2a>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d003      	beq.n	800294a <I2C_MasterRequestWrite+0x2a>
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002948:	d108      	bne.n	800295c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e00b      	b.n	8002974 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	2b12      	cmp	r3, #18
 8002962:	d107      	bne.n	8002974 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f8f9 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e035      	b.n	80029fc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002998:	d108      	bne.n	80029ac <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299a:	897b      	ldrh	r3, [r7, #10]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a8:	611a      	str	r2, [r3, #16]
 80029aa:	e01b      	b.n	80029e4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029ac:	897b      	ldrh	r3, [r7, #10]
 80029ae:	11db      	asrs	r3, r3, #7
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 0306 	and.w	r3, r3, #6
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f063 030f 	orn	r3, r3, #15
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	490e      	ldr	r1, [pc, #56]	; (8002a04 <I2C_MasterRequestWrite+0xe4>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f92b 	bl	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e010      	b.n	80029fc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029da:	897b      	ldrh	r3, [r7, #10]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <I2C_MasterRequestWrite+0xe8>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f91b 	bl	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	00010008 	.word	0x00010008
 8002a08:	00010002 	.word	0x00010002

08002a0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d006      	beq.n	8002a46 <I2C_MasterRequestRead+0x3a>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d003      	beq.n	8002a46 <I2C_MasterRequestRead+0x3a>
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a44:	d108      	bne.n	8002a58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e00b      	b.n	8002a70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	2b11      	cmp	r3, #17
 8002a5e:	d107      	bne.n	8002a70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f87b 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e06d      	b.n	8002b68 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a94:	d108      	bne.n	8002aa8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	611a      	str	r2, [r3, #16]
 8002aa6:	e053      	b.n	8002b50 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aa8:	897b      	ldrh	r3, [r7, #10]
 8002aaa:	11db      	asrs	r3, r3, #7
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0306 	and.w	r3, r3, #6
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f063 030f 	orn	r3, r3, #15
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	492a      	ldr	r1, [pc, #168]	; (8002b70 <I2C_MasterRequestRead+0x164>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8ad 	bl	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e048      	b.n	8002b68 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4923      	ldr	r1, [pc, #140]	; (8002b74 <I2C_MasterRequestRead+0x168>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f89d 	bl	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e038      	b.n	8002b68 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f825 	bl	8002b78 <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e017      	b.n	8002b68 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	11db      	asrs	r3, r3, #7
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f003 0306 	and.w	r3, r3, #6
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f063 030e 	orn	r3, r3, #14
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <I2C_MasterRequestRead+0x168>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f865 	bl	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	00010008 	.word	0x00010008
 8002b74:	00010002 	.word	0x00010002

08002b78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b88:	e025      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d021      	beq.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b92:	f7fe fecd 	bl	8001930 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d302      	bcc.n	8002ba8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d116      	bne.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e023      	b.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10d      	bne.n	8002bfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4013      	ands	r3, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	e00c      	b.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d0b6      	beq.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c34:	e051      	b.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c44:	d123      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f043 0204 	orr.w	r2, r3, #4
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e046      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d021      	beq.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7fe fe4b 	bl	8001930 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d116      	bne.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e020      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10c      	bne.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	e00b      	b.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d18d      	bne.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d30:	e02d      	b.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f8ce 	bl	8002ed4 <I2C_IsAcknowledgeFailed>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e02d      	b.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d021      	beq.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe fdf1 	bl	8001930 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e007      	b.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d1ca      	bne.n	8002d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db2:	e02d      	b.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f88d 	bl	8002ed4 <I2C_IsAcknowledgeFailed>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e02d      	b.n	8002e20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d021      	beq.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dcc:	f7fe fdb0 	bl	8001930 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d302      	bcc.n	8002de2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e007      	b.n	8002e20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d1ca      	bne.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e34:	e042      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d119      	bne.n	8002e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0210 	mvn.w	r2, #16
 8002e4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e029      	b.n	8002ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e78:	f7fe fd5a 	bl	8001930 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d302      	bcc.n	8002e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e007      	b.n	8002ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d1b5      	bne.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d11b      	bne.n	8002f24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000004 	.word	0x20000004

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f48:	f7ff fff2 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08003b7c 	.word	0x08003b7c

08002f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f70:	f7ff ffde 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f74:	4601      	mov	r1, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0adb      	lsrs	r3, r3, #11
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08003b7c 	.word	0x08003b7c

08002f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e01d      	b.n	8002fe2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe fb3e 	bl	800163c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f000 f8d0 	bl	8003178 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003002:	2302      	movs	r3, #2
 8003004:	e0b4      	b.n	8003170 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	f200 809f 	bhi.w	800315c <HAL_TIM_PWM_ConfigChannel+0x170>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003059 	.word	0x08003059
 8003028:	0800315d 	.word	0x0800315d
 800302c:	0800315d 	.word	0x0800315d
 8003030:	0800315d 	.word	0x0800315d
 8003034:	08003099 	.word	0x08003099
 8003038:	0800315d 	.word	0x0800315d
 800303c:	0800315d 	.word	0x0800315d
 8003040:	0800315d 	.word	0x0800315d
 8003044:	080030db 	.word	0x080030db
 8003048:	0800315d 	.word	0x0800315d
 800304c:	0800315d 	.word	0x0800315d
 8003050:	0800315d 	.word	0x0800315d
 8003054:	0800311b 	.word	0x0800311b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f8ec 	bl	800323c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0208 	orr.w	r2, r2, #8
 8003072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6999      	ldr	r1, [r3, #24]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	619a      	str	r2, [r3, #24]
      break;
 8003096:	e062      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f932 	bl	8003308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6999      	ldr	r1, [r3, #24]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	021a      	lsls	r2, r3, #8
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	619a      	str	r2, [r3, #24]
      break;
 80030d8:	e041      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f97b 	bl	80033dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0208 	orr.w	r2, r2, #8
 80030f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0204 	bic.w	r2, r2, #4
 8003104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69d9      	ldr	r1, [r3, #28]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	61da      	str	r2, [r3, #28]
      break;
 8003118:	e021      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f9c5 	bl	80034b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69d9      	ldr	r1, [r3, #28]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	021a      	lsls	r2, r3, #8
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	61da      	str	r2, [r3, #28]
      break;
 800315a:	e000      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800315c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a29      	ldr	r2, [pc, #164]	; (8003230 <TIM_Base_SetConfig+0xb8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00b      	beq.n	80031a8 <TIM_Base_SetConfig+0x30>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d007      	beq.n	80031a8 <TIM_Base_SetConfig+0x30>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a26      	ldr	r2, [pc, #152]	; (8003234 <TIM_Base_SetConfig+0xbc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_Base_SetConfig+0x30>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a25      	ldr	r2, [pc, #148]	; (8003238 <TIM_Base_SetConfig+0xc0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d108      	bne.n	80031ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <TIM_Base_SetConfig+0xb8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <TIM_Base_SetConfig+0xbc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0x62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <TIM_Base_SetConfig+0xc0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a07      	ldr	r2, [pc, #28]	; (8003230 <TIM_Base_SetConfig+0xb8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d103      	bne.n	8003220 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	615a      	str	r2, [r3, #20]
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800

0800323c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 0302 	bic.w	r3, r3, #2
 8003284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <TIM_OC1_SetConfig+0xc8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d10c      	bne.n	80032b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0308 	bic.w	r3, r3, #8
 800329e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a13      	ldr	r2, [pc, #76]	; (8003304 <TIM_OC1_SetConfig+0xc8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d111      	bne.n	80032de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40012c00 	.word	0x40012c00

08003308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0210 	bic.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f023 0320 	bic.w	r3, r3, #32
 8003352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <TIM_OC2_SetConfig+0xd0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d10d      	bne.n	8003384 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <TIM_OC2_SetConfig+0xd0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d113      	bne.n	80033b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800339a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40012c00 	.word	0x40012c00

080033dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <TIM_OC3_SetConfig+0xd0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10d      	bne.n	8003456 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <TIM_OC3_SetConfig+0xd0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d113      	bne.n	8003486 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40012c00 	.word	0x40012c00

080034b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <TIM_OC4_SetConfig+0x98>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d109      	bne.n	8003524 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	40012c00 	.word	0x40012c00

0800354c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003560:	2302      	movs	r3, #2
 8003562:	e032      	b.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e03f      	b.n	8003666 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe f870 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f90b 	bl	8003834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800364c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b088      	sub	sp, #32
 8003672:	af02      	add	r7, sp, #8
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	f040 8083 	bne.w	8003796 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_UART_Transmit+0x2e>
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e07b      	b.n	8003798 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Transmit+0x40>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e074      	b.n	8003798 <HAL_UART_Transmit+0x12a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2221      	movs	r2, #33	; 0x21
 80036c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036c4:	f7fe f934 	bl	8001930 <HAL_GetTick>
 80036c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036d6:	e042      	b.n	800375e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	d122      	bne.n	8003736 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f850 	bl	80037a0 <UART_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e046      	b.n	8003798 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3302      	adds	r3, #2
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	e017      	b.n	800375e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3301      	adds	r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	e013      	b.n	800375e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f82d 	bl	80037a0 <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e023      	b.n	8003798 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	60ba      	str	r2, [r7, #8]
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1b7      	bne.n	80036d8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f814 	bl	80037a0 <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e00a      	b.n	8003798 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b0:	e02c      	b.n	800380c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d028      	beq.n	800380c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037c0:	f7fe f8b6 	bl	8001930 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d21d      	bcs.n	800380c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e00f      	b.n	800382c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	429a      	cmp	r2, r3
 8003828:	d0c3      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800386e:	f023 030c 	bic.w	r3, r3, #12
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	430b      	orrs	r3, r1
 800387a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a52      	ldr	r2, [pc, #328]	; (80039e0 <UART_SetConfig+0x1ac>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d14e      	bne.n	800393a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800389c:	f7ff fb66 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 80038a0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009a      	lsls	r2, r3, #2
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	4a4a      	ldr	r2, [pc, #296]	; (80039e4 <UART_SetConfig+0x1b0>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	0119      	lsls	r1, r3, #4
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d8:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <UART_SetConfig+0x1b0>)
 80038da:	fba3 0302 	umull	r0, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2064      	movs	r0, #100	; 0x64
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	; 0x32
 80038ec:	4a3d      	ldr	r2, [pc, #244]	; (80039e4 <UART_SetConfig+0x1b0>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f8:	4419      	add	r1, r3
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003910:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <UART_SetConfig+0x1b0>)
 8003912:	fba3 0302 	umull	r0, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2064      	movs	r0, #100	; 0x64
 800391a:	fb00 f303 	mul.w	r3, r0, r3
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	3332      	adds	r3, #50	; 0x32
 8003924:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <UART_SetConfig+0x1b0>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	440a      	add	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003938:	e04d      	b.n	80039d6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800393a:	f7ff fb03 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 800393e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009a      	lsls	r2, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	4a23      	ldr	r2, [pc, #140]	; (80039e4 <UART_SetConfig+0x1b0>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	0119      	lsls	r1, r3, #4
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009a      	lsls	r2, r3, #2
 800396a:	441a      	add	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	fbb2 f2f3 	udiv	r2, r2, r3
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <UART_SetConfig+0x1b0>)
 8003978:	fba3 0302 	umull	r0, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	2064      	movs	r0, #100	; 0x64
 8003980:	fb00 f303 	mul.w	r3, r0, r3
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	3332      	adds	r3, #50	; 0x32
 800398a:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <UART_SetConfig+0x1b0>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003996:	4419      	add	r1, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <UART_SetConfig+0x1b0>)
 80039b0:	fba3 0302 	umull	r0, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	2064      	movs	r0, #100	; 0x64
 80039b8:	fb00 f303 	mul.w	r3, r0, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	3332      	adds	r3, #50	; 0x32
 80039c2:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <UART_SetConfig+0x1b0>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	440a      	add	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40013800 	.word	0x40013800
 80039e4:	51eb851f 	.word	0x51eb851f

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	2500      	movs	r5, #0
 80039ec:	4e0c      	ldr	r6, [pc, #48]	; (8003a20 <__libc_init_array+0x38>)
 80039ee:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <__libc_init_array+0x3c>)
 80039f0:	1ba4      	subs	r4, r4, r6
 80039f2:	10a4      	asrs	r4, r4, #2
 80039f4:	42a5      	cmp	r5, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	f000 f82e 	bl	8003a58 <_init>
 80039fc:	2500      	movs	r5, #0
 80039fe:	4e0a      	ldr	r6, [pc, #40]	; (8003a28 <__libc_init_array+0x40>)
 8003a00:	4c0a      	ldr	r4, [pc, #40]	; (8003a2c <__libc_init_array+0x44>)
 8003a02:	1ba4      	subs	r4, r4, r6
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	42a5      	cmp	r5, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a10:	4798      	blx	r3
 8003a12:	3501      	adds	r5, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a1a:	4798      	blx	r3
 8003a1c:	3501      	adds	r5, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	08003b84 	.word	0x08003b84
 8003a24:	08003b84 	.word	0x08003b84
 8003a28:	08003b84 	.word	0x08003b84
 8003a2c:	08003b88 	.word	0x08003b88

08003a30 <memcpy>:
 8003a30:	b510      	push	{r4, lr}
 8003a32:	1e43      	subs	r3, r0, #1
 8003a34:	440a      	add	r2, r1
 8003a36:	4291      	cmp	r1, r2
 8003a38:	d100      	bne.n	8003a3c <memcpy+0xc>
 8003a3a:	bd10      	pop	{r4, pc}
 8003a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a44:	e7f7      	b.n	8003a36 <memcpy+0x6>

08003a46 <memset>:
 8003a46:	4603      	mov	r3, r0
 8003a48:	4402      	add	r2, r0
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d100      	bne.n	8003a50 <memset+0xa>
 8003a4e:	4770      	bx	lr
 8003a50:	f803 1b01 	strb.w	r1, [r3], #1
 8003a54:	e7f9      	b.n	8003a4a <memset+0x4>
	...

08003a58 <_init>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr

08003a64 <_fini>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr
