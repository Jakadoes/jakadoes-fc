
JakadoesFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003734  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800395c  0800395c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800395c  0800395c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000010  08003974  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08003974  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3df  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002011  00000000  00000000  0002e418  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00030430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  00031358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006bb7  00000000  00000000  000321b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc21  00000000  00000000  00038d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9e5b  00000000  00000000  00045988  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff7e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004038  00000000  00000000  000ff860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003828 	.word	0x08003828

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003828 	.word	0x08003828

0800014c <Cam_Is_Ready>:
I2C_HandleTypeDef hi2c2;
#include"stm32f1xx_hal.h"

uint8_t cam_alert_rx_buffer[1];
uint8_t Cam_Is_Ready()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	//returns HAL address
	uint8_t cam_ready_status = I2c_IsDeviceReady(CAM_I2C_ADDRESS);
 8000152:	2026      	movs	r0, #38	; 0x26
 8000154:	f000 f836 	bl	80001c4 <I2c_IsDeviceReady>
 8000158:	4603      	mov	r3, r0
 800015a:	71fb      	strb	r3, [r7, #7]
	return cam_ready_status;
 800015c:	79fb      	ldrb	r3, [r7, #7]
}
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}
	...

08000168 <Cam_Poll_Alert>:

void Cam_Poll_Alert()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
	uint8_t test = 0x22;
 800016e:	2322      	movs	r3, #34	; 0x22
 8000170:	71fb      	strb	r3, [r7, #7]
	//send single read command
	//receive 8 bits of data
	uint8_t command = CAM_COM_POLL_ALERT; //coefficient is shifted one to left (check data sheet)
 8000172:	2311      	movs	r3, #17
 8000174:	717b      	strb	r3, [r7, #5]
	test = 0x22;
 8000176:	2322      	movs	r3, #34	; 0x22
 8000178:	71fb      	strb	r3, [r7, #7]
	//Radio_Transmit_Raw(&test, 1);
	I2c_Master_Transmit(CAM_I2C_ADDRESS, &command, 1);
 800017a:	1d7b      	adds	r3, r7, #5
 800017c:	2201      	movs	r2, #1
 800017e:	4619      	mov	r1, r3
 8000180:	2026      	movs	r0, #38	; 0x26
 8000182:	f000 f837 	bl	80001f4 <I2c_Master_Transmit>
	//HAL_Delay(1000);
	uint8_t cam_status = Cam_Is_Ready();
 8000186:	f7ff ffe1 	bl	800014c <Cam_Is_Ready>
 800018a:	4603      	mov	r3, r0
 800018c:	71bb      	strb	r3, [r7, #6]

	//Radio_Transmit_Raw(&cam_status, 1);
	//if(Cam_Is_Ready() == HAL_OK)//line needs to be not busy for error not to occur
	//{
		 test = 0x33;
 800018e:	2333      	movs	r3, #51	; 0x33
 8000190:	71fb      	strb	r3, [r7, #7]
		 //Radio_Transmit_Raw(&test, 1);
		 //HAL_Delay(600);
		 I2c_Master_Receive(CAM_I2C_ADDRESS, cam_alert_rx_buffer, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	4903      	ldr	r1, [pc, #12]	; (80001a4 <Cam_Poll_Alert+0x3c>)
 8000196:	2026      	movs	r0, #38	; 0x26
 8000198:	f000 f848 	bl	800022c <I2c_Master_Receive>
		 //HAL_I2C_Master_Receive_DMA (&hi2c2, CAM_I2C_ADDRESS,cam_alert_rx_buffer, 1)
		 //Radio_Transmit_Raw(&cam_alert_rx_buffer, 1);
		 //transmission is getting stuck on, causing the cam to stay in receiving mode
		 //very important to send and expect to recieve the same amount of bytes, otherwise EIO and busy lock down errors
	//}
}
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	200000e0 	.word	0x200000e0

080001a8 <Cam_Transmit_Alert>:

void Cam_Transmit_Alert()
{//send alert status to ground station
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	MAV_Send_Msg_Named_Value_Int("FireAlert", (uint32_t) cam_alert_rx_buffer[0]);
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <Cam_Transmit_Alert+0x14>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	4619      	mov	r1, r3
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <Cam_Transmit_Alert+0x18>)
 80001b4:	f001 f844 	bl	8001240 <MAV_Send_Msg_Named_Value_Int>
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	200000e0 	.word	0x200000e0
 80001c0:	08003840 	.word	0x08003840

080001c4 <I2c_IsDeviceReady>:
I2C_HandleTypeDef hi2c2;
#define I2C_TRIALS_DEFAULT 40
#define I2C_TIMEOUT_DEFAULT 2000

uint8_t I2c_IsDeviceReady(uint8_t Address)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	b29b      	uxth	r3, r3
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	81fb      	strh	r3, [r7, #14]
	//uint16_t devAddress = 0b0000000001110111;
	uint8_t test[2];
	//test[1] = devAddress & 0xff;
	//test[0] = devAddress >>8;
	//Radio_Transmit_Raw(&test, 2);
	return HAL_I2C_IsDeviceReady(&hi2c2, devAddress, I2C_TRIALS_DEFAULT, I2C_TIMEOUT_DEFAULT);
 80001d6:	89f9      	ldrh	r1, [r7, #14]
 80001d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80001dc:	2228      	movs	r2, #40	; 0x28
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <I2c_IsDeviceReady+0x2c>)
 80001e0:	f002 f95c 	bl	800249c <HAL_I2C_IsDeviceReady>
 80001e4:	4603      	mov	r3, r0
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000008c 	.word	0x2000008c

080001f4 <I2c_Master_Transmit>:

void I2c_Master_Transmit(uint8_t Address, uint8_t* message, uint16_t messageSize)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af02      	add	r7, sp, #8
 80001fa:	4603      	mov	r3, r0
 80001fc:	6039      	str	r1, [r7, #0]
 80001fe:	71fb      	strb	r3, [r7, #7]
 8000200:	4613      	mov	r3, r2
 8000202:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left once before use (check HAL documentation)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	b29b      	uxth	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, devAddress, message, messageSize, I2C_TIMEOUT_DEFAULT);
 800020c:	88ba      	ldrh	r2, [r7, #4]
 800020e:	89f9      	ldrh	r1, [r7, #14]
 8000210:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	4613      	mov	r3, r2
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	4803      	ldr	r0, [pc, #12]	; (8000228 <I2c_Master_Transmit+0x34>)
 800021c:	f001 fe12 	bl	8001e44 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000008c 	.word	0x2000008c

0800022c <I2c_Master_Receive>:

void I2c_Master_Receive(uint8_t Address, uint8_t* messageDestination, uint16_t messageSize)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af02      	add	r7, sp, #8
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	80bb      	strh	r3, [r7, #4]
	uint16_t devAddress = Address << 1;//address must be shifted to the left before use (check HAL documentation)
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	b29b      	uxth	r3, r3
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Receive(&hi2c2, devAddress, messageDestination, messageSize, I2C_TIMEOUT_DEFAULT);
 8000244:	88ba      	ldrh	r2, [r7, #4]
 8000246:	89f9      	ldrh	r1, [r7, #14]
 8000248:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	4613      	mov	r3, r2
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <I2c_Master_Receive+0x34>)
 8000254:	f001 fef4 	bl	8002040 <HAL_I2C_Master_Receive>
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	2000008c 	.word	0x2000008c

08000264 <main>:
	DISARMED,
	ARMED
};

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
	//initialize modules
	HAL_Init();
 800026a:	f001 f9e9 	bl	8001640 <HAL_Init>
	MX_GPIO_Init();
 800026e:	f000 f905 	bl	800047c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000272:	f000 f8d9 	bl	8000428 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 8000276:	f000 f85b 	bl	8000330 <MX_TIM4_Init>
	MX_I2C2_Init();
 800027a:	f000 f82b 	bl	80002d4 <MX_I2C2_Init>
	//    1, // System ID2 (1-255)
	//    1  // Component ID (a MAV_COMPONENT value)
	//};
	//Motor_Arm();
	//radio - incoming data will be packeted into four sections: [m1][m2][m3][m4]
	char tx_buffer[4] = "Hl\r\n";
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <main+0x60>)
 8000280:	613b      	str	r3, [r7, #16]
	char rx_buffer[4] = "coef";
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0x64>)
 8000284:	60fb      	str	r3, [r7, #12]
	uint8_t test[5] = {0x55, 0x55, 0x55, 0x55, 0x55};
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <main+0x68>)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800028e:	6018      	str	r0, [r3, #0]
 8000290:	3304      	adds	r3, #4
 8000292:	7019      	strb	r1, [r3, #0]
	uint8_t baro_flag = 5;
 8000294:	2305      	movs	r3, #5
 8000296:	75fb      	strb	r3, [r7, #23]
	//HAL_Delay(3000);//wait for ESC's to arm, old
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	2108      	movs	r1, #8
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <main+0x6c>)
 800029e:	f001 fc91 	bl	8001bc4 <HAL_GPIO_WritePin>
		//MAV_Parse_Data();
		//****start of mpu test code****
		//uint8_t mpu_status = Mpu_Is_Ready();
		//Radio_Transmit_Raw(&mpu_status, 1);
		//****start of cam test code****
		uint8_t cam_status = Cam_Is_Ready();
 80002a2:	f7ff ff53 	bl	800014c <Cam_Is_Ready>
 80002a6:	4603      	mov	r3, r0
 80002a8:	75bb      	strb	r3, [r7, #22]
		//Radio_Transmit_Raw(&cam_status, 1);
		HAL_Delay(50);
 80002aa:	2032      	movs	r0, #50	; 0x32
 80002ac:	f001 fa2a 	bl	8001704 <HAL_Delay>
		if(Cam_Is_Ready() == HAL_OK)
 80002b0:	f7ff ff4c 	bl	800014c <Cam_Is_Ready>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d101      	bne.n	80002be <main+0x5a>
		{
			Cam_Poll_Alert();
 80002ba:	f7ff ff55 	bl	8000168 <Cam_Poll_Alert>
		}
			//Radio_Transmit_Raw(&cam_alert_rx_buffer, 1);
		Cam_Transmit_Alert();
 80002be:	f7ff ff73 	bl	80001a8 <Cam_Transmit_Alert>
	while(1){
 80002c2:	e7ee      	b.n	80002a2 <main+0x3e>
 80002c4:	0a0d6c48 	.word	0x0a0d6c48
 80002c8:	66656f63 	.word	0x66656f63
 80002cc:	0800384c 	.word	0x0800384c
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <MX_I2C2_Init+0x50>)
 80002da:	4a13      	ldr	r2, [pc, #76]	; (8000328 <MX_I2C2_Init+0x54>)
 80002dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_I2C2_Init+0x50>)
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <MX_I2C2_Init+0x58>)
 80002e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_I2C2_Init+0x50>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_I2C2_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_I2C2_Init+0x50>)
 80002f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_I2C2_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_I2C2_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_I2C2_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_I2C2_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_I2C2_Init+0x50>)
 8000312:	f001 fc6f 	bl	8001bf4 <HAL_I2C_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800031c:	f000 f8ec 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000008c 	.word	0x2000008c
 8000328:	40005800 	.word	0x40005800
 800032c:	000186a0 	.word	0x000186a0

08000330 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	; 0x28
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000336:	f107 0320 	add.w	r3, r7, #32
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <MX_TIM4_Init+0xf0>)
 8000354:	4a33      	ldr	r2, [pc, #204]	; (8000424 <MX_TIM4_Init+0xf4>)
 8000356:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <MX_TIM4_Init+0xf0>)
 800035a:	220a      	movs	r2, #10
 800035c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b30      	ldr	r3, [pc, #192]	; (8000420 <MX_TIM4_Init+0xf0>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 8000364:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_TIM4_Init+0xf0>)
 8000366:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800036a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036c:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_TIM4_Init+0xf0>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <MX_TIM4_Init+0xf0>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000378:	4829      	ldr	r0, [pc, #164]	; (8000420 <MX_TIM4_Init+0xf0>)
 800037a:	f002 fceb 	bl	8002d54 <HAL_TIM_PWM_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000384:	f000 f8b8 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000390:	f107 0320 	add.w	r3, r7, #32
 8000394:	4619      	mov	r1, r3
 8000396:	4822      	ldr	r0, [pc, #136]	; (8000420 <MX_TIM4_Init+0xf0>)
 8000398:	f002 ffb8 	bl	800330c <HAL_TIMEx_MasterConfigSynchronization>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80003a2:	f000 f8a9 	bl	80004f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a6:	2360      	movs	r3, #96	; 0x60
 80003a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 80003aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80003ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	4619      	mov	r1, r3
 80003be:	4818      	ldr	r0, [pc, #96]	; (8000420 <MX_TIM4_Init+0xf0>)
 80003c0:	f002 fcf4 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80003ca:	f000 f895 	bl	80004f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2204      	movs	r2, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	4812      	ldr	r0, [pc, #72]	; (8000420 <MX_TIM4_Init+0xf0>)
 80003d6:	f002 fce9 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80003e0:	f000 f88a 	bl	80004f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2208      	movs	r2, #8
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_TIM4_Init+0xf0>)
 80003ec:	f002 fcde 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80003f6:	f000 f87f 	bl	80004f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	220c      	movs	r2, #12
 80003fe:	4619      	mov	r1, r3
 8000400:	4807      	ldr	r0, [pc, #28]	; (8000420 <MX_TIM4_Init+0xf0>)
 8000402:	f002 fcd3 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800040c:	f000 f874 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <MX_TIM4_Init+0xf0>)
 8000412:	f001 f811 	bl	8001438 <HAL_TIM_MspPostInit>

}
 8000416:	bf00      	nop
 8000418:	3728      	adds	r7, #40	; 0x28
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200000e4 	.word	0x200000e4
 8000424:	40000800 	.word	0x40000800

08000428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART1_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600*2;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000460:	f002 ff98 	bl	8003394 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f845 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //huart1.Init.BaudRate = huart1.Init.BaudRate*2;//must double due to oversampling (dont do here, do above)
  /* USER CODE END USART1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000124 	.word	0x20000124
 8000478:	40013800 	.word	0x40013800

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_GPIO_Init+0x74>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <MX_GPIO_Init+0x74>)
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_GPIO_Init+0x74>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0308 	and.w	r3, r3, #8
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_GPIO_Init+0x74>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <MX_GPIO_Init+0x74>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_GPIO_Init+0x74>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2108      	movs	r1, #8
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004c6:	f001 fb7d 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004ca:	2308      	movs	r3, #8
 80004cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	4619      	mov	r1, r3
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004e2:	f001 fa15 	bl	8001910 <HAL_GPIO_Init>

}
 80004e6:	bf00      	nop
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010c00 	.word	0x40010c00

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4053      	eors	r3, r2
 800051a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	b25a      	sxtb	r2, r3
 8000522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000526:	4053      	eors	r3, r2
 8000528:	b25b      	sxtb	r3, r3
 800052a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	b29b      	uxth	r3, r3
 8000534:	b21a      	sxth	r2, r3
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	021b      	lsls	r3, r3, #8
 800053a:	b21b      	sxth	r3, r3
 800053c:	4053      	eors	r3, r2
 800053e:	b21a      	sxth	r2, r3
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	b21b      	sxth	r3, r3
 8000546:	4053      	eors	r3, r2
 8000548:	b21a      	sxth	r2, r3
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	091b      	lsrs	r3, r3, #4
 800054e:	b2db      	uxtb	r3, r3
 8000550:	b21b      	sxth	r3, r3
 8000552:	4053      	eors	r3, r2
 8000554:	b21b      	sxth	r3, r3
 8000556:	b29a      	uxth	r2, r3
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	801a      	strh	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000574:	801a      	strh	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 800058c:	f107 030e 	add.w	r3, r7, #14
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ffe8 	bl	8000566 <crc_init>
	while (length--) {
 8000596:	e009      	b.n	80005ac <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	607a      	str	r2, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f107 020e 	add.w	r2, r7, #14
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffac 	bl	8000504 <crc_accumulate>
	while (length--) {
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	807a      	strh	r2, [r7, #2]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f0      	bne.n	8000598 <crc_calculate+0x18>
        }
        return crcTmp;
 80005b6:	89fb      	ldrh	r3, [r7, #14]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	4613      	mov	r3, r2
 80005cc:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	617b      	str	r3, [r7, #20]
	while (length--) {
 80005d2:	e007      	b.n	80005e4 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	617a      	str	r2, [r7, #20]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	68f9      	ldr	r1, [r7, #12]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff90 	bl	8000504 <crc_accumulate>
	while (length--) {
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	80fa      	strh	r2, [r7, #6]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f2      	bne.n	80005d4 <crc_accumulate_buffer+0x14>
        }
}
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <mavlink_sha256_init+0x50>)
 8000610:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <mavlink_sha256_init+0x54>)
 8000616:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <mavlink_sha256_init+0x58>)
 800061c:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <mavlink_sha256_init+0x5c>)
 8000622:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <mavlink_sha256_init+0x60>)
 8000628:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <mavlink_sha256_init+0x64>)
 800062e:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <mavlink_sha256_init+0x68>)
 8000634:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <mavlink_sha256_init+0x6c>)
 800063a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	6a09e667 	.word	0x6a09e667
 800064c:	bb67ae85 	.word	0xbb67ae85
 8000650:	3c6ef372 	.word	0x3c6ef372
 8000654:	a54ff53a 	.word	0xa54ff53a
 8000658:	510e527f 	.word	0x510e527f
 800065c:	9b05688c 	.word	0x9b05688c
 8000660:	1f83d9ab 	.word	0x1f83d9ab
 8000664:	5be0cd19 	.word	0x5be0cd19

08000668 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000668:	b480      	push	{r7}
 800066a:	b0cf      	sub	sp, #316	; 0x13c
 800066c:	af00      	add	r7, sp, #0
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	6018      	str	r0, [r3, #0]
 8000672:	463b      	mov	r3, r7
 8000674:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006cc:	e011      	b.n	80006f2 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 80006ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	463a      	mov	r2, r7
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	6819      	ldr	r1, [r3, #0]
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80006e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80006e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ec:	3301      	adds	r3, #1
 80006ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	dde9      	ble.n	80006ce <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80006fa:	2310      	movs	r3, #16
 80006fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000700:	e057      	b.n	80007b2 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000706:	1e9a      	subs	r2, r3, #2
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000710:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000718:	1e99      	subs	r1, r3, #2
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000726:	405a      	eors	r2, r3
 8000728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800072c:	1e99      	subs	r1, r3, #2
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000736:	0a9b      	lsrs	r3, r3, #10
 8000738:	405a      	eors	r2, r3
 800073a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800073e:	1fd9      	subs	r1, r3, #7
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000748:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800074a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800074e:	f1a3 010f 	sub.w	r1, r3, #15
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800075a:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800075e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000762:	f1a3 000f 	sub.w	r0, r3, #15
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800076e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000772:	4059      	eors	r1, r3
 8000774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000778:	f1a3 000f 	sub.w	r0, r3, #15
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000788:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800078a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800078e:	f1a3 0110 	sub.w	r1, r3, #16
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800079a:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80007a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80007a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007ac:	3301      	adds	r3, #1
 80007ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b6:	2b3f      	cmp	r3, #63	; 0x3f
 80007b8:	dda3      	ble.n	8000702 <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007c0:	e076      	b.n	80008b0 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80007c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007c6:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80007ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007ce:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80007d2:	405a      	eors	r2, r3
 80007d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007d8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80007dc:	405a      	eors	r2, r3
 80007de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007e2:	441a      	add	r2, r3
 80007e4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80007e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007ec:	4019      	ands	r1, r3
 80007ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007f2:	43d8      	mvns	r0, r3
 80007f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007f8:	4003      	ands	r3, r0
 80007fa:	404b      	eors	r3, r1
 80007fc:	441a      	add	r2, r3
 80007fe:	4955      	ldr	r1, [pc, #340]	; (8000954 <mavlink_sha256_calc+0x2ec>)
 8000800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000808:	441a      	add	r2, r3
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000816:	4413      	add	r3, r2
 8000818:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800081c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000820:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000824:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000828:	ea4f 3373 	mov.w	r3, r3, ror #13
 800082c:	405a      	eors	r2, r3
 800082e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000832:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000836:	405a      	eors	r2, r3
 8000838:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800083c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000840:	4059      	eors	r1, r3
 8000842:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000846:	4019      	ands	r1, r3
 8000848:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800084c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000850:	4003      	ands	r3, r0
 8000852:	404b      	eors	r3, r1
 8000854:	4413      	add	r3, r2
 8000856:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 800085a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800085e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000862:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 800086a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800086e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000872:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800087a:	4413      	add	r3, r2
 800087c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000884:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000888:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800088c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000894:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000898:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800089c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008a0:	4413      	add	r3, r2
 80008a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80008a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008aa:	3301      	adds	r3, #1
 80008ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008b4:	2b3f      	cmp	r3, #63	; 0x3f
 80008b6:	dd84      	ble.n	80007c2 <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008c2:	441a      	add	r2, r3
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	609a      	str	r2, [r3, #8]
    B += BB;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80008d4:	441a      	add	r2, r3
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	60da      	str	r2, [r3, #12]
    C += CC;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008e6:	441a      	add	r2, r3
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	611a      	str	r2, [r3, #16]
    D += DD;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	695a      	ldr	r2, [r3, #20]
 80008f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008f8:	441a      	add	r2, r3
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	615a      	str	r2, [r3, #20]
    E += EE;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800090a:	441a      	add	r2, r3
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	619a      	str	r2, [r3, #24]
    F += FF;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69da      	ldr	r2, [r3, #28]
 8000918:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800091c:	441a      	add	r2, r3
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	61da      	str	r2, [r3, #28]
    G += GG;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a1a      	ldr	r2, [r3, #32]
 800092a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800092e:	441a      	add	r2, r3
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	621a      	str	r2, [r3, #32]
    H += HH;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000940:	441a      	add	r2, r3
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000948:	bf00      	nop
 800094a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	08003854 	.word	0x08003854

08000958 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	; 0x70
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	441a      	add	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000982:	429a      	cmp	r2, r3
 8000984:	d904      	bls.n	8000990 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000992:	08db      	lsrs	r3, r3, #3
 8000994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000998:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 800099a:	e054      	b.n	8000a46 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 800099c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800099e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d201      	bcs.n	80009b0 <mavlink_sha256_update+0x58>
            l = len;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80009b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009b8:	4413      	add	r3, r2
 80009ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 ff16 	bl	80037f0 <memcpy>
	offset += l;
 80009c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80009c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009c8:	4413      	add	r3, r2
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 80009cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80009ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009d0:	4413      	add	r3, r2
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80009dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009de:	2b40      	cmp	r3, #64	; 0x40
 80009e0:	d131      	bne.n	8000a46 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3328      	adds	r3, #40	; 0x28
 80009e6:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	663b      	str	r3, [r7, #96]	; 0x60
 80009ec:	e020      	b.n	8000a30 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80009ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009f4:	4413      	add	r3, r2
 80009f6:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a06:	78da      	ldrb	r2, [r3, #3]
 8000a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a0a:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a0e:	3301      	adds	r3, #1
 8000a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a12:	7892      	ldrb	r2, [r2, #2]
 8000a14:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a18:	3302      	adds	r3, #2
 8000a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a1c:	7852      	ldrb	r2, [r2, #1]
 8000a1e:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a22:	3303      	adds	r3, #3
 8000a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8000a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a32:	2b0f      	cmp	r3, #15
 8000a34:	dddb      	ble.n	80009ee <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff fe13 	bl	8000668 <mavlink_sha256_calc>
	    offset = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1a7      	bne.n	800099c <mavlink_sha256_update+0x44>
	}
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	3770      	adds	r7, #112	; 0x70
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b098      	sub	sp, #96	; 0x60
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a68:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a6c:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a74:	3301      	adds	r3, #1
 8000a76:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	3301      	adds	r3, #1
 8000a88:	2247      	movs	r2, #71	; 0x47
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 feba 	bl	8003806 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a98:	3307      	adds	r3, #7
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aa0:	440b      	add	r3, r1
 8000aa2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	0a1a      	lsrs	r2, r3, #8
 8000aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aae:	3306      	adds	r3, #6
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	0c1a      	lsrs	r2, r3, #16
 8000ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ac4:	3305      	adds	r3, #5
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000acc:	440b      	add	r3, r1
 8000ace:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	0e1a      	lsrs	r2, r3, #24
 8000ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ada:	3304      	adds	r3, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aee:	3303      	adds	r3, #3
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000af6:	440b      	add	r3, r1
 8000af8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	0a1a      	lsrs	r2, r3, #8
 8000b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b04:	3302      	adds	r3, #2
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b0c:	440b      	add	r3, r1
 8000b0e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	0c1a      	lsrs	r2, r3, #16
 8000b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b22:	440b      	add	r3, r1
 8000b24:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	0e1b      	lsrs	r3, r3, #24
 8000b2e:	b2d9      	uxtb	r1, r3
 8000b30:	f107 020c 	add.w	r2, r7, #12
 8000b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b36:	4413      	add	r3, r2
 8000b38:	460a      	mov	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b3e:	f103 0208 	add.w	r2, r3, #8
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff05 	bl	8000958 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b50:	78da      	ldrb	r2, [r3, #3]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b5c:	7892      	ldrb	r2, [r2, #2]
 8000b5e:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	3302      	adds	r3, #2
 8000b64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b66:	7852      	ldrb	r2, [r2, #1]
 8000b68:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3303      	adds	r3, #3
 8000b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	3304      	adds	r3, #4
 8000b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b7a:	79d2      	ldrb	r2, [r2, #7]
 8000b7c:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	3305      	adds	r3, #5
 8000b82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b84:	7992      	ldrb	r2, [r2, #6]
 8000b86:	701a      	strb	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3760      	adds	r7, #96	; 0x60
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <mavlink_get_channel_status+0x24>)
 8000ba6:	4413      	add	r3, r2
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000002c 	.word	0x2000002c

08000bb8 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b0a1      	sub	sp, #132	; 0x84
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <mavlink_sign_packet+0x20>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <mavlink_sign_packet+0x24>
	    return 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e051      	b.n	8000c80 <mavlink_sign_packet+0xc8>
	}
	signature[0] = signing->link_id;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	785a      	ldrb	r2, [r3, #1]
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f103 0408 	add.w	r4, r3, #8
 8000bea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000bee:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f107 0110 	add.w	r1, r7, #16
 8000bfa:	2206      	movs	r2, #6
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fdf7 	bl	80037f0 <memcpy>
	signing->timestamp++;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000c08:	1c4b      	adds	r3, r1, #1
 8000c0a:	f142 0400 	adc.w	r4, r2, #0
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fced 	bl	80005f8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f103 0110 	add.w	r1, r3, #16
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	2220      	movs	r2, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe94 	bl	8000958 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe8d 	bl	8000958 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000c3e:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe84 	bl	8000958 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	2202      	movs	r2, #2
 8000c56:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fe7c 	bl	8000958 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	2207      	movs	r2, #7
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe75 	bl	8000958 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1dda      	adds	r2, r3, #7
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff feeb 	bl	8000a54 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000c7e:	230d      	movs	r3, #13
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3784      	adds	r7, #132	; 0x84
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c94:	e002      	b.n	8000c9c <_mav_trim_payload+0x14>
		length--;
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d906      	bls.n	8000cb0 <_mav_trim_payload+0x28>
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0f2      	beq.n	8000c96 <_mav_trim_payload+0xe>
	}
	return length;
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	b08f      	sub	sp, #60	; 0x3c
 8000cc0:	af04      	add	r7, sp, #16
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	72fb      	strb	r3, [r7, #11]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7b1b      	ldrb	r3, [r3, #12]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00c      	beq.n	8000d0a <mavlink_finalize_message_buffer+0x4e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d008      	beq.n	8000d0a <mavlink_finalize_message_buffer+0x4e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <mavlink_finalize_message_buffer+0x4e>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <mavlink_finalize_message_buffer+0x50>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000d10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8000d1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <mavlink_finalize_message_buffer+0x6c>
 8000d24:	230d      	movs	r3, #13
 8000d26:	e000      	b.n	8000d2a <mavlink_finalize_message_buffer+0x6e>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8000d2e:	230a      	movs	r3, #10
 8000d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8000d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	22fe      	movs	r2, #254	; 0xfe
 8000d40:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000d42:	2306      	movs	r3, #6
 8000d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d48:	e002      	b.n	8000d50 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	22fd      	movs	r2, #253	; 0xfd
 8000d4e:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000d50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10a      	bne.n	8000d6e <mavlink_finalize_message_buffer+0xb2>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	330c      	adds	r3, #12
 8000d5c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff90 	bl	8000c88 <_mav_trim_payload>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	e001      	b.n	8000d72 <mavlink_finalize_message_buffer+0xb6>
 8000d6e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	7afa      	ldrb	r2, [r7, #11]
 8000d7a:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	7aba      	ldrb	r2, [r7, #10]
 8000d80:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2200      	movs	r2, #0
 8000d86:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8000d88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	799a      	ldrb	r2, [r3, #6]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	799b      	ldrb	r3, [r3, #6]
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	789b      	ldrb	r3, [r3, #2]
 8000dbc:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	78db      	ldrb	r3, [r3, #3]
 8000dc2:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8000dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d013      	beq.n	8000df4 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	799b      	ldrb	r3, [r3, #6]
 8000dd0:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	79db      	ldrb	r3, [r3, #7]
 8000dd6:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	7a1b      	ldrb	r3, [r3, #8]
 8000ddc:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	7a5a      	ldrb	r2, [r3, #9]
 8000de2:	7a99      	ldrb	r1, [r3, #10]
 8000de4:	0209      	lsls	r1, r1, #8
 8000de6:	430a      	orrs	r2, r1
 8000de8:	7adb      	ldrb	r3, [r3, #11]
 8000dea:	041b      	lsls	r3, r3, #16
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	777b      	strb	r3, [r7, #29]
 8000df2:	e030      	b.n	8000e56 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	795b      	ldrb	r3, [r3, #5]
 8000dfe:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	79db      	ldrb	r3, [r3, #7]
 8000e0a:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	7a1b      	ldrb	r3, [r3, #8]
 8000e10:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	7a5a      	ldrb	r2, [r3, #9]
 8000e16:	7a99      	ldrb	r1, [r3, #10]
 8000e18:	0209      	lsls	r1, r1, #8
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	7adb      	ldrb	r3, [r3, #11]
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	7a5a      	ldrb	r2, [r3, #9]
 8000e2a:	7a99      	ldrb	r1, [r3, #10]
 8000e2c:	0209      	lsls	r1, r1, #8
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	7adb      	ldrb	r3, [r3, #11]
 8000e32:	041b      	lsls	r3, r3, #16
 8000e34:	4313      	orrs	r3, r2
 8000e36:	121b      	asrs	r3, r3, #8
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	7a5a      	ldrb	r2, [r3, #9]
 8000e42:	7a99      	ldrb	r1, [r3, #10]
 8000e44:	0209      	lsls	r1, r1, #8
 8000e46:	430a      	orrs	r2, r1
 8000e48:	7adb      	ldrb	r3, [r3, #11]
 8000e4a:	041b      	lsls	r3, r3, #16
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	141b      	asrs	r3, r3, #16
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8000e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	3301      	adds	r3, #1
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb89 	bl	8000580 <crc_calculate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f103 010c 	add.w	r1, r3, #12
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	78db      	ldrb	r3, [r3, #3]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f107 0316 	add.w	r3, r7, #22
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb9c 	bl	80005c0 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8000e88:	f107 0216 	add.w	r2, r7, #22
 8000e8c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fb36 	bl	8000504 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000e98:	8af9      	ldrh	r1, [r7, #22]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	330c      	adds	r3, #12
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	78d2      	ldrb	r2, [r2, #3]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b2ca      	uxtb	r2, r1
 8000ea6:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000ea8:	8afb      	ldrh	r3, [r7, #22]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b299      	uxth	r1, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f103 020c 	add.w	r2, r3, #12
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	78db      	ldrb	r3, [r3, #3]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2ca      	uxtb	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8000ec0:	8afa      	ldrh	r2, [r7, #22]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8000ec6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d01a      	beq.n	8000f04 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000ee0:	68f9      	ldr	r1, [r7, #12]
 8000ee2:	310c      	adds	r1, #12
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8000ee8:	4401      	add	r1, r0
 8000eea:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000eee:	f107 0018 	add.w	r0, r7, #24
 8000ef2:	9102      	str	r1, [sp, #8]
 8000ef4:	9201      	str	r2, [sp, #4]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	4633      	mov	r3, r6
 8000efa:	4602      	mov	r2, r0
 8000efc:	4629      	mov	r1, r5
 8000efe:	4620      	mov	r0, r4
 8000f00:	f7ff fe5a 	bl	8000bb8 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	78db      	ldrb	r3, [r3, #3]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3302      	adds	r3, #2
 8000f20:	b29b      	uxth	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	372c      	adds	r7, #44	; 0x2c
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f2a <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b088      	sub	sp, #32
 8000f2e:	af04      	add	r7, sp, #16
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	4608      	mov	r0, r1
 8000f34:	4611      	mov	r1, r2
 8000f36:	461a      	mov	r2, r3
 8000f38:	4603      	mov	r3, r0
 8000f3a:	70fb      	strb	r3, [r7, #3]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70bb      	strb	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe22 	bl	8000b90 <mavlink_get_channel_status>
 8000f4c:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8000f4e:	78ba      	ldrb	r2, [r7, #2]
 8000f50:	78f9      	ldrb	r1, [r7, #3]
 8000f52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	7f3b      	ldrb	r3, [r7, #28]
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	7e3b      	ldrb	r3, [r7, #24]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff feaa 	bl	8000cbc <mavlink_finalize_message_buffer>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af04      	add	r7, sp, #16
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4603      	mov	r3, r0
 8000f82:	70fb      	strb	r3, [r7, #3]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70bb      	strb	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8000f8c:	78ba      	ldrb	r2, [r7, #2]
 8000f8e:	78f9      	ldrb	r1, [r7, #3]
 8000f90:	7d3b      	ldrb	r3, [r7, #20]
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	7c3b      	ldrb	r3, [r7, #16]
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffc3 	bl	8000f2a <mavlink_finalize_message_chan>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	78db      	ldrb	r3, [r3, #3]
 8000fbc:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	2bfe      	cmp	r3, #254	; 0xfe
 8000fc4:	d13a      	bne.n	800103c <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	789a      	ldrb	r2, [r3, #2]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	7992      	ldrb	r2, [r2, #6]
 8000fe6:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3303      	adds	r3, #3
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	79d2      	ldrb	r2, [r2, #7]
 8000ff0:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	7a12      	ldrb	r2, [r2, #8]
 8000ffa:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	7a5a      	ldrb	r2, [r3, #9]
 8001000:	7a99      	ldrb	r1, [r3, #10]
 8001002:	0209      	lsls	r1, r1, #8
 8001004:	430a      	orrs	r2, r1
 8001006:	7adb      	ldrb	r3, [r3, #11]
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	4313      	orrs	r3, r2
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3305      	adds	r3, #5
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	1d98      	adds	r0, r3, #6
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f103 010c 	add.w	r1, r3, #12
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	78db      	ldrb	r3, [r3, #3]
 8001024:	461a      	mov	r2, r3
 8001026:	f002 fbe3 	bl	80037f0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800102a:	7dbb      	ldrb	r3, [r7, #22]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	78d2      	ldrb	r2, [r2, #3]
 8001030:	4413      	add	r3, r2
 8001032:	3301      	adds	r3, #1
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	e06c      	b.n	8001116 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	330c      	adds	r3, #12
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fe1f 	bl	8000c88 <_mav_trim_payload>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800104e:	2309      	movs	r3, #9
 8001050:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	789a      	ldrb	r2, [r3, #2]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3302      	adds	r3, #2
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	7912      	ldrb	r2, [r2, #4]
 800106a:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3303      	adds	r3, #3
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	7952      	ldrb	r2, [r2, #5]
 8001074:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	7992      	ldrb	r2, [r2, #6]
 800107e:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3305      	adds	r3, #5
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	79d2      	ldrb	r2, [r2, #7]
 8001088:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3306      	adds	r3, #6
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	7a12      	ldrb	r2, [r2, #8]
 8001092:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	7a5a      	ldrb	r2, [r3, #9]
 8001098:	7a99      	ldrb	r1, [r3, #10]
 800109a:	0209      	lsls	r1, r1, #8
 800109c:	430a      	orrs	r2, r1
 800109e:	7adb      	ldrb	r3, [r3, #11]
 80010a0:	041b      	lsls	r3, r3, #16
 80010a2:	4313      	orrs	r3, r2
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3307      	adds	r3, #7
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	7a5a      	ldrb	r2, [r3, #9]
 80010b2:	7a99      	ldrb	r1, [r3, #10]
 80010b4:	0209      	lsls	r1, r1, #8
 80010b6:	430a      	orrs	r2, r1
 80010b8:	7adb      	ldrb	r3, [r3, #11]
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	4313      	orrs	r3, r2
 80010be:	121a      	asrs	r2, r3, #8
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3308      	adds	r3, #8
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	7a5a      	ldrb	r2, [r3, #9]
 80010cc:	7a99      	ldrb	r1, [r3, #10]
 80010ce:	0209      	lsls	r1, r1, #8
 80010d0:	430a      	orrs	r2, r1
 80010d2:	7adb      	ldrb	r3, [r3, #11]
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	4313      	orrs	r3, r2
 80010d8:	141a      	asrs	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3309      	adds	r3, #9
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f103 000a 	add.w	r0, r3, #10
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	330c      	adds	r3, #12
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	4619      	mov	r1, r3
 80010f0:	f002 fb7e 	bl	80037f0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80010f4:	7dba      	ldrb	r2, [r7, #22]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4413      	add	r3, r2
 80010fa:	3301      	adds	r3, #1
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	791b      	ldrb	r3, [r3, #4]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <mavlink_msg_to_send_buffer+0x164>
 800110e:	230d      	movs	r3, #13
 8001110:	e000      	b.n	8001114 <mavlink_msg_to_send_buffer+0x166>
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	b2da      	uxtb	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29a      	uxth	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	3301      	adds	r3, #1
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1c98      	adds	r0, r3, #2
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001144:	7dfa      	ldrb	r2, [r7, #23]
 8001146:	4619      	mov	r1, r3
 8001148:	f002 fb52 	bl	80037f0 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800114c:	7dbb      	ldrb	r3, [r7, #22]
 800114e:	b29a      	uxth	r2, r3
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4413      	add	r3, r2
 8001156:	b29a      	uxth	r2, r3
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	3303      	adds	r3, #3
 8001162:	b29b      	uxth	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	2100      	movs	r1, #0
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f002 fb3f 	bl	8003806 <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 8001188:	e004      	b.n	8001194 <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f002 fb2e 	bl	80037f0 <memcpy>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <mavlink_msg_named_value_int_pack>:
 * @param value  Signed integer value
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, int32_t value)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	60ba      	str	r2, [r7, #8]
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	460b      	mov	r3, r1
 80011ac:	73bb      	strb	r3, [r7, #14]
    _mav_put_int32_t(buf, 4, value);
    _mav_put_char_array(buf, 8, name, 10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#else
    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	617b      	str	r3, [r7, #20]
    packet.value = value;
 80011b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b4:	61bb      	str	r3, [r7, #24]
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	3308      	adds	r3, #8
 80011bc:	220a      	movs	r2, #10
 80011be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffd3 	bl	800116c <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	330c      	adds	r3, #12
 80011ca:	f107 0114 	add.w	r1, r7, #20
 80011ce:	2212      	movs	r2, #18
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fb0d 	bl	80037f0 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_NAMED_VALUE_INT;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2200      	movs	r2, #0
 80011da:	f062 0203 	orn	r2, r2, #3
 80011de:	725a      	strb	r2, [r3, #9]
 80011e0:	2200      	movs	r2, #0
 80011e2:	729a      	strb	r2, [r3, #10]
 80011e4:	2200      	movs	r2, #0
 80011e6:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_NAMED_VALUE_INT_MIN_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
 80011e8:	7bba      	ldrb	r2, [r7, #14]
 80011ea:	7bf9      	ldrb	r1, [r7, #15]
 80011ec:	232c      	movs	r3, #44	; 0x2c
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2312      	movs	r3, #18
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2312      	movs	r3, #18
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	f7ff febb 	bl	8000f72 <mavlink_finalize_message>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <mavlink_msg_named_value_int_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param named_value_int C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 8001206:	b590      	push	{r4, r7, lr}
 8001208:	b087      	sub	sp, #28
 800120a:	af02      	add	r7, sp, #8
 800120c:	60ba      	str	r2, [r7, #8]
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	460b      	mov	r3, r1
 8001216:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3308      	adds	r3, #8
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6852      	ldr	r2, [r2, #4]
 8001224:	7bb9      	ldrb	r1, [r7, #14]
 8001226:	7bf8      	ldrb	r0, [r7, #15]
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	4623      	mov	r3, r4
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f7ff ffb4 	bl	800119c <mavlink_msg_named_value_int_pack>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}
	...

08001240 <MAV_Send_Msg_Named_Value_Int>:
	     }//end if
	}//end for
}

void MAV_Send_Msg_Named_Value_Int(char message[], uint32_t value)
{
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	466b      	mov	r3, sp
 800124c:	461e      	mov	r6, r3
	//create buffer of static proper length (static for this mavlink message)
	int PACKET_STATIC_SIZE = 30; //used to determine buffer size, and reduce bad 00's being sent
 800124e:	231e      	movs	r3, #30
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
	char buffer[PACKET_STATIC_SIZE];
 8001252:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001254:	1e6b      	subs	r3, r5, #1
 8001256:	623b      	str	r3, [r7, #32]
 8001258:	462b      	mov	r3, r5
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	f04f 0400 	mov.w	r4, #0
 8001268:	00d4      	lsls	r4, r2, #3
 800126a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800126e:	00cb      	lsls	r3, r1, #3
 8001270:	462b      	mov	r3, r5
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	f04f 0400 	mov.w	r4, #0
 8001280:	00d4      	lsls	r4, r2, #3
 8001282:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001286:	00cb      	lsls	r3, r1, #3
 8001288:	462b      	mov	r3, r5
 800128a:	3307      	adds	r3, #7
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	ebad 0d03 	sub.w	sp, sp, r3
 8001294:	466b      	mov	r3, sp
 8001296:	3300      	adds	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]

	//create struct and fill in data
	mavlink_named_value_int_t msgStruct;
	strcpy(msgStruct.name,message);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	3308      	adds	r3, #8
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fab7 	bl	8003816 <strcpy>
	msgStruct.time_boot_ms = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	60bb      	str	r3, [r7, #8]
	msgStruct.value = value;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
	//encode and serialize
	mavlink_msg_named_value_int_encode(SYSTEM_ID, COMPONENT_ID, &msg, &msgStruct);
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MAV_Send_Msg_Named_Value_Int+0xa4>)
 80012b2:	7818      	ldrb	r0, [r3, #0]
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MAV_Send_Msg_Named_Value_Int+0xa8>)
 80012b6:	7819      	ldrb	r1, [r3, #0]
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <MAV_Send_Msg_Named_Value_Int+0xac>)
 80012be:	f7ff ffa2 	bl	8001206 <mavlink_msg_named_value_int_encode>
	mavlink_msg_to_send_buffer(&buffer, &msg);
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	4909      	ldr	r1, [pc, #36]	; (80012ec <MAV_Send_Msg_Named_Value_Int+0xac>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe71 	bl	8000fae <mavlink_msg_to_send_buffer>
	//transmit
	Radio_Transmit_Raw(&buffer, sizeof(buffer));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	b2aa      	uxth	r2, r5
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f80c 	bl	80012f0 <Radio_Transmit_Raw>
 80012d8:	46b5      	mov	sp, r6
}
 80012da:	bf00      	nop
 80012dc:	372c      	adds	r7, #44	; 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000001 	.word	0x20000001
 80012ec:	20000164 	.word	0x20000164

080012f0 <Radio_Transmit_Raw>:
void Transmit(){

}

//send a raw message through uart without mavlink
void Radio_Transmit_Raw(uint8_t* message, uint16_t messageSize){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, message, messageSize,HAL_MAX_DELAY);
 80012fc:	887a      	ldrh	r2, [r7, #2]
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <Radio_Transmit_Raw+0x24>)
 8001306:	f002 f892 	bl	800342e <HAL_UART_Transmit>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000124 	.word	0x20000124

08001318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <HAL_MspInit+0x5c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_MspInit+0x5c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_MspInit+0x5c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_MspInit+0x60>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_MspInit+0x60>)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000

0800137c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_I2C_MspInit+0x74>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d124      	bne.n	80013e6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_I2C_MspInit+0x78>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_I2C_MspInit+0x78>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_I2C_MspInit+0x78>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ba:	2312      	movs	r3, #18
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <HAL_I2C_MspInit+0x7c>)
 80013ca:	f000 faa1 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_I2C_MspInit+0x78>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_I2C_MspInit+0x78>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_I2C_MspInit+0x78>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40005800 	.word	0x40005800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010c00 	.word	0x40010c00

080013fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_TIM_PWM_MspInit+0x34>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d10b      	bne.n	8001426 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_TIM_PWM_MspInit+0x38>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_TIM_PWM_MspInit+0x38>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_TIM_PWM_MspInit+0x38>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40000800 	.word	0x40000800
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_TIM_MspPostInit+0x5c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d118      	bne.n	800148a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_TIM_MspPostInit+0x60>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_TIM_MspPostInit+0x60>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_TIM_MspPostInit+0x60>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001470:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2302      	movs	r3, #2
 800147c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_TIM_MspPostInit+0x64>)
 8001486:	f000 fa43 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40000800 	.word	0x40000800
 8001498:	40021000 	.word	0x40021000
 800149c:	40010c00 	.word	0x40010c00

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_UART_MspInit+0x8c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d131      	bne.n	8001524 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <HAL_UART_MspInit+0x94>)
 8001506:	f000 fa03 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800150a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_UART_MspInit+0x94>)
 8001520:	f000 f9f6 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40013800 	.word	0x40013800
 8001530:	40021000 	.word	0x40021000
 8001534:	40010800 	.word	0x40010800

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <HardFault_Handler+0x4>

0800154a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <MemManage_Handler+0x4>

08001550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <BusFault_Handler+0x4>

08001556 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <UsageFault_Handler+0x4>

0800155c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 f8a2 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <SystemInit+0x5c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <SystemInit+0x5c>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <SystemInit+0x5c>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4911      	ldr	r1, [pc, #68]	; (80015e8 <SystemInit+0x5c>)
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <SystemInit+0x60>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <SystemInit+0x5c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <SystemInit+0x5c>)
 80015ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <SystemInit+0x5c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SystemInit+0x5c>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <SystemInit+0x5c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <SystemInit+0x5c>)
 80015ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SystemInit+0x5c>)
 80015d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SystemInit+0x64>)
 80015da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015de:	609a      	str	r2, [r3, #8]
#endif 
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	f8ff0000 	.word	0xf8ff0000
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015f6:	e003      	b.n	8001600 <LoopCopyDataInit>

080015f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015fe:	3104      	adds	r1, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001604:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001606:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001608:	d3f6      	bcc.n	80015f8 <CopyDataInit>
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800160c:	e002      	b.n	8001614 <LoopFillZerobss>

0800160e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001610:	f842 3b04 	str.w	r3, [r2], #4

08001614 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001616:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001618:	d3f9      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800161a:	f7ff ffb7 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f002 f8c3 	bl	80037a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001622:	f7fe fe1f 	bl	8000264 <main>
  bx lr
 8001626:	4770      	bx	lr
  ldr r3, =_sidata
 8001628:	08003964 	.word	0x08003964
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001630:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001634:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001638:	200004ec 	.word	0x200004ec

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_Init+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_Init+0x28>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f929 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f808 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff fe5c 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x54>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x58>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f933 	bl	80018f6 <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f000 f909 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x5c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000004 	.word	0x20000004
 80016c4:	2000000c 	.word	0x2000000c
 80016c8:	20000008 	.word	0x20000008

080016cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_IncTick+0x1c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x20>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_IncTick+0x20>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	2000000c 	.word	0x2000000c
 80016ec:	200004e8 	.word	0x200004e8

080016f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <HAL_GetTick+0x10>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	200004e8 	.word	0x200004e8

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff fff0 	bl	80016f0 <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_Delay+0x40>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffe0 	bl	80016f0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000000c 	.word	0x2000000c

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff90 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff49 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff5e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff90 	bl	8001800 <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5f 	bl	80017ac <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffb0 	bl	8001864 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e127      	b.n	8001b74 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001924:	2201      	movs	r2, #1
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8116 	bne.w	8001b6e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b12      	cmp	r3, #18
 8001948:	d034      	beq.n	80019b4 <HAL_GPIO_Init+0xa4>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d80d      	bhi.n	800196a <HAL_GPIO_Init+0x5a>
 800194e:	2b02      	cmp	r3, #2
 8001950:	d02b      	beq.n	80019aa <HAL_GPIO_Init+0x9a>
 8001952:	2b02      	cmp	r3, #2
 8001954:	d804      	bhi.n	8001960 <HAL_GPIO_Init+0x50>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d031      	beq.n	80019be <HAL_GPIO_Init+0xae>
 800195a:	2b01      	cmp	r3, #1
 800195c:	d01c      	beq.n	8001998 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e048      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001960:	2b03      	cmp	r3, #3
 8001962:	d043      	beq.n	80019ec <HAL_GPIO_Init+0xdc>
 8001964:	2b11      	cmp	r3, #17
 8001966:	d01b      	beq.n	80019a0 <HAL_GPIO_Init+0x90>
          break;
 8001968:	e043      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800196a:	4a89      	ldr	r2, [pc, #548]	; (8001b90 <HAL_GPIO_Init+0x280>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d026      	beq.n	80019be <HAL_GPIO_Init+0xae>
 8001970:	4a87      	ldr	r2, [pc, #540]	; (8001b90 <HAL_GPIO_Init+0x280>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d806      	bhi.n	8001984 <HAL_GPIO_Init+0x74>
 8001976:	4a87      	ldr	r2, [pc, #540]	; (8001b94 <HAL_GPIO_Init+0x284>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d020      	beq.n	80019be <HAL_GPIO_Init+0xae>
 800197c:	4a86      	ldr	r2, [pc, #536]	; (8001b98 <HAL_GPIO_Init+0x288>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01d      	beq.n	80019be <HAL_GPIO_Init+0xae>
          break;
 8001982:	e036      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001984:	4a85      	ldr	r2, [pc, #532]	; (8001b9c <HAL_GPIO_Init+0x28c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0xae>
 800198a:	4a85      	ldr	r2, [pc, #532]	; (8001ba0 <HAL_GPIO_Init+0x290>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d016      	beq.n	80019be <HAL_GPIO_Init+0xae>
 8001990:	4a84      	ldr	r2, [pc, #528]	; (8001ba4 <HAL_GPIO_Init+0x294>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0xae>
          break;
 8001996:	e02c      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e028      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	3304      	adds	r3, #4
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e023      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	3308      	adds	r3, #8
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e01e      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	330c      	adds	r3, #12
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e019      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c6:	2304      	movs	r3, #4
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e012      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	611a      	str	r2, [r3, #16]
          break;
 80019de:	e008      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	615a      	str	r2, [r3, #20]
          break;
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	d801      	bhi.n	80019fc <HAL_GPIO_Init+0xec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	e001      	b.n	8001a00 <HAL_GPIO_Init+0xf0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3304      	adds	r3, #4
 8001a00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2bff      	cmp	r3, #255	; 0xff
 8001a06:	d802      	bhi.n	8001a0e <HAL_GPIO_Init+0xfe>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x104>
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3b08      	subs	r3, #8
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	401a      	ands	r2, r3
 8001a26:	6a39      	ldr	r1, [r7, #32]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8096 	beq.w	8001b6e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a42:	4b59      	ldr	r3, [pc, #356]	; (8001ba8 <HAL_GPIO_Init+0x298>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_GPIO_Init+0x298>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_GPIO_Init+0x298>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a5a:	4a54      	ldr	r2, [pc, #336]	; (8001bac <HAL_GPIO_Init+0x29c>)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4b      	ldr	r2, [pc, #300]	; (8001bb0 <HAL_GPIO_Init+0x2a0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x19e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <HAL_GPIO_Init+0x2a4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x19a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a49      	ldr	r2, [pc, #292]	; (8001bb8 <HAL_GPIO_Init+0x2a8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x196>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_GPIO_Init+0x2ac>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x192>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x1a0>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x1a0>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x1a0>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x1a0>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ac0:	493a      	ldr	r1, [pc, #232]	; (8001bac <HAL_GPIO_Init+0x29c>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4938      	ldr	r1, [pc, #224]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
 8001ae6:	e006      	b.n	8001af6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4933      	ldr	r1, [pc, #204]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	492e      	ldr	r1, [pc, #184]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4929      	ldr	r1, [pc, #164]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4924      	ldr	r1, [pc, #144]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	491f      	ldr	r1, [pc, #124]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	491a      	ldr	r1, [pc, #104]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60cb      	str	r3, [r1, #12]
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4915      	ldr	r1, [pc, #84]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f aed0 	bne.w	8001924 <HAL_GPIO_Init+0x14>
  }
}
 8001b84:	bf00      	nop
 8001b86:	372c      	adds	r7, #44	; 0x2c
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	10210000 	.word	0x10210000
 8001b94:	10110000 	.word	0x10110000
 8001b98:	10120000 	.word	0x10120000
 8001b9c:	10310000 	.word	0x10310000
 8001ba0:	10320000 	.word	0x10320000
 8001ba4:	10220000 	.word	0x10220000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40011400 	.word	0x40011400
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be0:	e003      	b.n	8001bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e10f      	b.n	8001e26 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fbae 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c38:	f001 f864 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8001c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a7b      	ldr	r2, [pc, #492]	; (8001e30 <HAL_I2C_Init+0x23c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d807      	bhi.n	8001c58 <HAL_I2C_Init+0x64>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <HAL_I2C_Init+0x240>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	bf94      	ite	ls
 8001c50:	2301      	movls	r3, #1
 8001c52:	2300      	movhi	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e006      	b.n	8001c66 <HAL_I2C_Init+0x72>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <HAL_I2C_Init+0x244>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bf94      	ite	ls
 8001c60:	2301      	movls	r3, #1
 8001c62:	2300      	movhi	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0db      	b.n	8001e26 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4a72      	ldr	r2, [pc, #456]	; (8001e3c <HAL_I2C_Init+0x248>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a64      	ldr	r2, [pc, #400]	; (8001e30 <HAL_I2C_Init+0x23c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d802      	bhi.n	8001ca8 <HAL_I2C_Init+0xb4>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	e009      	b.n	8001cbc <HAL_I2C_Init+0xc8>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <HAL_I2C_Init+0x24c>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	3301      	adds	r3, #1
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4956      	ldr	r1, [pc, #344]	; (8001e30 <HAL_I2C_Init+0x23c>)
 8001cd8:	428b      	cmp	r3, r1
 8001cda:	d80d      	bhi.n	8001cf8 <HAL_I2C_Init+0x104>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e59      	subs	r1, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cea:	3301      	adds	r3, #1
 8001cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	bf38      	it	cc
 8001cf4:	2304      	movcc	r3, #4
 8001cf6:	e04f      	b.n	8001d98 <HAL_I2C_Init+0x1a4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d111      	bne.n	8001d24 <HAL_I2C_Init+0x130>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e58      	subs	r0, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	440b      	add	r3, r1
 8001d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e012      	b.n	8001d4a <HAL_I2C_Init+0x156>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	0099      	lsls	r1, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Init+0x15e>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e022      	b.n	8001d98 <HAL_I2C_Init+0x1a4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10e      	bne.n	8001d78 <HAL_I2C_Init+0x184>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1e58      	subs	r0, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	440b      	add	r3, r1
 8001d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d76:	e00f      	b.n	8001d98 <HAL_I2C_Init+0x1a4>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	6809      	ldr	r1, [r1, #0]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6911      	ldr	r1, [r2, #16]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68d2      	ldr	r2, [r2, #12]
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	000186a0 	.word	0x000186a0
 8001e34:	001e847f 	.word	0x001e847f
 8001e38:	003d08ff 	.word	0x003d08ff
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	460b      	mov	r3, r1
 8001e52:	817b      	strh	r3, [r7, #10]
 8001e54:	4613      	mov	r3, r2
 8001e56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff fc4a 	bl	80016f0 <HAL_GetTick>
 8001e5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	f040 80e0 	bne.w	800202c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2319      	movs	r3, #25
 8001e72:	2201      	movs	r2, #1
 8001e74:	4970      	ldr	r1, [pc, #448]	; (8002038 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fd5e 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	e0d3      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2C_Master_Transmit+0x50>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e0cc      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ea>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d007      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2221      	movs	r2, #33	; 0x21
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	893a      	ldrh	r2, [r7, #8]
 8001eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a50      	ldr	r2, [pc, #320]	; (800203c <HAL_I2C_Master_Transmit+0x1f8>)
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001efc:	8979      	ldrh	r1, [r7, #10]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	6a3a      	ldr	r2, [r7, #32]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fbec 	bl	80026e0 <I2C_MasterRequestWrite>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e08d      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f28:	e066      	b.n	8001ff8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	6a39      	ldr	r1, [r7, #32]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fdd8 	bl	8002ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00d      	beq.n	8001f56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d107      	bne.n	8001f52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e06b      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d11b      	bne.n	8001fcc <HAL_I2C_Master_Transmit+0x188>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d017      	beq.n	8001fcc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	6a39      	ldr	r1, [r7, #32]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fdc8 	bl	8002b66 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d107      	bne.n	8001ff4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e01a      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d194      	bne.n	8001f2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	e000      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800202c:	2302      	movs	r3, #2
  }
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	00100002 	.word	0x00100002
 800203c:	ffff0000 	.word	0xffff0000

08002040 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	460b      	mov	r3, r1
 800204e:	817b      	strh	r3, [r7, #10]
 8002050:	4613      	mov	r3, r2
 8002052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fb4c 	bl	80016f0 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 8213 	bne.w	800248e <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	497e      	ldr	r1, [pc, #504]	; (800226c <HAL_I2C_Master_Receive+0x22c>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fc60 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	e206      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Receive+0x50>
 800208c:	2302      	movs	r3, #2
 800208e:	e1ff      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2222      	movs	r2, #34	; 0x22
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2210      	movs	r2, #16
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <HAL_I2C_Master_Receive+0x230>)
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fb64 	bl	80027cc <I2C_MasterRequestRead>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c0      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	2b00      	cmp	r3, #0
 8002114:	d113      	bne.n	800213e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e194      	b.n	8002468 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b01      	cmp	r3, #1
 8002144:	d11d      	bne.n	8002182 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002154:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002156:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800217e:	b662      	cpsie	i
 8002180:	e172      	b.n	8002468 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	2b02      	cmp	r3, #2
 8002188:	d11d      	bne.n	80021c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800219a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c2:	b662      	cpsie	i
 80021c4:	e150      	b.n	8002468 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021ec:	e13c      	b.n	8002468 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	f200 80f5 	bhi.w	80023e2 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d123      	bne.n	8002248 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fcef 	bl	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e13d      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002246:	e10f      	b.n	8002468 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b02      	cmp	r3, #2
 800224e:	d150      	bne.n	80022f2 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	2200      	movs	r2, #0
 8002258:	4906      	ldr	r1, [pc, #24]	; (8002274 <HAL_I2C_Master_Receive+0x234>)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fb6c 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e112      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
 800226a:	bf00      	nop
 800226c:	00100002 	.word	0x00100002
 8002270:	ffff0000 	.word	0xffff0000
 8002274:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002288:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022bc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f0:	e0ba      	b.n	8002468 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	4967      	ldr	r1, [pc, #412]	; (8002498 <HAL_I2C_Master_Receive+0x458>)
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fb1b 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0c1      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800231c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	2200      	movs	r2, #0
 8002358:	494f      	ldr	r1, [pc, #316]	; (8002498 <HAL_I2C_Master_Receive+0x458>)
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 faec 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e092      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023ac:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e0:	e042      	b.n	8002468 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fbfe 	bl	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e04c      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d118      	bne.n	8002468 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f aebe 	bne.w	80021ee <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	00010004 	.word	0x00010004

0800249c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	460b      	mov	r3, r1
 80024aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff f920 	bl	80016f0 <HAL_GetTick>
 80024b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80024b2:	2301      	movs	r3, #1
 80024b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	f040 8105 	bne.w	80026ce <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2319      	movs	r3, #25
 80024ca:	2201      	movs	r2, #1
 80024cc:	4982      	ldr	r1, [pc, #520]	; (80026d8 <HAL_I2C_IsDeviceReady+0x23c>)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa32 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	e0f8      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_I2C_IsDeviceReady+0x50>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0f1      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x234>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d007      	beq.n	8002512 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2224      	movs	r2, #36	; 0x24
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_I2C_IsDeviceReady+0x240>)
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002544:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f9f0 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0b6      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002570:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002572:	f7ff f8bd 	bl	80016f0 <HAL_GetTick>
 8002576:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025a6:	e025      	b.n	80025f4 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025a8:	f7ff f8a2 	bl	80016f0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d302      	bcc.n	80025be <HAL_I2C_IsDeviceReady+0x122>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	22a0      	movs	r2, #160	; 0xa0
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2ba0      	cmp	r3, #160	; 0xa0
 80025fe:	d005      	beq.n	800260c <HAL_I2C_IsDeviceReady+0x170>
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_I2C_IsDeviceReady+0x170>
 8002606:	7dbb      	ldrb	r3, [r7, #22]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cd      	beq.n	80025a8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d129      	bne.n	8002676 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002630:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2319      	movs	r3, #25
 800264e:	2201      	movs	r2, #1
 8002650:	4921      	ldr	r1, [pc, #132]	; (80026d8 <HAL_I2C_IsDeviceReady+0x23c>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f970 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e036      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e02c      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800268e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	490f      	ldr	r1, [pc, #60]	; (80026d8 <HAL_I2C_IsDeviceReady+0x23c>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f94c 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e012      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f4ff af3e 	bcc.w	8002536 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d006      	beq.n	800270a <I2C_MasterRequestWrite+0x2a>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d003      	beq.n	800270a <I2C_MasterRequestWrite+0x2a>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002708:	d108      	bne.n	800271c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e00b      	b.n	8002734 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	2b12      	cmp	r3, #18
 8002722:	d107      	bne.n	8002734 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002732:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f8f9 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e035      	b.n	80027bc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002758:	d108      	bne.n	800276c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800275a:	897b      	ldrh	r3, [r7, #10]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002768:	611a      	str	r2, [r3, #16]
 800276a:	e01b      	b.n	80027a4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800276c:	897b      	ldrh	r3, [r7, #10]
 800276e:	11db      	asrs	r3, r3, #7
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0306 	and.w	r3, r3, #6
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f063 030f 	orn	r3, r3, #15
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <I2C_MasterRequestWrite+0xe4>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f92b 	bl	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e010      	b.n	80027bc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800279a:	897b      	ldrh	r3, [r7, #10]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <I2C_MasterRequestWrite+0xe8>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f91b 	bl	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	00010008 	.word	0x00010008
 80027c8:	00010002 	.word	0x00010002

080027cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	460b      	mov	r3, r1
 80027da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d006      	beq.n	8002806 <I2C_MasterRequestRead+0x3a>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d003      	beq.n	8002806 <I2C_MasterRequestRead+0x3a>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002804:	d108      	bne.n	8002818 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00b      	b.n	8002830 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	2b11      	cmp	r3, #17
 800281e:	d107      	bne.n	8002830 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f87b 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e06d      	b.n	8002928 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002854:	d108      	bne.n	8002868 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	611a      	str	r2, [r3, #16]
 8002866:	e053      	b.n	8002910 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002868:	897b      	ldrh	r3, [r7, #10]
 800286a:	11db      	asrs	r3, r3, #7
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 0306 	and.w	r3, r3, #6
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f063 030f 	orn	r3, r3, #15
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	492a      	ldr	r1, [pc, #168]	; (8002930 <I2C_MasterRequestRead+0x164>)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f8ad 	bl	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e048      	b.n	8002928 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4923      	ldr	r1, [pc, #140]	; (8002934 <I2C_MasterRequestRead+0x168>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f89d 	bl	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e038      	b.n	8002928 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f825 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e017      	b.n	8002928 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028f8:	897b      	ldrh	r3, [r7, #10]
 80028fa:	11db      	asrs	r3, r3, #7
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 0306 	and.w	r3, r3, #6
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f063 030e 	orn	r3, r3, #14
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <I2C_MasterRequestRead+0x168>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f865 	bl	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	00010008 	.word	0x00010008
 8002934:	00010002 	.word	0x00010002

08002938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	e025      	b.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d021      	beq.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7fe fecd 	bl	80016f0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e023      	b.n	80029de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10d      	bne.n	80029bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	e00c      	b.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d0b6      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f4:	e051      	b.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	d123      	bne.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0204 	orr.w	r2, r3, #4
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e046      	b.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d021      	beq.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a56:	f7fe fe4b 	bl	80016f0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d302      	bcc.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d116      	bne.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e020      	b.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10c      	bne.n	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf14      	ite	ne
 8002ab6:	2301      	movne	r3, #1
 8002ab8:	2300      	moveq	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e00b      	b.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d18d      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af0:	e02d      	b.n	8002b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f8ce 	bl	8002c94 <I2C_IsAcknowledgeFailed>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e02d      	b.n	8002b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d021      	beq.n	8002b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fe fdf1 	bl	80016f0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e007      	b.n	8002b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d1ca      	bne.n	8002af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b72:	e02d      	b.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f88d 	bl	8002c94 <I2C_IsAcknowledgeFailed>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02d      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d021      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8c:	f7fe fdb0 	bl	80016f0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d302      	bcc.n	8002ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d1ca      	bne.n	8002b74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf4:	e042      	b.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d119      	bne.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0210 	mvn.w	r2, #16
 8002c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e029      	b.n	8002c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fe fd5a 	bl	80016f0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e007      	b.n	8002c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d1b5      	bne.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002caa:	d11b      	bne.n	8002ce4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d08:	f7ff fff2 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08003954 	.word	0x08003954

08002d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d34:	4601      	mov	r1, r0
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	0adb      	lsrs	r3, r3, #11
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08003954 	.word	0x08003954

08002d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e01d      	b.n	8002da2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fb3e 	bl	80013fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f000 f8d0 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e0b4      	b.n	8002f30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	f200 809f 	bhi.w	8002f1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002f1d 	.word	0x08002f1d
 8002dec:	08002f1d 	.word	0x08002f1d
 8002df0:	08002f1d 	.word	0x08002f1d
 8002df4:	08002e59 	.word	0x08002e59
 8002df8:	08002f1d 	.word	0x08002f1d
 8002dfc:	08002f1d 	.word	0x08002f1d
 8002e00:	08002f1d 	.word	0x08002f1d
 8002e04:	08002e9b 	.word	0x08002e9b
 8002e08:	08002f1d 	.word	0x08002f1d
 8002e0c:	08002f1d 	.word	0x08002f1d
 8002e10:	08002f1d 	.word	0x08002f1d
 8002e14:	08002edb 	.word	0x08002edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f8ec 	bl	8002ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0208 	orr.w	r2, r2, #8
 8002e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6999      	ldr	r1, [r3, #24]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	619a      	str	r2, [r3, #24]
      break;
 8002e56:	e062      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f932 	bl	80030c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6999      	ldr	r1, [r3, #24]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]
      break;
 8002e98:	e041      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f97b 	bl	800319c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0208 	orr.w	r2, r2, #8
 8002eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0204 	bic.w	r2, r2, #4
 8002ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69d9      	ldr	r1, [r3, #28]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	61da      	str	r2, [r3, #28]
      break;
 8002ed8:	e021      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f9c5 	bl	8003270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69d9      	ldr	r1, [r3, #28]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	61da      	str	r2, [r3, #28]
      break;
 8002f1a:	e000      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002f1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <TIM_Base_SetConfig+0xb8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <TIM_Base_SetConfig+0x30>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d007      	beq.n	8002f68 <TIM_Base_SetConfig+0x30>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <TIM_Base_SetConfig+0xbc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_Base_SetConfig+0x30>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a25      	ldr	r2, [pc, #148]	; (8002ff8 <TIM_Base_SetConfig+0xc0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <TIM_Base_SetConfig+0xb8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <TIM_Base_SetConfig+0x62>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d007      	beq.n	8002f9a <TIM_Base_SetConfig+0x62>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <TIM_Base_SetConfig+0xbc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <TIM_Base_SetConfig+0x62>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <TIM_Base_SetConfig+0xc0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d108      	bne.n	8002fac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <TIM_Base_SetConfig+0xb8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d103      	bne.n	8002fe0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	615a      	str	r2, [r3, #20]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800

08002ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0302 	bic.w	r3, r3, #2
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <TIM_OC1_SetConfig+0xc8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10c      	bne.n	8003072 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0308 	bic.w	r3, r3, #8
 800305e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <TIM_OC1_SetConfig+0xc8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d111      	bne.n	800309e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	621a      	str	r2, [r3, #32]
}
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0210 	bic.w	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0320 	bic.w	r3, r3, #32
 8003112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <TIM_OC2_SetConfig+0xd0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d10d      	bne.n	8003144 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003142:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a14      	ldr	r2, [pc, #80]	; (8003198 <TIM_OC2_SetConfig+0xd0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d113      	bne.n	8003174 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00

0800319c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <TIM_OC3_SetConfig+0xd0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <TIM_OC3_SetConfig+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d113      	bne.n	8003246 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800322c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40012c00 	.word	0x40012c00

08003270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	031b      	lsls	r3, r3, #12
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <TIM_OC4_SetConfig+0x98>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d109      	bne.n	80032e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	40012c00 	.word	0x40012c00

0800330c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003320:	2302      	movs	r3, #2
 8003322:	e032      	b.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4313      	orrs	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e03f      	b.n	8003426 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe f870 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f90b 	bl	80035f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800340c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b088      	sub	sp, #32
 8003432:	af02      	add	r7, sp, #8
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	f040 8083 	bne.w	8003556 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Transmit+0x2e>
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e07b      	b.n	8003558 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_UART_Transmit+0x40>
 800346a:	2302      	movs	r3, #2
 800346c:	e074      	b.n	8003558 <HAL_UART_Transmit+0x12a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2221      	movs	r2, #33	; 0x21
 8003480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003484:	f7fe f934 	bl	80016f0 <HAL_GetTick>
 8003488:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	88fa      	ldrh	r2, [r7, #6]
 800348e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003496:	e042      	b.n	800351e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	d122      	bne.n	80034f6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f850 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e046      	b.n	8003558 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	3302      	adds	r3, #2
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	e017      	b.n	800351e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	e013      	b.n	800351e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f82d 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e023      	b.n	8003558 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	60ba      	str	r2, [r7, #8]
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1b7      	bne.n	8003498 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2200      	movs	r2, #0
 8003530:	2140      	movs	r1, #64	; 0x40
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f814 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e00a      	b.n	8003558 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003570:	e02c      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d028      	beq.n	80035cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <UART_WaitOnFlagUntilTimeout+0x30>
 8003580:	f7fe f8b6 	bl	80016f0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d21d      	bcs.n	80035cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800359e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e00f      	b.n	80035ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4013      	ands	r3, r2
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d0c3      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800362e:	f023 030c 	bic.w	r3, r3, #12
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	430b      	orrs	r3, r1
 800363a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <UART_SetConfig+0x1ac>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d14e      	bne.n	80036fa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800365c:	f7ff fb66 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8003660:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	4a4a      	ldr	r2, [pc, #296]	; (80037a4 <UART_SetConfig+0x1b0>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	0119      	lsls	r1, r3, #4
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009a      	lsls	r2, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	fbb2 f2f3 	udiv	r2, r2, r3
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <UART_SetConfig+0x1b0>)
 800369a:	fba3 0302 	umull	r0, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2064      	movs	r0, #100	; 0x64
 80036a2:	fb00 f303 	mul.w	r3, r0, r3
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	3332      	adds	r3, #50	; 0x32
 80036ac:	4a3d      	ldr	r2, [pc, #244]	; (80037a4 <UART_SetConfig+0x1b0>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b8:	4419      	add	r1, r3
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009a      	lsls	r2, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d0:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <UART_SetConfig+0x1b0>)
 80036d2:	fba3 0302 	umull	r0, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2064      	movs	r0, #100	; 0x64
 80036da:	fb00 f303 	mul.w	r3, r0, r3
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	3332      	adds	r3, #50	; 0x32
 80036e4:	4a2f      	ldr	r2, [pc, #188]	; (80037a4 <UART_SetConfig+0x1b0>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	440a      	add	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80036f8:	e04d      	b.n	8003796 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036fa:	f7ff fb03 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 80036fe:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009a      	lsls	r2, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <UART_SetConfig+0x1b0>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	0119      	lsls	r1, r3, #4
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009a      	lsls	r2, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	fbb2 f2f3 	udiv	r2, r2, r3
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <UART_SetConfig+0x1b0>)
 8003738:	fba3 0302 	umull	r0, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2064      	movs	r0, #100	; 0x64
 8003740:	fb00 f303 	mul.w	r3, r0, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <UART_SetConfig+0x1b0>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003756:	4419      	add	r1, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009a      	lsls	r2, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	fbb2 f2f3 	udiv	r2, r2, r3
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <UART_SetConfig+0x1b0>)
 8003770:	fba3 0302 	umull	r0, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2064      	movs	r0, #100	; 0x64
 8003778:	fb00 f303 	mul.w	r3, r0, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	3332      	adds	r3, #50	; 0x32
 8003782:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <UART_SetConfig+0x1b0>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	440a      	add	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40013800 	.word	0x40013800
 80037a4:	51eb851f 	.word	0x51eb851f

080037a8 <__libc_init_array>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	2500      	movs	r5, #0
 80037ac:	4e0c      	ldr	r6, [pc, #48]	; (80037e0 <__libc_init_array+0x38>)
 80037ae:	4c0d      	ldr	r4, [pc, #52]	; (80037e4 <__libc_init_array+0x3c>)
 80037b0:	1ba4      	subs	r4, r4, r6
 80037b2:	10a4      	asrs	r4, r4, #2
 80037b4:	42a5      	cmp	r5, r4
 80037b6:	d109      	bne.n	80037cc <__libc_init_array+0x24>
 80037b8:	f000 f836 	bl	8003828 <_init>
 80037bc:	2500      	movs	r5, #0
 80037be:	4e0a      	ldr	r6, [pc, #40]	; (80037e8 <__libc_init_array+0x40>)
 80037c0:	4c0a      	ldr	r4, [pc, #40]	; (80037ec <__libc_init_array+0x44>)
 80037c2:	1ba4      	subs	r4, r4, r6
 80037c4:	10a4      	asrs	r4, r4, #2
 80037c6:	42a5      	cmp	r5, r4
 80037c8:	d105      	bne.n	80037d6 <__libc_init_array+0x2e>
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037d0:	4798      	blx	r3
 80037d2:	3501      	adds	r5, #1
 80037d4:	e7ee      	b.n	80037b4 <__libc_init_array+0xc>
 80037d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037da:	4798      	blx	r3
 80037dc:	3501      	adds	r5, #1
 80037de:	e7f2      	b.n	80037c6 <__libc_init_array+0x1e>
 80037e0:	0800395c 	.word	0x0800395c
 80037e4:	0800395c 	.word	0x0800395c
 80037e8:	0800395c 	.word	0x0800395c
 80037ec:	08003960 	.word	0x08003960

080037f0 <memcpy>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	1e43      	subs	r3, r0, #1
 80037f4:	440a      	add	r2, r1
 80037f6:	4291      	cmp	r1, r2
 80037f8:	d100      	bne.n	80037fc <memcpy+0xc>
 80037fa:	bd10      	pop	{r4, pc}
 80037fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003804:	e7f7      	b.n	80037f6 <memcpy+0x6>

08003806 <memset>:
 8003806:	4603      	mov	r3, r0
 8003808:	4402      	add	r2, r0
 800380a:	4293      	cmp	r3, r2
 800380c:	d100      	bne.n	8003810 <memset+0xa>
 800380e:	4770      	bx	lr
 8003810:	f803 1b01 	strb.w	r1, [r3], #1
 8003814:	e7f9      	b.n	800380a <memset+0x4>

08003816 <strcpy>:
 8003816:	4603      	mov	r3, r0
 8003818:	f811 2b01 	ldrb.w	r2, [r1], #1
 800381c:	f803 2b01 	strb.w	r2, [r3], #1
 8003820:	2a00      	cmp	r2, #0
 8003822:	d1f9      	bne.n	8003818 <strcpy+0x2>
 8003824:	4770      	bx	lr
	...

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr
